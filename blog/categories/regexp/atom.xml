<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: RegExp | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/regexp/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-07-29T18:07:27+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Unicode转义(\uXXXX)的编码和解码]]></title>
    
      <category term="CSharp" />
    
      <category term="Decode" />
    
      <category term="Encode" />
    
      <category term="Java" />
    
      <category term="Javascript" />
    
      <category term="RegExp" />
    
    <link href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-07T12:23:00+08:00</published>
    <updated>2012-07-07T12:23:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string</id>
    <content type="html"><![CDATA[<p>在涉及Web前端开发时, 有时会遇到<code>\uXXXX</code>格式表示的字符, 其中<code>XXXX</code>是16进制数字的字符串表示形式, 在js中这个叫Unicode转义字符, 和<code>\n</code> <code>\r</code>同属于转义字符. 在其他语言中也有类似的, 可能还有其它变形的格式.</p>

<p>多数时候遇到需要解码的情况多点, 所以会先介绍解码decode, 后介绍编码encode.</p>

<p>下文会提供Javascript C# Java三种语言下不同方法的实现和简单说明, 会涉及到正则和位运算的典型用法.</p>

<!-- more -->


<h2>Javascript的实现</h2>

<h3>解码的实现</h3>

<p>``` js
function decode(s) {</p>

<pre><code>return unescape(s.replace(/\\(u[0-9a-fA-F]{4})/gm, '%$1'));
</code></pre>

<p>}
```</p>

<p><code>unescape</code>是用来处理<code>%uXXXX</code>这样格式的字符串, 将<code>\uXXXX</code>替换成<code>%uXXXX</code>后<code>unescape</code>就可以处理了.</p>

<h3>编码的实现</h3>

<p>``` js
function encode1(s) {</p>

<pre><code>return escape(s).replace(/%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm, function($0, $1, $2) {
    return $1 &amp;&amp; '\\' + $1.toLowerCase() || unescape($2);
});
</code></pre>

<p>}
```</p>

<p>和解码中相对应, 使用<code>escape</code>编码, 然后将<code>%uXXXX</code>替换为<code>\uXXXX</code>, 因为<code>escape</code>还可能把一些字符编码成<code>%XX</code>的格式, 所以这些字符还需要使用<code>unescape</code>还原回来.</p>

<p><code>escape</code>编码结果<code>%uXXXX</code>中的<code>XXXX</code>是大写的, 所以后面的<code>replace</code>只处理大写的<code>A-F</code>.</p>

<h3>另一种编码的实现</h3>

<p>不使用正则和<code>escape</code></p>

<p>``` js
function encode2(s) {</p>

<pre><code>var i, c, ret = [],
    pad = '000';
for (i = 0; i &lt; s.length; i++) {
    c = s.charCodeAt(i);
    if (c &gt; 256) {
        c = c.toString(16);
        ret[i] = '\\u' + pad.substr(0, 4 - c.length) + c;
    } else {
        ret[i] = s[i];
    }
}
return ret.join('');
</code></pre>

<p>}
```</p>

<p>遍历字符串中的字符, 那些<code>charCode</code>大于256的会转换成16进制字符串<code>c.toString(16)</code>, 如果不足4位则左边补0<code>pad.substr(0, 4 - c.length)</code>. 结尾将遍历的结果合并成字符串返回.</p>

<h2>C#的实现</h2>

<h3>解码的实现</h3>

<p>``` csharp
static Regex reUnicode = new Regex(@"\u([0-9a-fA-F]{4})", RegexOptions.Compiled);</p>

<p>public static string Decode(string s)
{</p>

<pre><code>return reUnicode.Replace(s, m =&gt;
{
    short c;
    if (short.TryParse(m.Groups[1].Value, System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture, out c))
    {
        return "" + (char)c;
    }
    return m.Value;
});
</code></pre>

<p>}
```</p>

<p>正则和js中的一样, 将<code>XXXX</code>转换以16进制<code>System.Globalization.NumberStyles.HexNumber</code>解析为<code>short</code>类型, 然后直接<code>(char)c</code>就能转换成对应的字符, <code>"" + (char)c</code>用于转换成字符串类型返回.</p>

<p>由于正则中也有<code>\uXXXX</code>, 所以需要写成<code>\\uXXXX</code>来表示匹配字符串<code>\uXXXX</code>, 而不是具体的字符.</p>

<p>上面使用到了Lambda, 需要至少dotnet 4的SDK才能编译通过, 可以在dotnet 2下运行.</p>

<h3>编码的实现</h3>

<p>``` csharp
static Regex reUnicodeChar = new Regex(@"[<sup>\u0000-\u00ff]",</sup> RegexOptions.Compiled);</p>

<p>public static string Encode(string s)
{</p>

<pre><code>return reUnicodeChar.Replace(s, m =&gt; string.Format(@"\u{0:x4}", (short)m.Value[0]));
</code></pre>

<p>}
```</p>

<p>和C#的解码实现正好相反, 0-255之外的字符, 从<code>char</code>转换成<code>short</code>, 然后<code>string.Format</code>以16进制, 至少输出4位.</p>

<h2>Java的实现</h2>

<h3>解码的实现</h3>

<p>和C#相似的, 使用正则</p>

<p>``` java
static final Pattern reUnicode = Pattern.compile("\\u([0-9a-zA-Z]{4})");</p>

<p>public static String decode1(String s) {</p>

<pre><code>Matcher m = reUnicode.matcher(s);
StringBuffer sb = new StringBuffer(s.length());
while (m.find()) {
    m.appendReplacement(sb,
            Character.toString((char) Integer.parseInt(m.group(1), 16)));
}
m.appendTail(sb);
return sb.toString();
</code></pre>

<p>}
```</p>

<p>Java语言没有内嵌正则语法, 也没有类似C#的<code>@"\u1234"</code>原始形式字符串的语法, 所以要表示正则中匹配<code>\</code>, 就需要<code>\\\\</code>, 其中2个是用于Java中字符转义, 2个是正则中的字符转义.</p>

<p>Java语言中没有设计函数或者委托的语法, 所以它的正则库提供的是<code>find</code> <code>appendReplacement</code> <code>appendTail</code>这些方法的组合, 等价于js和C#中的<code>replace</code>.</p>

<p>这里使用<code>StringBuffer</code>类型是由于<code>appendReplacement</code>只接受这个类型, <code>StringBuffer</code>有线程安全的额外操作, 所以性能差一点. 也许第三方的正则库能把API设计的更好用点.</p>

<p><code>Integer.parseInt(m.group(1), 16)</code>用于解析为<code>int</code>类型, 之后再<code>(char)</code>, 以及<code>Character.toString</code>转换成字符串.</p>

<h3>解码的另一种实现</h3>

<p>因为<code>StringBuffer</code>的原因, 不使用正则的实现</p>

<p>``` java
public static String decode2(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length());
char[] chars = s.toCharArray();
for (int i = 0; i &lt; chars.length; i++) {
    char c = chars[i];
    if (c == '\\' &amp;&amp; chars[i + 1] == 'u') {
        char cc = 0;
        for (int j = 0; j &lt; 4; j++) {
            char ch = Character.toLowerCase(chars[i + 2 + j]);
            if ('0' &lt;= ch &amp;&amp; ch &lt;= '9' || 'a' &lt;= ch &amp;&amp; ch &lt;= 'f') {
                cc |= (Character.digit(ch, 16) &lt;&lt; (3 - j) * 4);
            } else {
                cc = 0;
                break;
            }
        }
        if (cc &gt; 0) {
            i += 5;
            sb.append(cc);
            continue;
        }
    }
    sb.append(c);
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>手工做就是麻烦很多, 代码中也一坨的符号.</p>

<p>遍历所有字符<code>chars</code>, 检测到<code>\u</code>这样的字符串, 检测后续的4个字符是否是16进制数字的字符表示. 因为<code>Character.isDigit</code>会把一些其它语系的数字也算进来, 所以保险的做法<code>'0' &lt;= ch &amp;&amp; ch &lt;= '9'</code>.</p>

<p><code>Character.digit</code>会把<code>0-9</code>返回为<code>int</code>类型的0-9, 第2个参数是16时会把<code>a-f</code>返回为<code>int</code>类型的10-15.</p>

<p>剩下的就是用<code>|=</code>把各个部分的数字合并到一起, 转换成char类型. 还有一些调整遍历位置等.</p>

<h3>编码的实现</h3>

<p>考虑到Java正则的杯具, 还是继续手工来吧, 相对解码来说代码少点.</p>

<p>``` java
public static String encode(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length() * 3);
for (char c : s.toCharArray()) {
    if (c &lt; 256) {
        sb.append(c);
    } else {
        sb.append("\\u");
        sb.append(Character.forDigit((c &gt;&gt;&gt; 12) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 8) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 4) &amp; 0xf, 16));
        sb.append(Character.forDigit((c) &amp; 0xf, 16));
    }
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>对应于上文Java编码的实现正好是反向的实现, 依旧遍历字符, 遇到大于256的字符, 用位运算提取出4部分并使用<code>Character.forDigit</code>转换成16进制数对应的字符.</p>

<p>剩下就是<code>sb.toString()</code>返回了.</p>

<h2>总结</h2>

<ul>
<li>编码从逻辑上比解码简单点.</li>
<li>对付字符串, js还是最顺手的, 也方便测试.</li>
<li>位运算的性能很高.</li>
<li>Java的正则库设计的很不方便, 可以考虑第三方.</li>
<li>Java的语法设计现在看来呆板, 落后, 也没有js那种灵活.</li>
<li>上文Java的非正则实现可以写成等价的C#代码.</li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 和 Jekyll 的笔记]]></title>
    
      <category term="Jekyll" />
    
      <category term="Liquid" />
    
      <category term="Octopress" />
    
      <category term="RegExp" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-05-06T15:57:00+08:00</published>
    <updated>2012-05-06T15:57:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note</id>
    <content type="html"><![CDATA[<p>之前发现<a href="http://octopress.org/">Octopress</a>产生的页面中, <strong>meta</strong>标签的<strong>content</strong>属性没有处理换行, 今天尝试自己写个插件来处理这个地方, 因为没有学过Ruby, 下面的操作基本都是临时找资料, 所以记录一些重点.</p>

<p>插件代码如下</p>

<p>``` ruby plugins/html_attr_filter.rb</p>

<h1>coding: utf-8</h1>

<h1>html attribute filter</h1>

<p>module HtmlAttrFilters</p>

<pre><code>def html_attr(input)
    input.gsub(/\r\n|\r|\n/, "\r\n"=&gt;'&amp;#13;&amp;#10;', "\r"=&gt;'&amp;#13;', "\n"=&gt;'&amp;#10;')
end
</code></pre>

<p>end</p>

<p>Liquid::Template.register_filter HtmlAttrFilters
```</p>

<p>修改<code>source/_includes/head.html</code>中<code>&lt;meta name="description"</code>所在的行</p>

<p><code>html source/_includes/head.html
  &lt;meta name="description" content="{{ description | strip_html | condense_spaces | truncate:150 | html_attr }}"&gt;
</code></p>

<p>然后<code>rake generate</code>就能看到<code>&lt;meta name="description"</code>的<strong>content</strong>已经不会有换行了, 下面说说中间涉及的相关东西.</p>

<!-- more -->


<h2>Jekyll扩展和Liquid扩展</h2>

<p><a href="http://octopress.org/">Octopress</a>是基于<a href="https://github.com/mojombo/jekyll">Jekyll</a>的, <a href="https://github.com/mojombo/jekyll">Jekyll</a>使用的模版引擎是<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>, 在模版中<code>{{ a | foo | bar}}</code>的<code>foo</code>和<code>bar</code>叫做<strong>Filter</strong>, 后面将把其称为<strong>过滤器</strong>, 在<a href="https://github.com/mojombo/jekyll">Jekyll</a>的<a href="https://github.com/mojombo/jekyll/wiki/Plugins">插件开发文档</a>中有一段是关于过滤器扩展, 我主要是参考这里来做文章开始的扩展.</p>

<h3>Liquid filters</h3>

<p>You can add your own filters to the liquid system much like you can add tags above. Filters are simply modules that export their methods to liquid. All methods will have to take at least one parameter which represents the input of the filter. The return value will be the output of the filter.</p>

<p>``` ruby
module Jekyll
  module AssetFilter</p>

<pre><code>def asset_url(input)      
  "http://www.example.com/#{input}?#{Time.now.to_i}"
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_filter(Jekyll::AssetFilter)
```</p>

<p><strong>Advanced</strong>: you can access the <code>site</code> object through the <code>@context.registers</code> feature of liquid. Registers a hash where arbitrary context objects can be attached to. In Jekyll you can access the site object through registers. As an example, you can access the global configuration (_config.yml) like this: <code>@context.registers[:site].config['cdn']</code>.</p>

<h3>延伸: Octopress Jekyll和Liquid所有可用的过滤器</h3>

<p><a href="http://octopress.org/">Octopress</a>扩展的过滤器在<a href="https://github.com/imathis/octopress/blob/master/plugins/octopress_filters.rb">这里</a>, 主要是从36行开始的这些:</p>

<p>``` ruby plugins/octopress_filters.rb
module OctopressLiquidFilters
  include Octopress::Date</p>

<p>  # Used on the blog index to split posts on the <!--more--> marker
  def excerpt(input)</p>

<pre><code>if input.index(/&lt;!--\s*more\s*--&gt;/i)
  input.split(/&lt;!--\s*more\s*--&gt;/i)[0]
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Checks for excerpts (helpful for template conditionals)
  def has_excerpt(input)</p>

<pre><code>input =~ /&lt;!--\s*more\s*--&gt;/i ? true : false
</code></pre>

<p>  end</p>

<p>  # Summary is used on the Archive pages to return the first block of content from a post.
  def summary(input)</p>

<pre><code>if input.index(/\n\n/)
  input.split(/\n\n/)[0]
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Extracts raw content DIV from template, used for page description as 
  # contains complete sub-template code on main page level
  def raw_content(input)</p>

<pre><code>/&lt;div class="entry-content"&gt;(?&lt;content&gt;[\s\S]*?)&lt;\/div&gt;\s*&lt;(footer|\/article)&gt;/ =~ input
return (content.nil?) ? input : content
</code></pre>

<p>  end</p>

<p>  # Escapes CDATA sections in post content
  def cdata_escape(input)</p>

<pre><code>input.gsub(/&lt;!\[CDATA\[/, '&amp;lt;![CDATA[').gsub(/\]\]&gt;/, ']]&amp;gt;')
</code></pre>

<p>  end</p>

<p>  # Replaces relative urls with full urls
  def expand_urls(input, url='')</p>

<pre><code>url ||= '/'
input.gsub /(\s+(href|src)\s*=\s*["|']{1})(\/[^\"'&gt;]*)/ do
  $1+url+$3
end
</code></pre>

<p>  end</p>

<p>  # Improved version of Liquid's truncate:
  # - Doesn't cut in the middle of a word.
  # - Uses typographically correct ellipsis (…) insted of '...'
  def truncate(input, length)</p>

<pre><code>if input.length &gt; length &amp;&amp; input[0..(length-1)] =~ /(.+)\b.+$/im
  $1.strip + ' &amp;hellip;'
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Improved version of Liquid's truncatewords:
  # - Uses typographically correct ellipsis (…) insted of '...'
  def truncatewords(input, length)</p>

<pre><code>truncate = input.split(' ')
if truncate.length &gt; length
  truncate[0..length-1].join(' ').strip + ' &amp;hellip;'
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Condenses multiple spaces and tabs into a single space
  def condense_spaces(input)</p>

<pre><code>input.gsub(/\s{2,}/, ' ')
</code></pre>

<p>  end</p>

<p>  # Removes trailing forward slash from a string for easily appending url segments
  def strip_slash(input)</p>

<pre><code>if input =~ /(.+)\/$|^\/$/
  input = $1
end
input
</code></pre>

<p>  end</p>

<p>  # Returns a url without the protocol (http://)
  def shorthand_url(input)</p>

<pre><code>input.gsub /(https?:\/\/)(\S+)/ do
  $2
end
</code></pre>

<p>  end</p>

<p>  # Returns a title cased string based on John Gruber's title case http://daringfireball.net/2008/08/title_case_update
  def titlecase(input)</p>

<pre><code>input.titlecase
</code></pre>

<p>  end</p>

<p>end
Liquid::Template.register_filter OctopressLiquidFilters
```</p>

<p><code>def</code>后的名称即过滤器的名称.</p>

<p><a href="https://github.com/mojombo/jekyll">Jekyll</a>扩展的过滤器在<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">这里</a></p>

<p><a href="https://github.com/Shopify/liquid/wiki">Liquid</a>的标准过滤器在<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">这里</a></p>

<h2>Ruby的字符串和正则</h2>

<p>Ruby的字符串可以使用双引号<code>"foo bar"</code>, 也可以使用单引号<code>'foo bar'</code>, 区别是:</p>

<ul>
<li>双引号中可以使用<code>\r\n</code>等转义符号, 以及<code>#{bar}</code>来引入一个变量的值, <code>bar</code>表示一个变量名.</li>
<li>单引号会将所有的字符原样保留, 包括<code>\r\n</code>, 其等价于双引号的<code>\\r\\n</code>.</li>
</ul>


<p>Ruby字符串的替换可以使用<code>gsub</code>方法, 类似一般语言中的<code>replace</code>, 第一个参数仍旧可以为正则, Ruby的文档中代码示例如下:</p>

<p><code>ruby String#gsub
"hello".gsub(/[aeiou]/, '*')                  #=&gt; "h*ll*"
"hello".gsub(/([aeiou])/, '&lt;\1&gt;')             #=&gt; "h&lt;e&gt;ll&lt;o&gt;"
"hello".gsub(/./) {|s| s.ord.to_s + ' '}      #=&gt; "104 101 108 108 111 "
"hello".gsub(/(?&lt;foo&gt;[aeiou])/, '{\k&lt;foo&gt;}')  #=&gt; "h{e}ll{o}"
'hello'.gsub(/[eo]/, 'e' =&gt; 3, 'o' =&gt; '*')    #=&gt; "h3ll*"
</code></p>

<p>我没有完整的看Ruby的语言规范, 根据文档的描述, 示例代码中最后一行<code>'e' =&gt; 3, 'o' =&gt; '*'</code>叫做<strong>Hash</strong>.</p>

<p>另外一个方法<code>sub</code>和<code>gsub</code>区别在: <code>sub</code>只会替换一次, <code>gsub</code>会替换所有的.</p>

<p>更多资料:</p>

<ul>
<li> <a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_stdtypes.html">Ruby基础类型</a>中还有更多关于<code>String</code>类型的基础.</li>
<li> <a href="http://www.ruby-doc.org/core-1.9.3/String.html">类库参考 String</a>中有完整的<code>String</code>可使用.</li>
</ul>


<p>Ruby中正则的使用感觉和Javascript的十分象, 当然也有一些其它的语法, 详细参考<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">Ruby类库参考 Regexp</a></p>

<p>发现一个特别的地方是Javascript中正则可以使用的选项有<code>igm</code>, 而Ruby是<code>imxo</code>, 见<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">这里</a><strong>的Options</strong></p>

      <p><a href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
