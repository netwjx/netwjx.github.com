<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: Javascript | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-11-04T18:32:16+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Javascript异步加载]]></title>
    
      <category term="Javascript" />
    
    <link href="http://netwjx.github.com/blog/2012/11/04/javascript-async-load/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-11-04T17:50:00+08:00</published>
    <updated>2012-11-04T17:50:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/11/04/javascript-async-load</id>
    <content type="html"><![CDATA[<p>这是8月份写了一份草稿, 但是一直都觉得这个主题组织起来比较纠结, 现在觉得不该再拖了, 先把之前的理解都整理出来吧.</p>

<p>异步加载这个名称不是很贴切, 实际上有三部分, 非阻塞(不暂停页面渲染) 下载 执行. 只是叫异步加载字数少点, 请不要完全从这个字面理解其意义.</p>

<p>主要用于外链的js文件, 会带来下面的好处:</p>

<ul>
<li>页面内容显示更快, 特别对于定义在<code>&lt;head&gt;</code>和文档开始处的外链js.</li>
<li>使用第三方Javascript时, 如果第三方无法访问, 也不会使页面很长时间是空白.</li>
<li>使用一些手法可以控制页面内容的显示顺序, 比如重要的先显示.</li>
<li>模块化Javascript, 使用<a href="#jsloader">Javascript模块加载器</a>管理大量相互依赖的Javascript.</li>
</ul>


<p>如果仅仅想页面内容显示的更快, 可以简单的把脚本放置在文档结尾, 比如<code>&lt;/body&gt;</code>标签前.</p>

<p>异步加载的js文件有一个限制的:</p>

<ul>
<li>不能使用<code>document.write()</code>, 因为页面已经加载完成, 再调用会覆盖现有页面的内容.</li>
</ul>


<p>下面是异步加载的一些实现方式.</p>

<h2>使用script标签的defer属性</h2>

<p>``` html</p>

<script type="text/javascript" defer src="javascript.js"></script>


<p>```</p>

<p>使用了<code>defer</code>属性的<code>&lt;script&gt;</code>标签下载时不会暂停页面渲染, 当页面解析完后执行, 即常说的<code>DOM Ready</code>之后, <code>window load</code>之前.</p>

<p>如果有多个<code>&lt;script defer&gt;</code>将会按照DOM中的顺序执行, 多个前后依赖的脚本可以放心使用.</p>

<!-- more -->


<p><code>defer</code>属性在html 4中就定义了, 各浏览器兼容性如下:</p>

<ul>
<li>Chrome, Safari支持.</li>
<li>Firefox 3.5开始支持, 从3.6开始对行内脚本忽略<code>defer</code>属性, 将会立即执行.</li>
<li>IE 4开始支持, 对于行内脚本的<code>defer</code>属性IE6会有一些特殊的规则.</li>
<li>Opera 不支持.</li>
</ul>


<p>行内脚本(inline script)是指相对于使用<code>src</code>属性外链的脚本来说的, 即下面的代码:</p>

<p>``` html</p>

<script type="text/javascript">
    alert('inline script');
</script>


<p>```</p>

<p>IE6中外链脚本的<code>defer</code>属性符合上文描述的规则, 但是行内脚本遵循下面的规则.</p>

<ul>
<li><code>&lt;head&gt;</code>中定义的会在<code>&lt;head&gt;</code>标签解析完成执行.</li>
<li><code>&lt;body&gt;</code>中定义的会在<code>&lt;body&gt;</code>标签解析完成执行.</li>
</ul>


<h2>使用script标签的async属性</h2>

<p>``` html</p>

<script type="text/javascript" async src="javascript.js"></script>


<p>```</p>

<p>使用了<code>async</code>属性的脚本下载时同样不会暂停页面渲染, 但是它会在下载完成时就执行, 在多个外链脚本时, 可能会有无法控制的执行顺序, 前后依赖的多个脚本不能使用这种方式加载.</p>

<p><code>async</code>属性在html 5中定义, 各浏览器兼容性如下:</p>

<ul>
<li>Chrome, Safari支持.</li>
<li>Firefox 3.6开始支持.</li>
<li>IE 10开始支持.</li>
<li>Opera不支持.</li>
</ul>


<h3>async和defer的异同</h3>

<ul>
<li>同样都可以在下载时不暂停页面渲染.</li>
<li>下载完<code>async</code>会立即执行, 而<code>defer</code>会在页面解析完按照DOM树中的顺序执行.</li>
</ul>


<p>如果浏览器支持的话, <code>async</code>的优先级比<code>defer</code>高, 即如果<code>async</code>为<code>true</code>的话, 会忽略<code>defer</code>属性.</p>

<h2>使用Javascript编码方式</h2>

<p>上述拥有<code>defer</code> <code>async</code>属性的<code>&lt;script&gt;</code>标签都可以通过Javascript编码方式插入到DOM树中, 代码如下:</p>

<p>``` html</p>

<script type="text/javascript">
(function(){
    var node = document.createElement('script');
    node.type = 'text/javascript';
    node.async = true; // 使用async, 请根据实际需要修改
    node.defer = true; // 使用defer, 请根据实际需要修改
    node.src = 'javascript.js';
    document.getElementsByTagName('head')[0].appendChild(node);
}());
</script>


<p>```</p>

<p>上述代码适合放到<code>&lt;body&gt;</code>中, 因为<code>&lt;head&gt;</code>标签未解析完成的情况下不能插入元素.</p>

<p>也可以在页面加载后(<code>window.onload</code>)插入, 代码如下:</p>

<p>``` html</p>

<script type="text/javascript">
(function(w, d){
    if (w.addEventListener) {
        w.addEventListener('load', onLoad, false);
    } else if (w.attachEvent) {
        w.attachEvent('onload', onLoad);
    } else {
        w.onload = onLoad;
    }

    function onLoad(){
        var node = d.createElement('script');
        node.type = 'text/javascript';
        node.src = 'javascript.js';
        d.body.appendChild(node);
    }
}(window, document));
</script>


<p>```</p>

<p>更常用的是<code>DOM Ready</code>之后插入, 相对会更早点, 鉴于完整的<code>DOM Ready</code>代码量比较多, 下面例子使用jQuery的<code>DOM Ready</code>实现:</p>

<p>``` html</p>

<script type="text/javascript">
jQuery(function($){
    var file = 'javascript.js';
    $('<script type="text/javascript">').attr('src', file).appendTo('head');
});
</script>
```

Javascript编码方式也是[Javascript模块加载器](#jsloader)基本原理.


<a name="jsloader"></a>
使用Javascript模块加载器
------------------------

这是更重量级的做法, 适用于大量互相依赖的Javascript的异步加载, 一般需要遵循模块加载器的规则编写自己的模块以用于异步加载.

下面是常见Javascript模块加载器和简单的使用代码.

### RequireJS

[RequireJS](http://requirejs.org/)

``` html
<head>
<script data-main="scripts/main" src="scripts/require.js"></script>
<!-- RequireJS加载完成后会加载 scripts/main.js, 其内容见下面的代码 -->
</head>
```

``` js scripts/main.js
require(["helper/util"], function(util) {
    // 这个函数会在 scripts/helper/util.js 加载后调用.
    // 参数 util 是 helper/util 模块, 其包括 helper/util.js 中使用 define() 定义的值和函数.
});
```

### Head JS

[Head JS](http://headjs.com/) 除了提供加载js之外还可以加载css, css js和浏览器特性检测等. 这里只贴加载js的示例代码.

``` html
<script type="text/javascript">
head.js("/path/to/jquery.js", "/google/analytics.js", "/js/site.js", function() {
   // all done
});
</script>
```

### SeaJS

[SeaJS](http://seajs.org) 是 [lifesinger](https://github.com/lifesinger) 发起的项目, 提供有完整的中文文档和相关预编译, 打包部署工具. 并且其模块化API遵循[CommonJS][CommonJS]的标准.

``` html
<script src="assets/sea-modules/seajs/1.3.0/sea.js"></script>
<script type="text/javascript">
// 加载入口模块
seajs.use('./assets/src/hello.js');
</script>
```

``` js /assets/src/hello.js
define(function(require) {
  // 得到 Spinning 函数类
  var Spinning = require('./spinning');

  // 初始化
  var s = new Spinning('#container');
  s.render();
})
```

使用spm打包部署

```
$ cd hello-seajs/assets
$ spm build 
...
BUILD SUCCESS!
$
```

作为第三方提供嵌入代码的建议
----------------------------

如果打算让别的网站通过一段代码来嵌入自己网站的内容, 建议提供下面这种风格的嵌入代码.

``` html
<div id="widget"></div>
<script type="text/javascript" defer async
    src="http://domain.com/widgets/username/?appendTo=widget">
</script>
```

-   `id="widget"` 是用于放置第三方组件的容器.
-   `script` 定义了 `defer` `async` 用于异步加载, 不会暂停页面渲染.
-   `src` 属性的URL定义了用户相关的数据(`/username`), 以及指定把组件添加到`id="widget"`的标签中.

其Javascript大概是这样的

``` js
var ele = document.getElementById('widget'),
    html = [];

html.push('<a href="http://domain.com/username">username</a>');
// ...
ele.innerHTML = html.join('');
```

延迟解析Javascript
------------------

在参考资料中 [Defer parsing of JavaScript][DeferParsingJS] 提及在移动应用中一般会减少使用外链脚本的数量, 这样可能行内脚本会增多, 对于哪些不是必须立即执行的行内脚本可以尝试的延迟解析, 不仅仅是延迟执行.

具体做法比如将其写为注释或任何能让浏览器忽略的格式, 等需要的时候再使用`eval()`执行.

当然也可以简单的将所有`<script>`放在文档结尾.

参考资料
--------

-   [script的defer和async 携程UED](http://ued.ctrip.com/blog/?p=3121)
-   [script - HTML | MDN](https://developer.mozilla.org/en-US/docs/HTML/Element/Script)
-   [CommonJS][CommonJS]
-   [Prefer asynchronous resources - Make the Web Faster - Google Developers](https://developers.google.com/speed/docs/best-practices/rtt#PreferAsyncResources)
-   [Defer loading of JavaScript - Make the Web Faster - Google Developers](https://developers.google.com/speed/docs/best-practices/payload#DeferLoadingJS)
-   [Defer parsing of JavaScript - Make the Web Faster - Google Developers][DeferParsingJS]

[DeferParsingJS]: https://developers.google.com/speed/docs/best-practices/mobile#DeferParsingJS "Defer parsing of JavaScript"
[CommonJS]: http://www.commonjs.org/ "CommonJS"


      <p><a href="http://netwjx.github.com/blog/2012/11/04/javascript-async-load/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Firefox下设置location不生效]]></title>
    
      <category term="Error" />
    
      <category term="Firefox" />
    
      <category term="Javascript" />
    
      <category term="Memo" />
    
      <category term="jQuery" />
    
    <link href="http://netwjx.github.com/blog/2012/10/01/set-location-is-invalid-in-firefox/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-10-01T16:26:00+08:00</published>
    <updated>2012-10-01T16:26:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/10/01/set-location-is-invalid-in-firefox</id>
    <content type="html"><![CDATA[<p>项目中使用的窗口组件加载内容是使用<code>iframe</code>实现的, 以前遇到的各种问题总是在IE下, 但是之前又发现一个很奇怪的问题, 仅在Firefox下出现.</p>

<p>具体表现为窗口组件关闭时再将相关的父级或<code>iframe</code>重定向到新的地址, 结果在Firefox下没看到重定向, 也没在错误控制台看到任何错误信息.</p>

<p>前提: 以下所有的都不涉及跨域的问题, 只描述Firefox下运行的情况, 目前我的Firefox版本是15.0.1.</p>

<p>关键结构如下, <code>$</code>表示jQuery:</p>

<p>``` html</p>

<script>
    function dialog()
        var ifrm = $('<iframe id="Dialog1">').appendTo('body')[0];
        ifrm.openWindow = window;
        // ...

    function dialogClose(frameElement, url)
        $(frameElement).remove();
        (frameElement.openWindow || window).location = url;
</script>




<iframe id="main">
    <button onclick="parent.dialog()">打开</button>

<!-- 打开窗口时 -->
<iframe id="Dialog1">
    <button onclick="parent.dialogClose(frameElement, 'other.html')">关闭并重定向 #main 的地址</button>
```

一些需要说明的实际情况

-   窗口是指顶级页面的`window`和`iframe`中的`window`. 窗口下是指`window.document`和下面的所有DOM元素.
-   在`#main`中`parent.dialog()`实际是自动探测或指定在哪个父级打开窗口.
    -   在`Dialog1`中`parent.dialogClose`实际是哪个窗口打开就重定向那个窗口, 或者指定重定向哪个窗口.
-   `<iframe id="Dialog1">` 是按照实际打开的情况自动分配的id, 这里使用固定的id方便说明.


上述代码运行后的结果没有产生重定向, 加了`try catch`后:

    An error occurred throwing an exception

出错行在 `(frameElement.openWindow || window).location = url;`.

<!-- more -->

怀疑可能是不能识别默认属性, 换成`location.href`试试

    "Component returned failure code: 0x804b000a (NS_ERROR_MALFORMED_URI) [nsIDOMLocation.href]"

在[MDN window.location](https://developer.mozilla.org/en-US/docs/DOM/window.location#Methods)发现有`assign`和`replace`也可以用来重定向

`assign`正常执行了, 但是`replace`

    "Component returned failure code: 0x804b000a (NS_ERROR_MALFORMED_URI) [nsIDOMLocation.replace]"

想到可能和上下文有关吧, 试试用目标`window.setTimeout`, 传入字符串参数, 执行正常了.

``` js
    (frameElement.openWindow || window).setTimeout('location="' + url + '"', 0)
```

上述所有尝试的代码示例:

<iframe style="width: 100%; height: 510px" src="http://jsfiddle.net/sLDmC/69/embedded/js,resources,html,css,result/light/"></iframe>

-   所有`iframe`加载的页面都在这一个里面, 根据不同的Url Query执行不同的代码.
-   `openWindow.`表示重定向的是按钮所在窗口.
-   水平分割线下面的是重定向当前窗口.
-   蓝线以下是一些输出的信息, 以及发生异常时的异常信息.
-   重定向成功会显示一个红色背景的成功, 发生异常会在日志中显示出来.
-   重定向成功后, **Result**标签页右边有个**Run again**可以恢复开始状态.


另一方面
--------

虽然问题算是解决了, 但是为什么在哪种情况会发生异常, 仅在Firefox下. 还有没有其它可以回避这个异常的方式.

想想上面代码有些怪怪的就是, 先从DOM树中移除了`iframe`, 如果想办法调整一下移除和重定向的顺序, 就有了下面的示例:

<iframe style="width: 100%; height: 510px" src="http://jsfiddle.net/sLDmC/68/embedded/js,resources,html,css,result/light/"></iframe>

可以看到所有的重定向都成功了.


总结
----

-   尽量避免使用`iframe`.
-   尽量使用一种方式进行跨`iframe`间的调用, 比如setTimeout方式.
    -   调用参数尽量用基本类型, 比如字符串, 数字, 复杂的可以用JSON格式字符串.
-   尽量规避从DOM树移除当前`iframe`后还需要执行代码的情况.
    -   实在无法规避就需要十分注意前后的执行顺序.

当然如果和我一样是维护原有项目, 有很多地方不能随便修改, 遇到麻烦就只能大量摸索了. 比如上文中的尝试.


附:使用location的assign()和replace()的注意点
--------------------------------------------

在`iframe`中`location.assign()`必须确保当前`iframe`已加载一个页面, 不然会发生错误

    "Component returned failure code: 0x804b000a (NS_ERROR_MALFORMED_URI) [nsIDOMLocation.assign]"

对于已加载页面的则正常, 例子:

<iframe style="width: 100%; height: 370px" src="http://jsfiddle.net/gQvmx/13/embedded/js,resources,html,css,result/light/"></iframe>


      <p><a href="http://netwjx.github.com/blog/2012/10/01/set-location-is-invalid-in-firefox/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量删除Catch.com笔记的小工具]]></title>
    
      <category term="Bookmarklet" />
    
      <category term="Javascript" />
    
    <link href="http://netwjx.github.com/blog/2012/07/29/batch-delete-catch-notes-bookmarklet/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-29T18:12:00+08:00</published>
    <updated>2012-07-29T18:12:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/29/batch-delete-catch-notes-bookmarklet</id>
    <content type="html"><![CDATA[<h2>变更日志</h2>

<ul>
<li>2012-09-01 <strong>Catch.com新版本已经可以批量删除了, 不再需要这个工具了</strong></li>
<li>2012-08-11 Catch.com的代码有变, 修改了一下中间的CSS选择器</li>
</ul>


<hr />

<p>目前手机上使用<a href="https://catch.com/">Catch</a>来记录和收集手机上看到的各种信息, 在电脑上查看之后会删除, 但是奇怪的是<a href="https://catch.com/">Catch.com</a>网站的<strong>My Ideas</strong>不显示删除按钮, 而别的都会显示, 但是在手机上收集的信息默认不选择的时候都会保存到<strong>My Ideas</strong>分类里面, 所以就有了下面这个工具.</p>

<p><a href="javascript:(function(d, l) {if (!/https:\/\/catch\.com\/m/.test(l.href)) {alert(&#39;only in https://catch.com/m/ is work !&#39;);return;}var notes = d.querySelectorAll(&#39;[class$=-notelist] div[id&#94;=full-]&#39;);for (var i = 0; i < notes.length; i++) {var chk = notes[i].querySelector(&#39;input[type=checkbox]&#39;);if (chk.checked) {notes[i].querySelector(&#39;input[value=delete]&#39;).click();}}}(document, location));">Catch.com批量删除当前选中的笔记</a></p>

<p>这是一个Bookmarklet, 使用方式是在上面这个链接上鼠标右键</p>

<ul>
<li>IE <strong>添加到收藏夹</strong>, 使用了querySelector, 所以需要IE8及更高版本才支持.</li>
<li>Firefox <strong>将此链接加为书签</strong></li>
<li>Chrome 按<strong>Ctrl + Shift + B</strong>显示书签栏后把链接拖到书签栏上</li>
</ul>


<p>然后访问<a href="https://catch.com/">Catch.com</a>, 登录后点<strong>My Ideas</strong>, 先找个笔记点删除, 默认会弹出确认删除, 选中<strong>Do not show me this message again</strong> -> <strong>Delete</strong>.</p>

<p>然后依次选中想删除的笔记, 在收藏夹(IE)/书签菜单(Firefox)/书签栏(Chrome)中点刚刚保存的书签, 就可以看到笔记被一个个的删除.</p>

<!-- more -->


<p>上述Bookmarklet的源码是</p>

<p>``` js bookmarklet.js Catch.com批量删除当前选中的笔记
(function(d, l) {</p>

<pre><code>if (!/https:\/\/catch\.com\/m/.test(l.href)) {
    alert('only in https://catch.com/m/ is work !');
    return;
}
var notes = d.querySelectorAll('div[class$=-notelist] div[id^=full-]');
for (var i = 0; i &lt; notes.length; i++) {
    var chk = notes[i].querySelector('input[type=checkbox]');
    if (chk.checked) {
        notes[i].querySelector('input[value=delete]').click();
    }
}
</code></pre>

<p>}(document, location));
```</p>

<p>这里有一篇关于Bookmarklet和编写的资料, <a href="http://www.ruanyifeng.com/blog/2011/06/a_guide_for_writing_bookmarklet.html">Bookmarklet编写指南</a>.</p>

<p>一个简单的在线Bookmarklet编写网页, <a href="http://ted.mielczarek.org/code/mozilla/bookmarklet.html">Bookmarklet Crunchinator</a>.</p>

      <p><a href="http://netwjx.github.com/blog/2012/07/29/batch-delete-catch-notes-bookmarklet/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode转义(\uXXXX)的编码和解码]]></title>
    
      <category term="CSharp" />
    
      <category term="Decode" />
    
      <category term="Encode" />
    
      <category term="Java" />
    
      <category term="Javascript" />
    
      <category term="RegExp" />
    
    <link href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-07T12:23:00+08:00</published>
    <updated>2012-07-07T12:23:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string</id>
    <content type="html"><![CDATA[<p>在涉及Web前端开发时, 有时会遇到<code>\uXXXX</code>格式表示的字符, 其中<code>XXXX</code>是16进制数字的字符串表示形式, 在js中这个叫Unicode转义字符, 和<code>\n</code> <code>\r</code>同属于转义字符. 在其他语言中也有类似的, 可能还有其它变形的格式.</p>

<p>多数时候遇到需要解码的情况多点, 所以会先介绍解码decode, 后介绍编码encode.</p>

<p>下文会提供Javascript C# Java三种语言下不同方法的实现和简单说明, 会涉及到正则和位运算的典型用法.</p>

<!-- more -->


<h2>Javascript的实现</h2>

<h3>解码的实现</h3>

<p>``` js
function decode(s) {</p>

<pre><code>return unescape(s.replace(/\\(u[0-9a-fA-F]{4})/gm, '%$1'));
</code></pre>

<p>}
```</p>

<p><code>unescape</code>是用来处理<code>%uXXXX</code>这样格式的字符串, 将<code>\uXXXX</code>替换成<code>%uXXXX</code>后<code>unescape</code>就可以处理了.</p>

<h3>编码的实现</h3>

<p>``` js
function encode1(s) {</p>

<pre><code>return escape(s).replace(/%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm, function($0, $1, $2) {
    return $1 &amp;&amp; '\\' + $1.toLowerCase() || unescape($2);
});
</code></pre>

<p>}
```</p>

<p>和解码中相对应, 使用<code>escape</code>编码, 然后将<code>%uXXXX</code>替换为<code>\uXXXX</code>, 因为<code>escape</code>还可能把一些字符编码成<code>%XX</code>的格式, 所以这些字符还需要使用<code>unescape</code>还原回来.</p>

<p><code>escape</code>编码结果<code>%uXXXX</code>中的<code>XXXX</code>是大写的, 所以后面的<code>replace</code>只处理大写的<code>A-F</code>.</p>

<h3>另一种编码的实现</h3>

<p>不使用正则和<code>escape</code></p>

<p>``` js
function encode2(s) {</p>

<pre><code>var i, c, ret = [],
    pad = '000';
for (i = 0; i &lt; s.length; i++) {
    c = s.charCodeAt(i);
    if (c &gt; 256) {
        c = c.toString(16);
        ret[i] = '\\u' + pad.substr(0, 4 - c.length) + c;
    } else {
        ret[i] = s[i];
    }
}
return ret.join('');
</code></pre>

<p>}
```</p>

<p>遍历字符串中的字符, 那些<code>charCode</code>大于256的会转换成16进制字符串<code>c.toString(16)</code>, 如果不足4位则左边补0<code>pad.substr(0, 4 - c.length)</code>. 结尾将遍历的结果合并成字符串返回.</p>

<h2>C#的实现</h2>

<h3>解码的实现</h3>

<p>``` csharp
static Regex reUnicode = new Regex(@"\u([0-9a-fA-F]{4})", RegexOptions.Compiled);</p>

<p>public static string Decode(string s)
{</p>

<pre><code>return reUnicode.Replace(s, m =&gt;
{
    short c;
    if (short.TryParse(m.Groups[1].Value, System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture, out c))
    {
        return "" + (char)c;
    }
    return m.Value;
});
</code></pre>

<p>}
```</p>

<p>正则和js中的一样, 将<code>XXXX</code>转换以16进制<code>System.Globalization.NumberStyles.HexNumber</code>解析为<code>short</code>类型, 然后直接<code>(char)c</code>就能转换成对应的字符, <code>"" + (char)c</code>用于转换成字符串类型返回.</p>

<p>由于正则中也有<code>\uXXXX</code>, 所以需要写成<code>\\uXXXX</code>来表示匹配字符串<code>\uXXXX</code>, 而不是具体的字符.</p>

<p>上面使用到了Lambda, 需要至少dotnet 4的SDK才能编译通过, 可以在dotnet 2下运行.</p>

<h3>编码的实现</h3>

<p>``` csharp
static Regex reUnicodeChar = new Regex(@"[<sup>\u0000-\u00ff]",</sup> RegexOptions.Compiled);</p>

<p>public static string Encode(string s)
{</p>

<pre><code>return reUnicodeChar.Replace(s, m =&gt; string.Format(@"\u{0:x4}", (short)m.Value[0]));
</code></pre>

<p>}
```</p>

<p>和C#的解码实现正好相反, 0-255之外的字符, 从<code>char</code>转换成<code>short</code>, 然后<code>string.Format</code>以16进制, 至少输出4位.</p>

<h2>Java的实现</h2>

<h3>解码的实现</h3>

<p>和C#相似的, 使用正则</p>

<p>``` java
static final Pattern reUnicode = Pattern.compile("\\u([0-9a-zA-Z]{4})");</p>

<p>public static String decode1(String s) {</p>

<pre><code>Matcher m = reUnicode.matcher(s);
StringBuffer sb = new StringBuffer(s.length());
while (m.find()) {
    m.appendReplacement(sb,
            Character.toString((char) Integer.parseInt(m.group(1), 16)));
}
m.appendTail(sb);
return sb.toString();
</code></pre>

<p>}
```</p>

<p>Java语言没有内嵌正则语法, 也没有类似C#的<code>@"\u1234"</code>原始形式字符串的语法, 所以要表示正则中匹配<code>\</code>, 就需要<code>\\\\</code>, 其中2个是用于Java中字符转义, 2个是正则中的字符转义.</p>

<p>Java语言中没有设计函数或者委托的语法, 所以它的正则库提供的是<code>find</code> <code>appendReplacement</code> <code>appendTail</code>这些方法的组合, 等价于js和C#中的<code>replace</code>.</p>

<p>这里使用<code>StringBuffer</code>类型是由于<code>appendReplacement</code>只接受这个类型, <code>StringBuffer</code>有线程安全的额外操作, 所以性能差一点. 也许第三方的正则库能把API设计的更好用点.</p>

<p><code>Integer.parseInt(m.group(1), 16)</code>用于解析为<code>int</code>类型, 之后再<code>(char)</code>, 以及<code>Character.toString</code>转换成字符串.</p>

<h3>解码的另一种实现</h3>

<p>因为<code>StringBuffer</code>的原因, 不使用正则的实现</p>

<p>``` java
public static String decode2(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length());
char[] chars = s.toCharArray();
for (int i = 0; i &lt; chars.length; i++) {
    char c = chars[i];
    if (c == '\\' &amp;&amp; chars[i + 1] == 'u') {
        char cc = 0;
        for (int j = 0; j &lt; 4; j++) {
            char ch = Character.toLowerCase(chars[i + 2 + j]);
            if ('0' &lt;= ch &amp;&amp; ch &lt;= '9' || 'a' &lt;= ch &amp;&amp; ch &lt;= 'f') {
                cc |= (Character.digit(ch, 16) &lt;&lt; (3 - j) * 4);
            } else {
                cc = 0;
                break;
            }
        }
        if (cc &gt; 0) {
            i += 5;
            sb.append(cc);
            continue;
        }
    }
    sb.append(c);
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>手工做就是麻烦很多, 代码中也一坨的符号.</p>

<p>遍历所有字符<code>chars</code>, 检测到<code>\u</code>这样的字符串, 检测后续的4个字符是否是16进制数字的字符表示. 因为<code>Character.isDigit</code>会把一些其它语系的数字也算进来, 所以保险的做法<code>'0' &lt;= ch &amp;&amp; ch &lt;= '9'</code>.</p>

<p><code>Character.digit</code>会把<code>0-9</code>返回为<code>int</code>类型的0-9, 第2个参数是16时会把<code>a-f</code>返回为<code>int</code>类型的10-15.</p>

<p>剩下的就是用<code>|=</code>把各个部分的数字合并到一起, 转换成char类型. 还有一些调整遍历位置等.</p>

<h3>编码的实现</h3>

<p>考虑到Java正则的杯具, 还是继续手工来吧, 相对解码来说代码少点.</p>

<p>``` java
public static String encode(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length() * 3);
for (char c : s.toCharArray()) {
    if (c &lt; 256) {
        sb.append(c);
    } else {
        sb.append("\\u");
        sb.append(Character.forDigit((c &gt;&gt;&gt; 12) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 8) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 4) &amp; 0xf, 16));
        sb.append(Character.forDigit((c) &amp; 0xf, 16));
    }
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>对应于上文Java编码的实现正好是反向的实现, 依旧遍历字符, 遇到大于256的字符, 用位运算提取出4部分并使用<code>Character.forDigit</code>转换成16进制数对应的字符.</p>

<p>剩下就是<code>sb.toString()</code>返回了.</p>

<h2>总结</h2>

<ul>
<li>编码从逻辑上比解码简单点.</li>
<li>对付字符串, js还是最顺手的, 也方便测试.</li>
<li>位运算的性能很高.</li>
<li>Java的正则库设计的很不方便, 可以考虑第三方.</li>
<li>Java的语法设计现在看来呆板, 落后, 也没有js那种灵活.</li>
<li>上文Java的非正则实现可以写成等价的C#代码.</li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在jQuery中发生'Object' 未定义]]></title>
    
      <category term="Error" />
    
      <category term="IE" />
    
      <category term="Javascript" />
    
      <category term="jQuery" />
    
    <link href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-15T13:09:00+08:00</published>
    <updated>2012-04-15T13:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery</id>
    <content type="html"><![CDATA[<p>之前发现一个比较奇怪的现象, 一个很典型的页面, 总是在打开时会在jQuery中的一个位置发生 <code>'Object' 未定义</code> 的错误, 并且只在首次打开, 编译需要时间, 加载也比平时慢点的情况下.</p>

<p>在不使用jQuery的页面也发生类似现象, 错误可能是window未定义, document未定义之类的.</p>

<p>仅ie9下有这个现象, 忽略这个错误后仍能正常打开页面, 没有任何功能有问题.</p>

<!--more -->


<p>记得以前遇到过类似的现象, 这次仔细找了下发现了这个:</p>

<p><a href="http://stackoverflow.com/questions/8389261/ie9-throws-exceptions-when-loading-scripts-in-iframe-why">IE9 throws exceptions when loading scripts in iframe. Why?</a></p>

<p>以及msdn的 <a href="http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4">APIs Are Not Available if iFrame Is Removed from DOM Tree</a></p>

<p>简单的说是在包含iframe的页面中, 如果这个iframe被移除后, 其内部的Javascript和DOM API都会无法被调用.</p>

<p>上述<strong>特性</strong>在ie9标准下有效, 往后更新的版本应该也是如此.</p>

<p>上面只是根本原因, 实际会有一些比较复杂的表现方式, 比如在jQuery中类似 <code>$('#id').appendTo('#foo')</code> 的代码将会先从DOM树中移除, 然后再添加进去, 这将会诱发上述现象.</p>

<p>其它的比如jQuery EasyUI的Layout, 它的实现方式会修改DOM结构, 这将会移除和重新创建包含iframe的元素.</p>

<h2>处理办法</h2>

<p>简单的可以是避免在IE9标准模式渲染.</p>

<p>麻烦点的就是先不设置iframe的src, 等移除iframe操作完成后再设置, 一般可以考虑在window.onload时做这个操作.</p>

<p>可以利用setTimeout让一些操作在事件触发完毕后再执行, 关于setTimeout的特性可以参考<a href="http://ejohn.org/blog/how-javascript-timers-work/">How JavaScript Timers Work</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
