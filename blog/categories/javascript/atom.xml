<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: Javascript | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-07-23T21:28:55+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Unicode转义(\uXXXX)的编码和解码]]></title>
    
      <category term="CSharp" />
    
      <category term="Decode" />
    
      <category term="Encode" />
    
      <category term="Java" />
    
      <category term="Javascript" />
    
      <category term="RegExp" />
    
    <link href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-07T12:23:00+08:00</published>
    <updated>2012-07-07T12:23:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string</id>
    <content type="html"><![CDATA[<p>在涉及Web前端开发时, 有时会遇到<code>\uXXXX</code>格式表示的字符, 其中<code>XXXX</code>是16进制数字的字符串表示形式, 在js中这个叫Unicode转义字符, 和<code>\n</code> <code>\r</code>同属于转义字符. 在其他语言中也有类似的, 可能还有其它变形的格式.</p>

<p>多数时候遇到需要解码的情况多点, 所以会先介绍解码decode, 后介绍编码encode.</p>

<p>下文会提供Javascript C# Java三种语言下不同方法的实现和简单说明, 会涉及到正则和位运算的典型用法.</p>

<!-- more -->


<h2>Javascript的实现</h2>

<h3>解码的实现</h3>

<p>``` js
function decode(s) {</p>

<pre><code>return unescape(s.replace(/\\(u[0-9a-fA-F]{4})/gm, '%$1'));
</code></pre>

<p>}
```</p>

<p><code>unescape</code>是用来处理<code>%uXXXX</code>这样格式的字符串, 将<code>\uXXXX</code>替换成<code>%uXXXX</code>后<code>unescape</code>就可以处理了.</p>

<h3>编码的实现</h3>

<p>``` js
function encode1(s) {</p>

<pre><code>return escape(s).replace(/%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm, function($0, $1, $2) {
    return $1 &amp;&amp; '\\' + $1.toLowerCase() || unescape($2);
});
</code></pre>

<p>}
```</p>

<p>和解码中相对应, 使用<code>escape</code>编码, 然后将<code>%uXXXX</code>替换为<code>\uXXXX</code>, 因为<code>escape</code>还可能把一些字符编码成<code>%XX</code>的格式, 所以这些字符还需要使用<code>unescape</code>还原回来.</p>

<p><code>escape</code>编码结果<code>%uXXXX</code>中的<code>XXXX</code>是大写的, 所以后面的<code>replace</code>只处理大写的<code>A-F</code>.</p>

<h3>另一种编码的实现</h3>

<p>不使用正则和<code>escape</code></p>

<p>``` js
function encode2(s) {</p>

<pre><code>var i, c, ret = [],
    pad = '000';
for (i = 0; i &lt; s.length; i++) {
    c = s.charCodeAt(i);
    if (c &gt; 256) {
        c = c.toString(16);
        ret[i] = '\\u' + pad.substr(0, 4 - c.length) + c;
    } else {
        ret[i] = s[i];
    }
}
return ret.join('');
</code></pre>

<p>}
```</p>

<p>遍历字符串中的字符, 那些<code>charCode</code>大于256的会转换成16进制字符串<code>c.toString(16)</code>, 如果不足4位则左边补0<code>pad.substr(0, 4 - c.length)</code>. 结尾将遍历的结果合并成字符串返回.</p>

<h2>C#的实现</h2>

<h3>解码的实现</h3>

<p>``` csharp
static Regex reUnicode = new Regex(@"\u([0-9a-fA-F]{4})", RegexOptions.Compiled);</p>

<p>public static string Decode(string s)
{</p>

<pre><code>return reUnicode.Replace(s, m =&gt;
{
    short c;
    if (short.TryParse(m.Groups[1].Value, System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture, out c))
    {
        return "" + (char)c;
    }
    return m.Value;
});
</code></pre>

<p>}
```</p>

<p>正则和js中的一样, 将<code>XXXX</code>转换以16进制<code>System.Globalization.NumberStyles.HexNumber</code>解析为<code>short</code>类型, 然后直接<code>(char)c</code>就能转换成对应的字符, <code>"" + (char)c</code>用于转换成字符串类型返回.</p>

<p>由于正则中也有<code>\uXXXX</code>, 所以需要写成<code>\\uXXXX</code>来表示匹配字符串<code>\uXXXX</code>, 而不是具体的字符.</p>

<p>上面使用到了Lambda, 需要至少dotnet 4的SDK才能编译通过, 可以在dotnet 2下运行.</p>

<h3>编码的实现</h3>

<p>``` csharp
static Regex reUnicodeChar = new Regex(@"[<sup>\u0000-\u00ff]",</sup> RegexOptions.Compiled);</p>

<p>public static string Encode(string s)
{</p>

<pre><code>return reUnicodeChar.Replace(s, m =&gt; string.Format(@"\u{0:x4}", (short)m.Value[0]));
</code></pre>

<p>}
```</p>

<p>和C#的解码实现正好相反, 0-255之外的字符, 从<code>char</code>转换成<code>short</code>, 然后<code>string.Format</code>以16进制, 至少输出4位.</p>

<h2>Java的实现</h2>

<h3>解码的实现</h3>

<p>和C#相似的, 使用正则</p>

<p>``` java
static final Pattern reUnicode = Pattern.compile("\\u([0-9a-zA-Z]{4})");</p>

<p>public static String decode1(String s) {</p>

<pre><code>Matcher m = reUnicode.matcher(s);
StringBuffer sb = new StringBuffer(s.length());
while (m.find()) {
    m.appendReplacement(sb,
            Character.toString((char) Integer.parseInt(m.group(1), 16)));
}
m.appendTail(sb);
return sb.toString();
</code></pre>

<p>}
```</p>

<p>Java语言没有内嵌正则语法, 也没有类似C#的<code>@"\u1234"</code>原始形式字符串的语法, 所以要表示正则中匹配<code>\</code>, 就需要<code>\\\\</code>, 其中2个是用于Java中字符转义, 2个是正则中的字符转义.</p>

<p>Java语言中没有设计函数或者委托的语法, 所以它的正则库提供的是<code>find</code> <code>appendReplacement</code> <code>appendTail</code>这些方法的组合, 等价于js和C#中的<code>replace</code>.</p>

<p>这里使用<code>StringBuffer</code>类型是由于<code>appendReplacement</code>只接受这个类型, <code>StringBuffer</code>有线程安全的额外操作, 所以性能差一点. 也许第三方的正则库能把API设计的更好用点.</p>

<p><code>Integer.parseInt(m.group(1), 16)</code>用于解析为<code>int</code>类型, 之后再<code>(char)</code>, 以及<code>Character.toString</code>转换成字符串.</p>

<h3>解码的另一种实现</h3>

<p>因为<code>StringBuffer</code>的原因, 不使用正则的实现</p>

<p>``` java
public static String decode2(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length());
char[] chars = s.toCharArray();
for (int i = 0; i &lt; chars.length; i++) {
    char c = chars[i];
    if (c == '\\' &amp;&amp; chars[i + 1] == 'u') {
        char cc = 0;
        for (int j = 0; j &lt; 4; j++) {
            char ch = Character.toLowerCase(chars[i + 2 + j]);
            if ('0' &lt;= ch &amp;&amp; ch &lt;= '9' || 'a' &lt;= ch &amp;&amp; ch &lt;= 'f') {
                cc |= (Character.digit(ch, 16) &lt;&lt; (3 - j) * 4);
            } else {
                cc = 0;
                break;
            }
        }
        if (cc &gt; 0) {
            i += 5;
            sb.append(cc);
            continue;
        }
    }
    sb.append(c);
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>手工做就是麻烦很多, 代码中也一坨的符号.</p>

<p>遍历所有字符<code>chars</code>, 检测到<code>\u</code>这样的字符串, 检测后续的4个字符是否是16进制数字的字符表示. 因为<code>Character.isDigit</code>会把一些其它语系的数字也算进来, 所以保险的做法<code>'0' &lt;= ch &amp;&amp; ch &lt;= '9'</code>.</p>

<p><code>Character.digit</code>会把<code>0-9</code>返回为<code>int</code>类型的0-9, 第2个参数是16时会把<code>a-f</code>返回为<code>int</code>类型的10-15.</p>

<p>剩下的就是用<code>|=</code>把各个部分的数字合并到一起, 转换成char类型. 还有一些调整遍历位置等.</p>

<h3>编码的实现</h3>

<p>考虑到Java正则的杯具, 还是继续手工来吧, 相对解码来说代码少点.</p>

<p>``` java
public static String encode(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length() * 3);
for (char c : s.toCharArray()) {
    if (c &lt; 256) {
        sb.append(c);
    } else {
        sb.append("\\u");
        sb.append(Character.forDigit((c &gt;&gt;&gt; 12) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 8) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 4) &amp; 0xf, 16));
        sb.append(Character.forDigit((c) &amp; 0xf, 16));
    }
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>对应于上文Java编码的实现正好是反向的实现, 依旧遍历字符, 遇到大于256的字符, 用位运算提取出4部分并使用<code>Character.forDigit</code>转换成16进制数对应的字符.</p>

<p>剩下就是<code>sb.toString()</code>返回了.</p>

<h2>总结</h2>

<ul>
<li>编码从逻辑上比解码简单点.</li>
<li>对付字符串, js还是最顺手的, 也方便测试.</li>
<li>位运算的性能很高.</li>
<li>Java的正则库设计的很不方便, 可以考虑第三方.</li>
<li>Java的语法设计现在看来呆板, 落后, 也没有js那种灵活.</li>
<li>上文Java的非正则实现可以写成等价的C#代码.</li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在jQuery中发生'Object' 未定义]]></title>
    
      <category term="Error" />
    
      <category term="IE" />
    
      <category term="Javascript" />
    
      <category term="jQuery" />
    
    <link href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-15T13:09:00+08:00</published>
    <updated>2012-04-15T13:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery</id>
    <content type="html"><![CDATA[<p>之前发现一个比较奇怪的现象, 一个很典型的页面, 总是在打开时会在jQuery中的一个位置发生 <code>'Object' 未定义</code> 的错误, 并且只在首次打开, 编译需要时间, 加载也比平时慢点的情况下.</p>

<p>在不使用jQuery的页面也发生类似现象, 错误可能是window未定义, document未定义之类的.</p>

<p>仅ie9下有这个现象, 忽略这个错误后仍能正常打开页面, 没有任何功能有问题.</p>

<!--more -->


<p>记得以前遇到过类似的现象, 这次仔细找了下发现了这个:</p>

<p><a href="http://stackoverflow.com/questions/8389261/ie9-throws-exceptions-when-loading-scripts-in-iframe-why">IE9 throws exceptions when loading scripts in iframe. Why?</a></p>

<p>以及msdn的 <a href="http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4">APIs Are Not Available if iFrame Is Removed from DOM Tree</a></p>

<p>简单的说是在包含iframe的页面中, 如果这个iframe被移除后, 其内部的Javascript和DOM API都会无法被调用.</p>

<p>上述<strong>特性</strong>在ie9标准下有效, 往后更新的版本应该也是如此.</p>

<p>上面只是根本原因, 实际会有一些比较复杂的表现方式, 比如在jQuery中类似 <code>$('#id').appendTo('#foo')</code> 的代码将会先从DOM树中移除, 然后再添加进去, 这将会诱发上述现象.</p>

<p>其它的比如jQuery EasyUI的Layout, 它的实现方式会修改DOM结构, 这将会移除和重新创建包含iframe的元素.</p>

<h2>处理办法</h2>

<p>简单的可以是避免在IE9标准模式渲染.</p>

<p>麻烦点的就是先不设置iframe的src, 等移除iframe操作完成后再设置, 一般可以考虑在window.onload时做这个操作.</p>

<p>可以利用setTimeout让一些操作在事件触发完毕后再执行, 关于setTimeout的特性可以参考<a href="http://ejohn.org/blog/how-javascript-timers-work/">How JavaScript Timers Work</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
