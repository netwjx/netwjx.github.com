<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: Memo | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-12-05T22:23:08+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[函数的Currying (Javascript 和 Scala)]]></title>
    
      <category term="Javascript" />
    
      <category term="Memo" />
    
      <category term="Scala" />
    
    <link href="http://netwjx.github.com/blog/2012/12/05/function-currying-in-javascript-and-scala/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-12-05T13:52:00+08:00</published>
    <updated>2012-12-05T13:52:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/12/05/function-currying-in-javascript-and-scala</id>
    <content type="html"><![CDATA[<p>Currying或者Curry, 中文有翻译成<a href="http://book.51cto.com/art/200806/77578.htm">科里化</a>. 我最早了解它是在一篇讲<a href="http://www.ibm.com/developerworks/cn/java/j-pg08235/">Groovy中函数式编程</a>的文章中, 之后又在<a href="http://www.python.org/">Python</a>中<a href="http://code.activestate.com/recipes/52549/">遇到同样的东西</a>. 最近在看<a href="http://www.scala-lang.org/">Scala</a>的介绍时<a href="http://www.scala-lang.org/node/135">又看到了</a>, 而且发现<a href="http://www.scala-lang.org/">Scala</a>设计的明显更好, 然后就成了这篇文章, 使用Javascript作为主要语言是因为我使用Javascript的时间更长, 并且Javascript这门语言的表达能力<a href="http://www.nafine.com/Work_View.php?id=271">奇强</a><sup>-<sup>{%</sup></sup> endraw %}.</p>

<p>Currying是<a href="http://www.ibm.com/developerworks/cn/java/j-cb12196/">函数式编程</a>中一种<a href="http://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">高阶函数</a>的典型应用, 如果非要把它对应到传统OO中的话, 那么它类似<a href="https://www.google.com/search?q=builder+pattern">Builder模式</a>, 一般译作构建器模式 建造者模式.</p>

<p>Builder模式可以简单理解为创建一个复杂的对象需要依赖多个参数, 要提供的参数又依赖于不同的方法, 使用Builder模式让每个方法只关注自己提供的参数, 最终根据全部参数创建出对象来. 对象实例最终是拿来调用的, 你可以把这个过程想象成调用一个参数很多的函数.</p>

<p>Javascript中完全可以按照传统OO的方式实现Builder模式, 但使用Currying更轻量级 简单, 考虑下面的代码:</p>

<p>``` js
function filter(list, func) {</p>

<pre><code>var ret = [];
for (var i = 0; i &lt; list.length; i++) {
    var v = list[i];
    if (func(v)) {
        ret.push(v);
    }
}
return ret;
</code></pre>

<p>}</p>

<p>function modN(n, x) {</p>

<pre><code>return x % n === 0;
</code></pre>

<p>}</p>

<p>var nums = [1, 2, 3, 4, 5, 6, 7, 8];</p>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>return modN(2, x);
</code></pre>

<p>}));</p>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>return modN(3, x);
</code></pre>

<p>}));
```</p>

<!-- more -->


<p>执行输出</p>

<p><code>
2,4,6,8
3,6
</code></p>

<p>modN函数有2个参数, 示例中可以同时提供所有的参数, 当然这是相当理想的情况. 实际可能不同的参数在不同的阶段提供:</p>

<p>``` js
var p = [2];  // 提供相关参数
console.log(filter(nums, function(x) {</p>

<pre><code>p[1] = x;
return modN.apply(this, p);
</code></pre>

<p>}));</p>

<p>p[0] = 3;  // 提供相关参数
console.log(filter(nums, function(x) {</p>

<pre><code>p[1] = x
return modN.apply(this, p);
</code></pre>

<p>}));
```</p>

<p>这种方式需要有一个变量用来保存参数, 而如果使用Currying可以这样:</p>

<p><code>js
console.log(filter(nums, modN.curry(2)));
console.log(filter(nums, modN.curry(3)));
</code></p>

<p>根据需要可以<code>curry()</code>多个参数或<code>curry()</code>多次. 上文中使用的<code>curry</code>函数的实现:</p>

<p>``` js
Function.prototype.curry = function() {</p>

<pre><code>var func = this,
    p = Array.prototype.slice.call(arguments, 0);
return function() {
    return func.apply(this, p.concat.apply(p, arguments));
};
</code></pre>

<p>};
```</p>

<p>这是最轻量级 最简单的实现方式, 深入挖掘Javascript语言的表达力应该还会出现更巧妙的设计.</p>

<h2>Currying的来由</h2>

<p>考虑体积计算公式<code>体积 = 长 x 宽 x 高</code>, 假设已知长为10, 那么这个公式就变成了<code>体积 = 10 x 宽 x 高</code>, 进一步已知宽为7, 那么公式就变为<code>体积 = 10 x 7 x 高</code>, 这种转换即Currying.</p>

<p>这是最通俗的描述, 比较正式的可以参考<a href="http://www.wikipedia.org/">维基百科</a>的<a href="http://en.wikipedia.org/wiki/Currying">Currying</a>词条.</p>

<h2>Scala语言中的Currying</h2>

<p>之所以要额外提<a href="http://www.scala-lang.org/">Scala</a>, 是因为它是原生支持Currying的语言, 相对比通过类库支持能提供更巧妙的语法, 参见下面的代码:</p>

<p>``` scala A Tour of Scala: Currying http://www.scala-lang.org/node/135 来源
object CurryTest extends Application {</p>

<p>  // 这种声明就是支持Currying的函数, 每个参数用 ( ) 分隔开
  def modN(n: Int)(x: Int) = ((x % n) == 0)</p>

<p>  // 参数p是有1个Int类型参数的函数, 返回Boolean类型
  def filter(xs: List[Int], p: Int => Boolean): List[Int] =</p>

<pre><code>if (xs.isEmpty) xs
else if (p(xs.head)) xs.head :: filter(xs.tail, p)
else filter(xs.tail, p)
</code></pre>

<p>  val nums = List(1, 2, 3, 4, 5, 6, 7, 8)</p>

<p>  // modN2引用的是包含1个Int类型参数, 并返回Boolean类型的函数, 结尾的下划线是Scala中的语法
  val modN2 = modN(2)_
  println(filter(nums, modN2))</p>

<p>  // 不需要赋值的就不需要结尾的下划线了
  println(filter(nums, modN(3)))
}
```</p>

<p>上述代码只是加了额外的注释, 调整了下顺序, 和来源中的代码等价.</p>

<p>最重要的, <a href="http://www.scala-lang.org/">Scala</a>是静态类型语言, 开发环境可以提供每次<code>Currying</code>之后的<strong>函数提示信息</strong>, 并能够做<strong>编译时检查</strong>, 而<a href="http://groovy.codehaus.org/">Groovy</a>, <a href="http://www.python.org/">Python</a>, Javascript只能依赖约定, 错误会在运行时发生, 必须有其它的措施确保同步修改关联的代码.</p>

<h2>偏函数 Partial function</h2>

<p>和Currying很像, 只是另外一种更灵活的语法, 可以不按照参数顺序提供参数, 比如Scala的示例代码:</p>

<p><code>scala
def add(i: Int, j: Int) = i + j
val add5 = add(_: Int, 5)
println(add5(2))
</code></p>

<p>参考[Wikipedia][]的<a href="http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application">Contrast with partial function application</a> 和 <a href="http://en.wikipedia.org/wiki/Partial_function">Partial function</a></p>

<h2>Javascript中更常见的传递大量参数的方式</h2>

<p>Javascript是动态语言, 开发环境无法提供太多提示信息, 上文提到的Currying更适合一些比较稳定的, 不经常变动的API.</p>

<p>实际项目中如果函数参数很多, 并且可能在不同的地方提供参数, 则会使用参数对象的方式:</p>

<p>``` js
function modN(opt) {</p>

<pre><code>opt.num = opt.num || 1;
opt.x = opt.x || 1;
return opt.x % opt.num === 0;
</code></pre>

<p>}</p>

<p>var opt2 = { num: 2 },</p>

<pre><code>opt3 = { num: 3 };
</code></pre>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>opt2.x = x;
return modN(opt2);
</code></pre>

<p>}));</p>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>opt3.x = x;
return modN(opt3);
</code></pre>

<p>}));
```</p>

<p>这个看起来和Builder模式十分相像, 参数都提供有默认值, <code>num</code>和<code>x</code>可以使用更有意义的名称以使阅读性更好一些, 但也付出了不少编码工作.</p>

<p>从<a href="http://www.mozilla.org/en-US/firefox/fx/#desktop">Firefox 2.0</a>开始支持<strong>解构赋值</strong><a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Destructuring_assignment_%28Merge_into_own_page.2Fsection%29">New in JavaScript 1.7: Destructuring assignment</a>, 这个特性可以让实现<code>modN</code>少了一些纠结:</p>

<p>``` js
function modN(opt) {</p>

<pre><code>var { num, x } = opt;
num = num || 1;
x = x || 1;
return x % num === 0;
</code></pre>

<p>}
```</p>

<p>原文中还有解构赋值的很多<a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Looping_across_values_in_an_array_of_objects">高级用法</a>, 但是到目前为之还没看到其它浏览器提供支持, 也没有进入ECMAScript标准, 只能在比如Firefox扩展开发时爽爽.</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.cnblogs.com/fox23/archive/2009/10/22/intro-to-Lambda-calculus-and-currying.html">Lambda演算与科里化(Currying)</a></li>
<li><a href="http://book.51cto.com/art/200806/77578.htm">《JavaScript王者归来》第二十二章 科里化（Currying）小节</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-pg08235/">实战 Groovy: 用 curry 过的闭包进行函数式编程</a></li>
<li><a href="http://code.activestate.com/recipes/52549/">curry -- associating parameters with a function (Python recipe)</a></li>
<li><a href="http://www.scala-lang.org/node/135">A Tour of Scala: Currying</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-cb12196/">跨越边界: JavaScript 语言特性</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">维基百科 高阶函数 词条</a></li>
<li><a href="http://en.wikipedia.org/wiki/Currying">维基百科 Currying 词条</a></li>
<li><a href="http://en.wikipedia.org/wiki/Partial_function">维基百科 Partial function 词条</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Destructuring_assignment_%28Merge_into_own_page.2Fsection%29">New in JavaScript 1.7 : Destructuring assignment 解构赋值</a></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/12/05/function-currying-in-javascript-and-scala/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox, Stack Overflow 和 Ruby on Rails 杂念]]></title>
    
      <category term="Book" />
    
      <category term="IT" />
    
      <category term="Memo" />
    
      <category term="Saas" />
    
    <link href="http://netwjx.github.com/blog/2012/11/24/dropbox-stack-overflow-and-ruby-on-rails/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-11-24T21:08:00+08:00</published>
    <updated>2012-11-24T21:08:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/11/24/dropbox-stack-overflow-and-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>它们有什么联系? 其实没什么特别的联系, 所以是杂念, 没什么头绪, 就是想到了, 我一个个说来.</p>

<h2>Dropbox的故事</h2>

<p><a href="http://dropbox.com/">Dropbox</a>是很出名的网盘服务, 也可以叫它云端存储服务, 它的客户端能够自动同步多个电脑间的文件夹, 当然这个功能在现在十分常见了, 只是在他出现之前, 多数网盘服务都是以Web形式为主的. 它给免费用户提供2G空间, 通过邀请其它用户可以扩容空间, 基本上后来的网盘都是这种套路. 额外还有根据订购的套餐按月付费.</p>

<p><a href="http://ycombinator.com/">Y Combinator</a>是一家很有意思的风险投资公司, 它只向最早期的创业团队投资. 而<a href="http://dropbox.com/">Dropbox</a>是它最成功的投资之一.</p>

<p>{% img right http://www.ruanyifeng.com/images/hnp_cover_b.jpg 318 Hackers and Painters %}</p>

<p><a href="http://ycombinator.com/">Y Combinator</a>的创始人是<a href="http://www.paulgraham.com/">Paul Grahm</a>, 被誉为<a href="http://www.programmer.com.cn/11408/">硅谷创业之父</a>, 他曾经从事过程序员的工作. <a href="http://www.ruanyifeng.com/blog/">阮一峰的网络日志</a> <a href="http://www.ruanyifeng.com/blog/2009/12/i_will_translate_paul_graham.html">我要翻译Paul Graham了</a>上面介绍的很不错, 引用首段:</p>

<p>{% blockquote 阮一峰 http://www.ruanyifeng.com/blog/2009/12/i_will_translate_paul_graham.html 我要翻译Paul Graham了 %}
下面，我就告诉你，我为什么那么想翻译Paul Graham。</p>

<p>他1964年出生于英国，在康奈尔大学读完本科，然后在哈佛大学获得计算机科学博士学位。1995年，他创办了Viaweb，帮助个人用户在网上开店，这是世界上第一个互联网应用程序。1998年夏天，Yahoo!公司收购了Viaweb，收购价约为5000万美元。</p>

<p>此后，他架起了个人网站paulgraham.com，在上面撰写了许许多多关于软件和创业的文章，以深刻的见解和清晰的表达而著称，迅速引起了轰动。2005年，他身体力行，创建了风险投资公司Y Combinator，将自己的理论转化为实践，目前已经资助了80多家创业公司。现在，他是公认的互联网创业权威。
{% endblockquote %}</p>

<!-- more -->


<p>这就引出了<a href="http://www.paulgraham.com/">Paul Grahm</a>写的书<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0596006624">Hackers and Painters: Big Ideas from the Computer Age</a>, 注意英文副标题, 可以直译为<strong>计算机时代的伟大想法</strong>. 这本书的中译版是<a href="http://www.ruanyifeng.com/docs/pg/">黑客与画家</a>, 译者是上面提到的<a href="http://www.ruanyifeng.com/blog/">阮一峰</a>.</p>

<p>这里有一个有趣的故事, <a href="http://www.syncoo.com/why-dropbox-is-more-popular-than-similar-tools.htm">为什么 Dropbox 比其它同类产品更受欢迎?</a> 有趣的在于其中回答这个问题的人中有<a href="http://dropbox.com/">Dropbox</a>的竞争产品 - <a href="http://www.syncplicity.com/">Syncplicity</a>的联合创始人, 其中不乏他的多年思考总结, 以及一些行业的内幕轶事.</p>

<p>这是<a href="http://dropbox.com/">Dropbox</a>的故事.</p>

<h2>Stack Overflow的故事</h2>

<p><a href="http://stackoverflow.com/">Stack Overflow</a>是一个免费的问答网站, 很类似国内的<a href="http://zhidao.baidu.com/">百度知道</a>, 不过它有浓郁的Geek和技术文化, <code>Stack Overflow</code>在程序中是堆栈溢出错误, 这是软件开发工作中一种很棘手, 很不容易处理的严重错误, <a href="http://stackoverflow.com/">Stack Overflow</a>还有相关的其它领域的一系列问答网站, 如体育, 各种外语, 电影电视, 个人理财等.</p>

<p>对我来说, 我日常工作中Google搜索问题时, 能在<a href="http://stackoverflow.com/">Stack Overflow</a>上得到十分有价值的答案, 甚至可以将工作分为<a href="http://heikezhi.com/2011/05/12/does-stackoverflow-make-us-lazy/">有Stack Overflow前和有了Stack Overflow之后</a>.</p>

<p><a href="http://stackoverflow.com/">Stack Overflow</a>属于<a href="http://stackexchange.com/">Stack Exchange</a>公司的产品, <a href="http://stackexchange.com/">Stack Exchange</a>下的一系列问答网站全都没有广告, 也没有向用户收费的服务, <a href="http://stackexchange.com/">Stack Exchange</a>也获得了风险投资, 不过这里要说的是在哪之前.</p>

<p><a href="http://www.joelonsoftware.com/">Joel Spolsky</a>是<a href="http://stackexchange.com/about/team">Stack Exchange的联合创始人</a>, 可以看到<a href="http://stackexchange.com/">Stack Exchange</a>团队很多人耍宝的GIF动画, <a href="http://www.joelonsoftware.com/">Joel Spolsky</a>同时也是<a href="http://www.fogcreek.com/">Fog Creek</a>的创始人, <a href="http://www.fogcreek.com/">Fog Creek</a>有一些不错的团队协作产品:</p>

<ul>
<li><a href="https://trello.com/">Trello</a>  在线协作工具, 在一个界面上组织多个项目, 实时沟通, 分派任务等.</li>
<li><a href="http://www.fogcreek.com/fogbugz/">FogBugz</a>  Bug跟踪工具, 在线申请立即开通, 可以和第三方工具和服务集成.</li>
<li><a href="http://www.fogcreek.com/kiln/">Kiln</a>  分布式版本控制系统(基于<a href="http://mercurial.selenic.com/">Mercurial</a>), 代码审查工具, 仍然是在线申请开通, 可以和FogBugz集成.</li>
<li><a href="https://www.copilot.com/">Copilot</a>  提供在线技术支持, 主要是修正电脑使用中的一些问题.</li>
</ul>


<p>除了<a href="https://trello.com/">Trello</a>是免费的外(无广告), 其它的都是免费试用 + 根据套餐按月付费, 提供基于Web和移动平台的客户端.</p>

<p>{% img right http://i260.photobucket.com/albums/ii7/ruanyf/blog/bg2009120201.jpg 318 软件随想录 %}</p>

<p><a href="http://www.joelonsoftware.com/">Joel Spolsky</a>的个人Blog名字叫<a href="http://www.joelonsoftware.com/">Joel on Software</a>, 他将自己Blog上的一些文章整理到一起, 出了本书叫<a href="http://www.amazon.com/More-Joel-Software-Occasionally-Developers/dp/1430209879">More Joel on Software</a>, 国内有出中文翻译<a href="http://www.ruanyifeng.com/mjos/">软件随想录</a>, 译者还是上文提到的<a href="http://www.ruanyifeng.com/blog/">阮一峰</a>, <a href="http://www.ruanyifeng.com/mjos/">点击这里</a>进去可以看到部分篇章, 里面讨论了软件开发中很多有趣的话题.</p>

<p>这里引用一段<a href="http://www.joelonsoftware.com/">Joel Spolsky</a>的介绍:</p>

<p>{% blockquote 阮一峰 http://www.ruanyifeng.com/blog/2008/10/i_will_translate_more_joel_on_software.html 我要翻译《Joel on Software》了！ %}
Joel Spolsky（乔尔•斯波尔斯基）是一个世界闻名的软件开发流程专家。</p>

<p>他的网站“Joel谈软件”在全世界程序员中非常流行，被译成了30多种语言。</p>

<p>作为纽约的Fog Creek Software公司的创始人，他开发了FogBugz软件，这是一个在软件开发团队中非常流行的项目管理系统。</p>

<p>Joel曾经在微软公司工作，是Excel开发团队的一员，他设计了VBA（Excel的宏语言）。他还曾在Juno Online Services公司工作，开发了几百万用户使用的互联网客户端。</p>

<p>他已经出版了三本书：User Interface Design for Programmers（《程序员之用户界面设计》，Apress, 2001），《Joel谈软件》（Joel on Software, Apress, 2004），以及Smart and Gets Things Done（《巧妙完成工作》，Apress, 2007）。</p>

<p>他还是The Best Software Writing I（《最佳软件文选（第一辑）》，Apress, 2005）的编辑。</p>

<p>Joel从耶鲁大学获得计算机科学本科学位。</p>

<p>他曾在以色列国防军（Israeli Defense Forces）中服伞兵役，并且是以色列哈纳顿集体农场（Kibbutz Hanaton）的共同创始人之一。
{% endblockquote %}</p>

<p>这是<a href="http://stackoverflow.com/">Stack Overflow</a>的故事.</p>

<h2>Ruby on Rails的故事</h2>

<p><a href="http://rubyonrails.org/">Ruby on Rails</a>是我在做Java工程师时接触到的, 感叹它巧妙的设计, 在当时给Java世界带来了巨大的震撼, 原来Web应用也可以这样开发! 时至今日, <a href="http://rubyonrails.org/">Ruby on Rails</a>依然是<a href="http://www.ruby-lang.org/en/">Ruby</a>社区中的明星项目.</p>

<p>在之后的多年中我还陆续接触过<a href="http://groovy.codehaus.org/">Groovy</a> <a href="http://www.djangoproject.com/">Django</a> <a href="http://www.web2py.com/">web2py</a> <a href="http://www.playframework.org/">Apache Play</a> <a href="http://www.asp.net/mvc">ASP.Net MVC</a>, 它们或多或少都能看到<a href="http://rubyonrails.org/">Ruby on Rails</a>的影子.</p>

<p>{% img right http://37signals.com/images/front-cover.png 318 REWORK: The new business book from 37signals. %}</p>

<p><a href="http://rubyonrails.org/">Ruby on Rails</a>的作者是<a href="http://david.heinemeierhansson.com/">David Heinemeier Hansson</a>, 以下是他自己的简介, 我简单翻译成中文:</p>

<p>{% blockquote David Heinemeier Hansson http://david.heinemeierhansson.com/ David Heinemeier Hansson %}
我是Ruby on Rails的作者, 37signals的合伙人, 纽约时报(NYT)畅销书作家, 公开演说家, 业余摄影师, 和赛车手.
{% endblockquote %}</p>

<p>这里畅销书指的是<a href="http://37signals.com/rework">Rework</a>, 除了<a href="http://www.nytimes.com/">纽约时报(NYT)</a>外还有<a href="http://wsj.com/">华尔街日报(WSJ)</a>和<a href="http://www.thesundaytimes.co.uk/">The Sunday Times</a>, 由<a href="http://37signals.com/svn/writers/jf">Jason Fried</a>和<a href="http://david.heinemeierhansson.com/">David Heinemeier Hansson</a>合著, 封面是个揉了的纸团, 豆瓣网有<a href="http://book.douban.com/subject/5320866/">Rework</a>的中文简介.</p>

<p>还有一本<a href="http://gettingreal.37signals.com/">Getting Real</a>, 副标题是: 小规模，更快速，更高质量的软件构建方法, 翻译引用自<a href="http://cnborn.net/docs/getting_real/index.html">CNBorn</a>. 这是一本更多讲软件开发, 非技术方面的东西.</p>

<p>上面这两本书都可以<strong>免费</strong>从作者网站上下载的, 但是它们的实体书同样销售的不错, 也确实, 这种书需要反复的来回看, 领悟.</p>

<p><a href="http://37signals.com/">37signals</a>这家公司同样很有意思, 他们有几个在线协作产品:</p>

<ul>
<li><a href="http://basecamp.com/">Basecamp</a>  项目管理工具, 跟踪项目的讨论, 相关文件, 事件.</li>
<li><a href="http://highrisehq.com/">Highrise</a>  简单的CRM系统, 保存整理便笺和Email会话, 跟踪客户反馈和交易, 在公司 部门 团队中共享信息.</li>
<li><a href="http://campfirenow.com/">Campfire</a>  实时沟通, 类似IM, 但是专门设计用于小组.</li>
</ul>


<p>这些产品都是基于Web, 以及提供移动平台客户端, 并根据套餐按月付费.</p>

<p>他们有与众不同的内部工作方式, <a href="http://www.aqee.net/jason-fried-why-i-run-a-flat-company/">为什么我要把公司做成扁平型</a>, 作者是<a href="http://37signals.com/">37signals</a>的创始人<a href="http://37signals.com/svn/writers/jf">Jason Fried</a>.</p>

<p>在<a href="http://37signals.com/about">关于</a>还可以看到<a href="http://en.wikipedia.org/wiki/Jeff_Bezos">Jeff Bezos</a>, 他是作为<a href="http://37signals.com/">37signals</a>的顾问, 当然他更出名的是作为<a href="http://www.amazon.com/">亚马逊 Amazon.com</a>的创始人和CEO.</p>

<p>这是<a href="http://rubyonrails.org/">Ruby on Rails</a>的故事.</p>

<h2>末尾</h2>

<p>上面提到的网站和产品多数是英文的, 还有受限于我国的网络问题而无法访问.</p>

<p>上面提及的书基本都不涉及技术细节, 都很适合IT从业者反复阅读, 而<a href="http://37signals.com/rework">Rework</a>更是适合各种人群阅读.</p>

<p>即使未来不打算从事创业, 但是也很有助于辨别优秀的创业者, 合作方, 投资目标, 抑或是改善自己的日常工作</p>

<p>我仍旧无法用概括性的文字来描述我为什么要写上面的文字, 暂且作为对一些有趣资料的介绍吧.</p>

      <p><a href="http://netwjx.github.com/blog/2012/11/24/dropbox-stack-overflow-and-ruby-on-rails/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[笔记本购买备忘]]></title>
    
      <category term="Memo" />
    
      <category term="Notebook" />
    
    <link href="http://netwjx.github.com/blog/2012/10/12/buy-notebook-memo/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-10-12T21:58:00+08:00</published>
    <updated>2012-10-12T21:58:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/10/12/buy-notebook-memo</id>
    <content type="html"><![CDATA[<p>很早就想过要对笔记本购买做个备忘, 方便自己也方便别人查阅, 前几天列了个大纲, 现在把具体的填完.</p>

<p>这不是针对特定品牌, 特定型号的备忘, 只是对购买笔记本中注意点的记录, 从软硬件, 到卖场交易等等.</p>

<h2>更新日志</h2>

<p>最近的修改在列表开始</p>

<ol>
<li>2012-10-16  增加验机篇章</li>
<li>2012-12-03  增加颜色, CPU规格链接</li>
</ol>


<h2>外观</h2>

<p>购买时需要首先确定一些重要的外观需求, 比如大小, 接口设计, 键盘.</p>

<h3>屏幕</h3>

<p>屏幕从整体上决定了后面要说的体积和重量, 所以放在最开始.</p>

<p>屏幕尺寸, 14英寸的为主, 15英寸的会有额外的小键盘区域, 13及更低的<strong>可能会没有光驱</strong>.</p>

<p>屏幕长宽比, 之前的都是4:3的, 现在的主要是16:9和16:10, 这个影响最大的是<strong>打算另外买笔记本包的时候</strong>, 一定要确定电脑包的长度是否足够, 避免到时候不能用.</p>

<p>屏幕解析度, 目前主流是1366x768, 13 14 15英寸多数都一样, 未来可能会有解析度更高的屏幕出现.</p>

<p>液晶屏幕面板, 现在主要是TN面板, 主要响应速度快, 也有一些是IPS面板, 显示色彩更多, 更逼真, 就是响应慢点, 可能会有轻微拖尾.</p>

<p>哑光和镜面屏, 主要是在背后有强光的时候, 屏幕是否会反光. 另外, 哑光屏仔细看可能会看到很多彩色的点, 镜面屏一般比较清澈.</p>

<!-- more -->


<h3>体积和重量</h3>

<p>上段也大概提到了, 屏幕尺寸和比例决定了长宽, 一般14英寸, 16:9的笔记本长宽分别为35cm 24cm左右. 其它尺寸和长宽比的可以自行估计.</p>

<p>厚度按照最厚的地方算, 一般在2cm-3.5cm之间.</p>

<p>重量一般14英寸的笔记本带上电池在2-2.5kg之间, 如果再加电源的话, 在3kg左右.</p>

<h3>材质和颜色</h3>

<p>主要外壳部分一般是工程塑料, 磨砂或镜面处理. 掌托部分有些可能会使用金属拉丝的工艺, 当然仍旧是工程塑料的材质.</p>

<p>磨砂的反光少, 镜面的沾指纹看起来很明显, 但是也容易擦. 表面有光泽的样子比较吸引人.</p>

<p>另一类材料是镁铝合金, 价格会高一些, 这个手摸就能分辨出来.</p>

<p>红色白色等亮丽的颜色对女性可能更有吸引力, 可能不耐脏, 很容易显灰尘, 有划痕的话也会很明显, 需要在使用中多注意养护.</p>

<h3>周边接口</h3>

<p>笔记本的多数接口都在侧面, 接口主要考虑的是位置, 下面所说的<strong>前是指面向使用者的侧面</strong>, <strong>后就是面向前方的侧面</strong>.</p>

<p>下面的条目只是说好的设计怎么样, 一般很难能同时满足所有的, 实际应当根据自己的主要需求进行取舍.</p>

<ul>
<li>电源和网线可能是经常使用的接口, 应当放到的左右两边靠后侧的位置, 有些会直接设计到后侧.

<ul>
<li>选择的时候可以考虑自己的使用环境选择某一侧接口.</li>
</ul>
</li>
<li>多数人都是右撇子, 一般会随机赠送一个有线鼠标, 所以最好<strong>右侧有一个在靠后的USB接口</strong>用于连接鼠标.</li>
<li>USB接口是用的最多的, 好的设计会把两个接口距离设计的远点. 免得有些USB设备太大挡住了其它的接口.</li>
<li>耳麦接口有时可能是一体兼容接口, 买耳麦的话就不能同时使用耳机和麦克风了, 不过一般都是接耳机.</li>
<li>有时可能会考虑外接显示器, 或者是连接投影仪使用, VGA和HDMI接口出来的线应避免正好对着出风口.</li>
<li>散热器出风口应该避免对着连接附近接口的线, 否则会把线表面吹热的.

<ul>
<li>出风口一定不能对着前侧, 或者对着右侧的手吹.</li>
</ul>
</li>
</ul>


<h3>转轴</h3>

<p>一般分下沉式和上浮式, 下沉式的转轴比较多一些, 原因多种多样, 成本, 美观, 适用程度.</p>

<ul>
<li>下沉式转轴成本低点, 可能现在已经差距不明显了.</li>
<li>下沉式转轴合起来之后笔记本正面基本看不到铰链, 比较简洁美观.</li>
<li>下沉式转轴无法把屏幕打开到和键盘面平行, 即180度, 而上浮式转轴一般能做到, 当然这种场景不是很多.</li>
<li>下沉式转轴会让屏幕挡住后侧, 这一侧基本就不能有什么接口了, 有些散热器出风口对着这个方向, 结果是屏幕底沿被吹的比较热.</li>
</ul>


<h3>键盘</h3>

<p>鼠标和键盘作为操作笔记本的主要途径, 鼠标可以另配, 键盘就不方便换了, 所以应该一开始就明确自己可以适应怎么样的键盘.</p>

<ul>
<li>最主要的差异是笔记本键盘上的Fn键, 有的在左下的最外侧, 有的在Win和Alt键中间的位置(接近台式机键盘), 我一般要求必须是后一种, 因为会经常在台式机上操作, 在两种习惯上切换太别扭了.</li>
<li>方向键的大小, 有些设计的比较小, 我更倾向和其它键一样大小的设计.</li>
<li>键盘整体大小, 这个主要在小于14英寸的笔记本上需要注意, 更大的键盘面积当然用着更爽.</li>
<li>键帽是凹的还是平的, 凹的感觉更接近一般台式机的键盘, 平的用起来可能会有敲击时打滑的感觉, 特别是用指甲敲击时, 这个可以用加个键盘膜补足, 不过哪会是另外一种怪怪的感觉, 需要适应一段时间.</li>
<li>键距我感觉差别不是很明显, 还是整体面积更重要, 一般14寸的没啥特别明显的差别.</li>
<li>键程, 笔记本的都是超薄的, 击键的距离肯定比台式机短很多.</li>
</ul>


<h3>外观总结</h3>

<p>一般很难有能完全做到上面所说的最好的设计, 就算有, 可能也会在价格, 体积, 重量上有对应的改变. 所以只能根据各自的首要需求做出取舍.</p>

<p>选择型号的时候, 一般主要型号范围内全部使用一样的模具, 在了解了其中一个型号的外观后, 其它详细型号的外观差异基本没有.</p>

<p>每个品牌的型号规则差别很大, 可以自行了解, 辨别起来还是很容易的.</p>

<h2>内在</h2>

<h3>电池,功耗和续航</h3>

<p>这部分和笔记本的主要用途息息相关, 将能决定其它的主要配件和价格.</p>

<p>现在主流14寸笔记本续航时间在2-3小时之间, 具体看使用情况, 玩游戏最耗电, 看文章, 运行更少的程序, 开笔记本品牌商场提供的省电软件耗电会低.</p>

<p>电池现在基本都是锂电池了, 我不清楚笔记本是否大量使用锂聚合物电池, 不过仍旧属于锂电池, 对续航影响差距不大, 需要更长的续航时间就需要更大的电池. 聚合物电池相对安全性好些, 不会有爆炸的情况.</p>

<p>但是仍旧应该在合适的温度下使用笔记本.</p>

<p>如果没有特别强烈的需要电池续航的话, 可以不考虑太苛刻的电池和续航时间, 事实也是很多人仅仅把笔记本当作<strong>方便移动的台式机</strong>来使用.</p>

<p>功耗一般和机器性能有关, 在满负荷运转下, 性能越高, 功耗越高. 对应的发热也越高, 对散热要求会更高.</p>

<p>笔记本内部设计的十分紧凑, 所以应清楚自己的使用环境, 选择合适的配置, 新机器散热可能没问题, 但是长期使用, 散热风道积聚灰尘之后散热能力会下降, 在过热的环境下笔记本除了可能会罢工外, 还有损坏的风险.</p>

<h3>显卡</h3>

<p>显卡关乎游戏性能, 更好的显卡能流畅的运行高需求的游戏, 同时功耗, 发热量也上来了.</p>

<p>大概的显卡范围一般比较容易确定, 如果要在相近的几个型号中选择, 可以参考这个<a href="http://www.notebookcheck.net/Mobile-Graphics-Cards-Benchmark-List.844.0.html">Laptop Video Graphics Cards - Benchmark List</a>.</p>

<p>一般游戏都是使用特定DirectX版本, 而显卡性能测试软件3DMark系列分别针对不同的DirectX版本, 其对应关系如下:</p>

<ul>
<li>DirectX 9 -> 3DMark05 和 3DMark06</li>
<li>DirectX 10 -> 3DMark Vantage</li>
<li>DirectX 11 -> 3DMark 11</li>
</ul>


<p>所以可以先考虑主要玩的游戏所需要的DirectX版本, 然后考虑对应得分更高的显卡. 当然价格也是很重要的因素.</p>

<p>这里有一个笔记本显卡分级<a href="http://www.notebookcheck.net/Comparison-of-Laptop-Graphics-Cards.130.0.html">Comparison of Laptop Graphics Cards</a>, 给出了高端游戏显卡, 中端, 中低端, 低端, 办公用等显卡和相关的性能测试结果.</p>

<p>可以从中看到, 现在Intel HD Graphics 4000显卡, 也就是Intel酷睿i系列第三代处理器集成的显卡, 已经能达到中低端显卡的范畴了, 和NVIDIA GeForce GT 620M, NVIDIA GeForce GT 525M, NVIDIA GeForce GT 330M, AMD Radeon HD 7450M在同一范围, 如果你的选择范围在这个里面, 可以考虑一下CPU集成显卡.</p>

<p>其实这么说来, Intel超级本的游戏性能对付一般游戏还是可以接受的.</p>

<h3>内在总结</h3>

<p>没有提CPU? 我感觉CPU这东西是一分钱一分货, 性能参考<a href="http://www.notebookcheck.net/Mobile-Processors-Benchmarklist.2436.0.html">Comparison of Mobile Processors (CPU Benchmarks)</a>. 一般主流价位的笔记本其CPU性价比最高.</p>

<p>CPU详细的对比参见下面这两个链接, 分别来自Intel和AMD的官方, 目前多数笔记本都是Intel的CPU:</p>

<ul>
<li><a href="http://ark.intel.com/zh-cn#MobileProducts-MobileProcessors">Intel 查找和比较英特尔产品规格</a></li>
<li><a href="http://www.amd.com/CN/PRODUCTS/NOTEBOOK/APU/MAINSTREAM/Pages/mainstream.aspx#7">AMD  采用AMD加速处理器的笔记本</a></li>
</ul>


<p>内存一般看主流, 现阶段比较尴尬, 因为普遍笔记本能识别的只有3G左右内存, 等64位Windows和相关的软件流行的时候才能使用更大的内存.</p>

<p>硬盘基本什么大小的都够用, 固态, 或者混合硬盘相应的价格更高, 性能更好, 还是一分钱一分货.</p>

<h2>购买</h2>

<p>现实不是决定选择什么型号的机器然后购买就完了.</p>

<h3>卖场</h3>

<p>去卖场能够看到真实的机器, 上面的外观方面主要是到卖场是亲身感受为主, 但是卖场还是会存在各种坑人的事.</p>

<ul>
<li>临到提货的时候说没货了, 然后建议你换个型号, 很多被坑就是这样的.</li>
<li>把标配的鼠标, 电脑包当成赠品, 并依次和买家讨价还价. 实际上一般除了标配的外, 商家还会免费送屏幕膜, 外壳膜, 鼠标垫, 清洁套装, 笔记本散热器之类的, 只要你真的购买.</li>
<li>有些商家会有一些存货, 不太容易处理, 所以会不遗余力的给你推荐某个机型, 这些机型可能确实有些不错的特点, 但是不建议买, 看看就行了, 一般这样的机型它的市场价格已经比商家的报价低很多了.</li>
<li>商家的牌子可以完全无视, 什么旗舰店, 总店, 和他们的信誉完全没有关联, 不坑你坑谁, 还是自己有主意靠谱.</li>
</ul>


<p>在卖场一定要坚持一个原则, 不在卖场内做决定, 卖场内的商家会十分的热情, 环境也比较吵杂, 闷热, 这种情况下做出决定往往就是个不怎么好的决定, 建议在出了卖场后, 休息或者吃饭的时候再决定, 有朋友一起更好.</p>

<p>在卖场中一定要注意防盗, 人多的地方什么事都可能发生, 特别是自己的注意力在别的东西上时, 最好多人一起, 一个人和商家交涉, 另一个打酱油.</p>

<p>逛卖场会比较累, 最好随身携带水, 吃饭也不要吃太多, 人在累的时候最脆弱.</p>

<h3>网购</h3>

<p>网购主要是指在淘宝上网购, 因为淘宝上的规则目前都是到买家有利, 所以也不失为一个渠道. 网购的货源比较多, 卖场中哪些缺货的事不存在. 在自己家, 做决定也不是在紧张的环境中.</p>

<p>主流品牌的行货笔记本都有全国联保, 一般淘宝商城的都是行货. 如果你很在乎质保期限, 一定要商家开单据证明购买时间. 否则一般售后会按照出厂时间 + 3个月作为购买时间. 有些品牌的售后要求必须是发票才能证明购买时间, 请了解具体品牌的售后政策.</p>

<p>售后的工作流程会很麻烦, 时间也长, 就算说的再好的售后, 也难免遇到自己有特殊情况. 所以哪些品牌宣传中所谓的售后可以不用过多考虑, 我更在乎的是产品的质量, 什么售后补足产品质量是扯淡, 钱都收了, 做的好是人情, 耍赖是本份.</p>

<p>网店如果对买入的不满意, 可以要求退货或者换货, 退换的时间甚至可以达到1个月左右(利用淘宝有利买家的规则).</p>

<p>寄回的邮费可能需要自己出, 如果对自己的选机型的能力不够自信, 又觉得来回折腾又费心, 那么就不建议考虑网购了.</p>

<p>利用淘宝的规则还有卖家的承诺, 完全可以做到很好的维护自己的权益. 其实重点是买家可以在淘宝上给差评, 低评分, 举报等. 就算交易完成了, 还可以拍些东西给差评, 然后说没收到货, 拒绝支付.</p>

<p>这方面买家骚扰的成本比卖家反骚扰的成本低多了, 比卖场的情况好.</p>

<p>网购一般标配送的东西都齐全, 但是额外的可能就没有了, 毕竟价格低嘛, 要的话可以和卖家交涉.</p>

<p>目前笔记本的网购配送主要是顺丰快递, 这个快递还是很可靠的, 无论是速度还是对包裹的保护上.</p>

<h2>验机</h2>

<p>在卖场购买的话, 建议头天晚上决定好, 第2天上午在中意的几家当中交涉, 然后午饭后购买, 验机, 速度快的话, 能在下午6点前回家吃晚饭.</p>

<p>网购的话, 一般有好几天确认的时间, 还是比较宽裕的.</p>

<p>多数情况到这一步基本都没啥问题了, 但是难免有些个体差异, 如果让自己遇到了当然是越早发现越好, 所以验机步骤不能少.</p>

<p>拿到机器后先看包装和外观</p>

<ol>
<li>外包装一般侧面会有一块白底黑字的贴纸, 上面标的具体型号, 可以确认是否是自己购买的, 一般上面有关键的配置信息.</li>
<li>卖场中购买的话, 一般厂家或代理会给商家有返点, 商家会提前把机器拆开, 拿走里面的保卡作为证明, 网购的话具体问商家, 如果加了配件的话也可能会拆过.</li>
<li>看外包装有没有明显被碰撞的地方, 凹陷什么的.</li>
<li>拆开, 里面的包装纸是泡沫塑料的, 可以垫桌子上.</li>
<li>看主机的外壳是否有<strong>划痕</strong>, 对着光看, 还有屏幕和键盘那一面.</li>
<li>主机掌托可能会贴一些厂商的标签, 比如Intel Core的标签, 标签上的染料有些是指甲扣不掉的, 有些能扣掉.

<ul>
<li>我这是Intel, nVIDIA的扣不掉.</li>
<li>nVIDIA Optimus上面的能扣掉.</li>
</ul>
</li>
<li>看电池和主机上电池触点是否有<strong>磨损的痕迹</strong>, 出厂测试会留下一次痕迹.</li>
<li>后盖螺丝是否有<strong>螺丝刀的痕迹</strong>, 工厂的加工很精细, 一般不会有明显螺丝刀的痕迹.</li>
</ol>


<p>然后装上电池, 接通电源, 装系统或者启动.</p>

<p>先看看屏幕是否有亮点, 暗点, 万里有个一的话就和卖家交涉. 测试软件可以使用<a href="https://www.google.com.hk/search?ie=UTF-8&amp;oe=UTF-8&amp;sourceid=navclient&amp;gfns=1&amp;q=everest">EVEREST</a>, 工具菜单中有显示器测试.</p>

<p>接下来主要的接口测试, 比如USB, 网线接口, 耳麦接口, 读卡器, 有光驱的试试光驱弹出, 关闭. 有条件的还可以测试VGA或者HDMI接口.</p>

<p>网络部分WiFi, 有蓝牙的用手机试试蓝牙.</p>

<p>内部的硬件检测可以使用上面提到的<a href="https://www.google.com.hk/search?ie=UTF-8&amp;oe=UTF-8&amp;sourceid=navclient&amp;gfns=1&amp;q=everest">EVEREST</a>.</p>

<p>或者是<a href="http://www.ludashi.com/">鲁大师</a>, 比较简单直观, 有一个界面可以快速以习惯的词汇描述的硬件配置.</p>

<p>如果要跑分一般是<a href="http://www.3dmark.com/zh-hans/">3DMark</a>.</p>

<h2>附:关于Intel的超级本</h2>

<p>现在超级本还不是很多, 相信不远的未来这方面会多出很多. 所以有必要提提超级本.</p>

<p>超级本是Intel提出的概念, 对消费者来说就是Intel要求品牌厂商的笔记本至少要满足一些条件, 就可以使用超级本来做宣传, 也就是一些保底的要求, 对消费者来说主要是下面这些:</p>

<ul>
<li>薄, 最多2cm.</li>
<li>轻, 最多1.4kg.</li>
<li>超长待机, 至少5-8小时.</li>
<li>快速启动, 最多20秒.</li>
<li>快速唤醒, 最多4秒.</li>
</ul>


<p>这些是外在特点, 具体这些还需要很多相关内在的变化才能做到.</p>

<p>启动时间得依据实际的软件使用情况, 可能没有那么短, 不过一般出厂预装的软件环境应该是可以达到的.</p>

<p>综合起来说就是对付一般游戏, 典型的应用环境完全足够, 现阶段的价格还比较高, 不过未来成本降低的情况下相对传统的笔记本很有竞争力的, 所以我也相信它会在未来成为热点.</p>

<p><a href="http://www.intel.com/cn/ultrabook/">Intel超级本宣传页</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/10/12/buy-notebook-memo/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Firefox下设置location不生效]]></title>
    
      <category term="Error" />
    
      <category term="Firefox" />
    
      <category term="Javascript" />
    
      <category term="Memo" />
    
      <category term="jQuery" />
    
    <link href="http://netwjx.github.com/blog/2012/10/01/set-location-is-invalid-in-firefox/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-10-01T16:26:00+08:00</published>
    <updated>2012-10-01T16:26:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/10/01/set-location-is-invalid-in-firefox</id>
    <content type="html"><![CDATA[<p>项目中使用的窗口组件加载内容是使用<code>iframe</code>实现的, 以前遇到的各种问题总是在IE下, 但是之前又发现一个很奇怪的问题, 仅在Firefox下出现.</p>

<p>具体表现为窗口组件关闭时再将相关的父级或<code>iframe</code>重定向到新的地址, 结果在Firefox下没看到重定向, 也没在错误控制台看到任何错误信息.</p>

<p>前提: 以下所有的都不涉及跨域的问题, 只描述Firefox下运行的情况, 目前我的Firefox版本是15.0.1.</p>

<p>关键结构如下, <code>$</code>表示jQuery:</p>

<p>``` html</p>

<script>
    function dialog()
        var ifrm = $('<iframe id="Dialog1">').appendTo('body')[0];
        ifrm.openWindow = window;
        // ...

    function dialogClose(frameElement, url)
        $(frameElement).remove();
        (frameElement.openWindow || window).location = url;
</script>




<iframe id="main">
    <button onclick="parent.dialog()">打开</button>

<!-- 打开窗口时 -->
<iframe id="Dialog1">
    <button onclick="parent.dialogClose(frameElement, 'other.html')">关闭并重定向 #main 的地址</button>
```

一些需要说明的实际情况

-   窗口是指顶级页面的`window`和`iframe`中的`window`. 窗口下是指`window.document`和下面的所有DOM元素.
-   在`#main`中`parent.dialog()`实际是自动探测或指定在哪个父级打开窗口.
    -   在`Dialog1`中`parent.dialogClose`实际是哪个窗口打开就重定向那个窗口, 或者指定重定向哪个窗口.
-   `<iframe id="Dialog1">` 是按照实际打开的情况自动分配的id, 这里使用固定的id方便说明.


上述代码运行后的结果没有产生重定向, 加了`try catch`后:

    An error occurred throwing an exception

出错行在 `(frameElement.openWindow || window).location = url;`.

<!-- more -->

怀疑可能是不能识别默认属性, 换成`location.href`试试

    "Component returned failure code: 0x804b000a (NS_ERROR_MALFORMED_URI) [nsIDOMLocation.href]"

在[MDN window.location](https://developer.mozilla.org/en-US/docs/DOM/window.location#Methods)发现有`assign`和`replace`也可以用来重定向

`assign`正常执行了, 但是`replace`

    "Component returned failure code: 0x804b000a (NS_ERROR_MALFORMED_URI) [nsIDOMLocation.replace]"

想到可能和上下文有关吧, 试试用目标`window.setTimeout`, 传入字符串参数, 执行正常了.

``` js
    (frameElement.openWindow || window).setTimeout('location="' + url + '"', 0)
```

上述所有尝试的代码示例:

{% jsfiddle sLDmC/69 default default 510px %}

-   所有`iframe`加载的页面都在这一个里面, 根据不同的Url Query执行不同的代码.
-   `openWindow.`表示重定向的是按钮所在窗口.
-   水平分割线下面的是重定向当前窗口.
-   蓝线以下是一些输出的信息, 以及发生异常时的异常信息.
-   重定向成功会显示一个红色背景的成功, 发生异常会在日志中显示出来.
-   重定向成功后, **Result**标签页右边有个**Run again**可以恢复开始状态.


另一方面
--------

虽然问题算是解决了, 但是为什么在哪种情况会发生异常, 仅在Firefox下. 还有没有其它可以回避这个异常的方式.

想想上面代码有些怪怪的就是, 先从DOM树中移除了`iframe`, 如果想办法调整一下移除和重定向的顺序, 就有了下面的示例:

{% jsfiddle sLDmC/68 default default 510px %}

可以看到所有的重定向都成功了.


总结
----

-   尽量避免使用`iframe`.
-   尽量使用一种方式进行跨`iframe`间的调用, 比如setTimeout方式.
    -   调用参数尽量用基本类型, 比如字符串, 数字, 复杂的可以用JSON格式字符串.
-   尽量规避从DOM树移除当前`iframe`后还需要执行代码的情况.
    -   实在无法规避就需要十分注意前后的执行顺序.

当然如果和我一样是维护原有项目, 有很多地方不能随便修改, 遇到麻烦就只能大量摸索了. 比如上文中的尝试.


附:使用location的assign()和replace()的注意点
--------------------------------------------

在`iframe`中`location.assign()`必须确保当前`iframe`已加载一个页面, 不然会发生错误

    "Component returned failure code: 0x804b000a (NS_ERROR_MALFORMED_URI) [nsIDOMLocation.assign]"

对于已加载页面的则正常, 例子:

{% jsfiddle gQvmx/13 default default 370px %}


      <p><a href="http://netwjx.github.com/blog/2012/10/01/set-location-is-invalid-in-firefox/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于PM2.5]]></title>
    
      <category term="Live" />
    
      <category term="Memo" />
    
    <link href="http://netwjx.github.com/blog/2012/08/26/about-pm2-dot-5/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-08-26T14:18:00+08:00</published>
    <updated>2012-08-26T14:18:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/08/26/about-pm2-dot-5</id>
    <content type="html"><![CDATA[<p><link href="http://netwjx.github.com/stylesheets/mytable.css" rel="stylesheet" type="text/css"/></p>

<p>这里整理了一些关于空气质量主要指标PM2.5的相关资料, 主要参考自<a href="http://songshuhui.net/archives/tag/pm2-5">科学松鼠会关于PM2.5相关的文章</a>, 和<a href="http://blogs.america.gov/mgck/2012/06/12/pm/">雾谷飞鸿关于空气质量的文章</a>, 只是将我认为关键点用简短的话列出来.</p>

<ul>
<li>空气污染主要检测可吸入颗粒物, 臭氧, 二氧化碳, 二氧化硫.</li>
<li>颗粒物对人体影响是是最直接和严重的.</li>
<li>小于10微米(下称PM10)的颗粒物就可能被吸入肺, 而小于2.5微米(下称PM2.5)的穿透力更强, 更不易被粘膜吸附或咳嗽排出.</li>
<li>PM10主要来源于机械过程, 包括建筑施工, 道路扬尘和风.</li>
<li>PM2.5主要来源于燃烧, 包括木材, 烟草, 煤炭, 柴油, 汽油.</li>
<li>PM2.5比PM10能够吸附更多的有毒物质, 对呼吸系统和心血管系统危害大于PM10.</li>
<li>PM2.5也极易吸附有机污染物和重金属, 使致癌和基因突变几率明显提高.</li>
<li>所以联合国世界卫生组织(下称WHO)关于<strong>颗粒物空气质量准则(AQG)</strong>依据是PM2.5而不是PM10.</li>
<li>空气污染物检测指标单位是<strong>μg/m<sup>3</sup> </strong>, 即<strong>微克/立方米</strong>.</li>
<li>一般播报的是空气污染指数(API), 其相应的PM2.5浓度见下文的表格.</li>
<li>背景PM2.5浓度在3-5之间, 即没有人为污染, 自然情况下的浓度.</li>
<li>PM2.5浓度高的最明显的表现是<strong>天空变成灰蒙蒙一片</strong>, 空气能见度降低.</li>
</ul>


<!-- more -->


<h2>空气污染指数(API)和PM2.5浓度对应的限值</h2>

<table class="mytable">
    <tr>
        <td>PM2.5浓度<br/>μg/m<sup>3</sup></td>
        <td>15</td>
        <td>40</td>
        <td>65</td>
        <td>150</td>
        <td>250</td>
        <td>350</td>
        <td>500</td>
    </tr>
    <tr>
        <td>API</td>
        <td>50</td>
        <td>100</td>
        <td>150</td>
        <td>200</td>
        <td>300</td>
        <td>400</td>
        <td>500</td>
    </tr>
    <tr>
        <td>国内标准</td>
        <td style="background:#00e319">优</td>
        <td style="background:#fefe1f">良</td>
        <td style="background:#ff7d0a" colspan="2">轻微污染</td>
        <td style="background:#ff0302">中度污染 API&lt;250</td>
        <td style="background:#7d0122" colspan="2">重度污染 大于250</td>
    </tr>
    <tr>
        <td>美国标准</td>
        <td style="background:#00e319">良好</td>
        <td style="background:#fefe1f">中等</td>
        <td style="background:#ff7d0a">对敏感人群不健康</td>
        <td style="background:#ff0302">不健康</td>
        <td style="background:#98024b">非常不健康</td>
        <td style="background:#7d0122" colspan="2">有毒害</td>
    </tr>
    <tr>
        <td>香港标准</td>
        <td style="background:#00e319">轻微 API&lt;25<br/>中等 API&lt;50</td>
        <td style="background:#fefe1f">偏高</td>
        <td style="background:#ff0302" colspan="2">甚高</td>
        <td style="background:#7d0122" colspan="3">严重</td>
    </tr>
    <tr>
        <td>加拿大标准</td>
        <td style="background:#00e319">良好 API&lt;25<br/>中等 API&lt;50</td>
        <td style="background:#fefe1f">较差</td>
        <td style="background:#7d0122" colspan="5">极差</td>
    </tr>
</table>


<p>例如: PM2.5在15到40之间, 那么API就在50到100之间, 按照国内标准评级的话, 就是良.</p>

<h2>WHO关于颗粒物空气质量准则和过渡期目标</h2>

<p>由于优先选择PM2.5, 所以PM10的就不列出来了, 想看可以看开头参考的文章.</p>

<table class="mytable">
    <tr>
        <th>&nbsp;</th>
        <th>PM2.5 μg/m<sup>3</sup> 年均</th>
        <th>PM2.5 μg/m<sup>3</sup> 日均</th>
    </tr>
    <tr>
        <td>过渡期-1</td>
        <td>35</td>
        <td>75</td>
    </tr>
    <tr>
        <td>过渡期-2</td>
        <td>25</td>
        <td>50</td>
    </tr>
    <tr>
        <td>过渡期-3</td>
        <td>15</td>
        <td>37.5</td>
    </tr>
    <tr>
        <td>准则(AQG)</td>
        <td>10</td>
        <td>25</td>
    </tr>
</table>


<h2>一张图片</h2>

<p>2001-2006年卫星图片显示的全球PM2.5均值</p>

<p>{% img http://songshuhui.net/wp-content/uploads/2011/08/483910main1_Global-PM2.5-map-670-600x300.jpg 618 309 2001-2006年卫星图片显示的全球PM2.5均值 %}</p>

<p>上图来自 <a href="http://www.nasa.gov/topics/earth/features/health-sapping.html">New Map Offers a Global View of Health-Sapping Air Pollution</a></p>

<p>国内尚没有执行WHO的颗粒物空气质量准则和过渡期目标(拟于2016年实施过渡期-1的目标), 但是北京和东 南沿海各个省份已经在发布PM2.5空气质量指数, 可以自行找当地的环保部门网站查看.</p>

<p>智能手机可以找找有没有当地的空气质量报告软件, 有些地方性的手机软件有PM2.5的指数, 比如我现在用的是<a href="https://play.google.com/store/apps/details?id=com.cas.airquality">全国空气质量</a>.</p>

<h2>关于防护</h2>

<p>颗粒物分类, 包括PM2.5和PM10</p>

<ul>
<li>非油性颗粒物, 一般记作N, 典型的有水泥粉尘.</li>
<li>油性颗粒物, 一般记作P, 典型的有厨房油烟, 汽车尾气, 沥青烟雾.</li>
</ul>


<p>避免接触为上策, 没办法的时候只能先用口罩.</p>

<p>无论国内还是国外检测口罩防护效果使用的都是氯化钠气溶胶和石蜡油, 其粒径在0.02-2微米到之间, 捕获率是按照最小计算, 而不是平均值, 所以可以理解为对PM2.5的防护能力.</p>

<p>NiOSH标准, 测试空气流量：85L/分钟</p>

<table class="mytable">
    <tr>
        <th>等级</th>
        <th>捕获率</th>
    </tr>
    <tr>
        <td>N95 R95 P95</td>
        <td>≥95%</td>
    </tr>
    <tr>
        <td>N99 R99 P99</td>
        <td>≥99%</td>
    </tr>
    <tr>
        <td>N100 R100 P100</td>
        <td>≥99.97%</td>
    </tr>
</table>


<ul>
<li>N针对非油性颗粒物.</li>
<li>R和P针对油性和非油性颗粒物.</li>
<li>R用于油性颗粒物防护使用时间不能超过8小时.</li>
<li>P的使用时间遵循制造商的建议.</li>
</ul>


<p>中国GB2626-2006标准, 测试空气流量：85L/分钟</p>

<table class="mytable">
    <tr>
        <th>等级</th>
        <th>捕获率</th>
    </tr>
    <tr>
        <td>KN90 KP90</td>
        <td>≥90%</td>
    </tr>
    <tr>
        <td>KN95 KP95</td>
        <td>≥95%</td>
    </tr>
    <tr>
        <td>KN100 KP100</td>
        <td>≥99.97%</td>
    </tr>
</table>


<ul>
<li>KN针对非油性颗粒物.</li>
<li>KP针对油性颗粒物.</li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/08/26/about-pm2-dot-5/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
