<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: Java | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-08-26T20:13:04+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[在Eclipse中的Java开发技巧(3)]]></title>
    
      <category term="Eclipse" />
    
      <category term="Java" />
    
      <category term="Tips" />
    
    <link href="http://netwjx.github.com/blog/2012/08/19/java-development-tips-in-eclipse-3/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-08-19T13:29:00+08:00</published>
    <updated>2012-08-19T13:29:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/08/19/java-development-tips-in-eclipse-3</id>
    <content type="html"><![CDATA[<p>这篇主要是默认设置下的常用的快捷键, 类似vim这类编辑器, 形成一个标准可以带来一些好处, 诸如方便交流, 不需要备份恢复太多自定义配置.</p>

<p>主要挑哪些很实用, 比较容易按到的.</p>

<h2>自动完成</h2>

<p>基本上有语法分析的编辑环境都会有自动完成, 经常的目的是提示类的方法等, Eclipse中自动完成是按<strong>Alt + /</strong>, 重复按可以在几个不同类目切换, 具体可以自己试试.</p>

<p><strong>Alt + Shift + /</strong> 是用于参数提示, 和<strong>Alt + /</strong>效果差不多, 甚至有时能相互通用, 不过这个参数提示比较简单, 只有类型和参数名, 详细的还得在看方法提示时右边出现的说明.</p>

<p><strong>Ctrl + Enter</strong> 这个不是单独使用, 而是在按了<strong>Alt + /</strong>之后使用, 用于修改一个方法调用, 因为按<strong>Enter</strong>将是插入代码. 具体见下图</p>

<p><img src="/i/e/content-assist.png" alt="Content Assist" /></p>

<p>在类一级, 即方法外面按<strong>Alt + /</strong>会提示可重写的方法.</p>

<!-- more -->


<h2>在不同场景下的 Ctrl+1</h2>

<p><strong>Ctrl + 1</strong>是快速修正, 不同场合会有十分不同的功能, 我觉得它是Eclipse中使用频率仅次于<strong>Alt+/</strong>的快捷键.</p>

<h3>创建变量方法和类</h3>

<p>直接写变量赋值而不写变量类型时, 按<strong>Ctrl + 1</strong></p>

<p><img src="/i/e/quick-fix-1.png" alt="Quick Fix" /></p>

<p>快速修正的列表中</p>

<ul>
<li><p><strong>Create local variable 'a'</strong></p>

<p>创建方法内变量, 上面已经有截图.</p></li>
<li><p><strong>Create field 'a'</strong></p>

<p>创建类变量.</p></li>
<li><p><strong>Create parameter 'a'</strong></p>

<p>创建方法参数.</p></li>
<li><p><strong>Remove assignment</strong></p>

<p>删除.</p></li>
</ul>


<p>直接写方法调用<code>foo("bar")</code>, 而不实现方法时, 按<strong>Ctrl + 1</strong>, 会有<strong>Create method 'methodName(paramType)'</strong>, <strong>Enter</strong>后会在合适的位置创建指定的方法空实现, 并且参数都已经写好, 按<strong>Tab</strong>键可以切换到返回类型和参数类型上调整, 最后<strong>Enter</strong>两次完成.</p>

<p>类也可以用相似的方式创建, 先写<code>new Foo("Name")</code>, 然后<strong>Ctrl + 1</strong>, 选<strong>Create class 'Foo'</strong>. 如果是在方法调用中这么写<code>foo(new Bar())</code>, 并且<code>foo</code>方法的参数有具体的类型限制, 那么创建的类会继承参数指定的类型或实现参数的接口类型.</p>

<p>如果现有类里面有, <strong>Ctrl + 1</strong>会出现<strong>Import 'Xxx' (xxx.xx)</strong>, 用于引入现有类.</p>

<h3>添加接口方法的默认实现</h3>

<p>在类声明上写了<code>implements IFoo</code>后, 按<strong>Ctrl + 1</strong>会有</p>

<ul>
<li><p><strong>Add unimplemented methods</strong></p>

<p>添加未实现的接口方法.</p></li>
<li><p><strong>Make type 'Xxx' abstract</strong></p>

<p>修改当前类为抽象.</p></li>
</ul>


<p>还有抽象类的抽象方法也有类似的提示, 具体可以自行尝试, 套路基本和上面的一样.</p>

<p>结合上段, 使用匿名内部类时, 输入<code>new InterfaceClass(){}</code>之后按<strong>Ctrl + 1</strong>, 也有<strong>Add unimplemented methods</strong>, 这在写UI程序时添加事件回调很有用.</p>

<h3>移除默认生成的TODO</h3>

<p>所有默认生成的方法都会有<code>// TODO Auto-generated method stub</code> 这段, 可以在那一行按<strong>Ctrl + 1</strong> -> <strong>Remove task tag</strong></p>

<p>不过直接按删除行更直接点, <strong>Ctrl + D</strong></p>

<h3>对没有错误的代码按<strong>Ctrl + 1</strong></h3>

<p>这一般是在打算调整代码时用, 十分通用的比如重命名, 可以按<strong>Alt + Shift + R</strong>更直接点.</p>

<p>在变量声明或赋值上按<strong>Ctrl + 1</strong>, 下面是一些比较有用的.</p>

<ul>
<li><p><strong>Convert local variable to field</strong></p>

<p>把本地变量转换为类变量.</p></li>
<li><p><strong>Split variable declaration</strong></p>

<p>和下一项相反, 把变量声明和赋值分离, 在操作外部资源, 用<code>try finally</code>时很有用.</p></li>
<li><p><strong>Join variable declaration</strong></p>

<p>将变量赋值和声明合并为一行.</p></li>
<li><p><strong>Extract to local variable</strong></p>

<p>把变量扩展为本地变量, 一般是优化时使用, 访问本地变量比类变量快.</p></li>
</ul>


<p>在类变量上按<strong>Ctrl + 1</strong>有<strong>Create getter and setter for 'xxx'</strong>用于创建类变量的<code>get</code>和<code>set</code>方法, 如果是<code>boolean</code>类型会把<code>get</code>变成<code>is</code>.</p>

<p>不过常见的情况是用菜单栏<strong>Source</strong> -> <strong>Generate Getters and Setters</strong>, 可以一次性把选择的类变量生成<code>get</code> <code>set</code>方法.</p>

<h3>Eclipse的使用方法就是经常<strong>Ctrl + 1</strong></h3>

<p>上面是我遇到的常用的地方, 还有很多地方都可以按<strong>Ctrl + 1</strong>, 可以自行尝试.</p>

<h2>在最近编辑的地方跳转</h2>

<ul>
<li><p><strong>Ctrl + Q</strong></p>

<p>在修改代码的时候很有用, 快速跳到刚刚修改的地方, 而不撤销代码的修改.</p></li>
<li><p><strong>Alt + 方向左/方向右</strong></p>

<p>这个也是在最近的相关文件的行中跳转, 但是我也不是很理解具体的规则, 只是偶尔用用看.</p></li>
</ul>


<h2>查看JavaAPI Doc</h2>

<p>默认鼠标移上去就能看到, 但是需要悬停一会, 如果不想碰鼠标, 可以将光标移动到相关的类或者方法上按<strong>F2</strong>, 和鼠标悬停弹出的完全一样.</p>

<h2>最大化编辑区域</h2>

<p><strong>Ctrl + M</strong>, 看个人喜好, 我一般是临时用用, Eclipse可以把编辑窗口拖出来分离成左右或上下的, 最大化时仍旧保持左右或上下, 适合对比分析代码, 比如一个客户端, 一个服务端的代码.</p>

<h2>关闭文件</h2>

<p><strong>Ctrl + W</strong> 和几乎所有主流浏览器的关闭窗口快捷键一样, 大量的编辑器也是这个键, 经常用的话就会很自然了.</p>

<h2>查找快捷键</h2>

<p>上面提到的常用快捷键肯定有遗漏, 如果想自己找相关快捷键可以这样操作.</p>

<p>菜单栏 <strong>Window</strong> -> <strong>Preferences</strong>, 在左侧顶部输入<code>Keys</code>, 一般就一个, 可以看到如下界面</p>

<p><img src="/i/e/keys.png" alt="Keys" /></p>

<p>一般<strong>Scheme</strong>保持<strong>Default</strong>不变, 在<strong>type filter text</strong>输入自己想知道的快捷键锁功能相关的单词, 然后在下面出现的快捷键上找, 并尝试.</p>

<h2>基本通用的编辑快捷键</h2>

<p>这些不限于在Eclipse中使用, 很多地方也可以用这些快捷键, <strong>彻底不了解的可以看, 其他人可无视</strong>.</p>

<ul>
<li><p><strong>Ctrl + 方向左/方向右</strong></p>

<p>光标向左/右移动一个单词, 中文没有单词可能不适用, 不过在代码中很常用.</p></li>
<li><p><strong>Shift + 方向左/方向右</strong></p>

<p>向左/右选择一个字符, 可以重复按选择多个.</p></li>
<li><p><strong>Shift + 方向上/方向下</strong></p>

<p>从当前光标位置向上/下选一行, 可以配合左/右, 重复按来调整选择区域.</p></li>
<li><p><strong>Ctrl + Shift + 方向左/方向右</strong></p>

<p>向左/右选择一个单词, 可以配合上面提到的细节调整选择区域.</p></li>
<li><p><strong>Ctrl + 方向上/方向下</strong></p>

<p>滚动条上下滚动, 光标不移动, 一般是一次滚动一行.</p></li>
<li><p><strong>Home</strong> <strong>End</strong></p>

<p>移动到行首/行末, 配合<strong>Shift</strong>可以变成选择到行首/行末. 有些编辑器能自动检测行首缩进.</p></li>
<li><p><strong>Page Down</strong> <strong>Page Up</strong></p>

<p>上翻页, 下翻页, 配合<strong>Shift</strong>可以选择上一页/下一页的内容.</p></li>
<li><p><strong>Ctrl + X/C/V</strong></p>

<p>Windows平台最常用的, 剪贴, 复制, 粘贴.</p></li>
<li><p><strong>Tab</strong></p>

<p>单独按就是缩进, 根据编辑器的设置, 可能被替换为空格. 配合选中多行, <strong>Tab</strong>可以调整多行的缩进. 配合<strong>Shift</strong>可以反缩进, 即减少缩进, 文本向左移动. 这个不是十分通用, 不过多数编程环境都是这样的.</p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/08/19/java-development-tips-in-eclipse-3/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Eclipse中的Java开发技巧(2)]]></title>
    
      <category term="Eclipse" />
    
      <category term="Java" />
    
      <category term="Tips" />
    
    <link href="http://netwjx.github.com/blog/2012/08/12/java-development-tips-in-eclipse-2/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-08-12T12:46:00+08:00</published>
    <updated>2012-08-12T12:46:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/08/12/java-development-tips-in-eclipse-2</id>
    <content type="html"><![CDATA[<p>这是这个系列的第2篇, 还是十分简单的技巧.</p>

<h2>调试时的ScrapBook</h2>

<p>上篇介绍到了ScrapBook, 在断点调试时也有类似的功能.</p>

<p><img src="/i/e/display.png" alt="Display" /></p>

<p>通过<strong>Window</strong> -> <strong>Show View</strong> -> <strong>Other</strong>, 在<strong>Show View</strong>窗口顶部的文本框输入<code>Display</code>, 应该会在下面看到<strong>Display</strong>, 点击即可打开上图所示界面.</p>

<p>具体功能和上篇的ScrapBook基本一致, 只是用于调试时, 这个主要是可以在调试时, 把一些变量的值直接以文本方式展示, 甚至可以自己填些说明, 方便后续的调试参考.</p>

<!-- more -->


<h2>快速找到当前文件在项目中的位置</h2>

<p>经常会需要查看当前编辑的文件在项目文件系统中的路径, 标签上只显示了文件名, 鼠标移上去可以看到路径, 但是如果想查看同目录下其它的文件就比较麻烦了. 下面是个快速找到当前文件在项目中位置的方式.</p>

<p><img src="/i/e/link-with-editor.png" alt="Link With Editor" /></p>

<p>因为点了<strong>Link With Editor</strong>后, 切换编辑的文件将总会自动转到对应的项目路径, 所以一般我会点两次恢复默认.</p>

<h2>快速在临近的类和方法中跳转</h2>

<p>上一段说的是针对所有文件都能生效的方法, 但是对于Java类来说, 想知道它在项目中的路径, 挺多时候实际目的是查看和它临近类, 那么可以使用<strong>Breadcrumb</strong>.</p>

<p><img src="/i/e/breadcrumb.png" alt="Breadcrumb" /></p>

<h2>两种不同风格的包浏览结构</h2>

<p>在项目上可以显示两种不同的Java包结构, 通过点击<strong>Package Explorer</strong>或<strong>Project Explorer</strong>窗口右上的<strong>View Menu</strong> -> <strong>Package Presentation</strong> -> <strong>Flat</strong>或<strong>Hierarchical</strong>在两种风格中切换, 实际效果如图:</p>

<p><img src="/i/e/package-presentation.png" alt="Package Presentation" /></p>

      <p><a href="http://netwjx.github.com/blog/2012/08/12/java-development-tips-in-eclipse-2/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Eclipse中的Java开发技巧(1)]]></title>
    
      <category term="Eclipse" />
    
      <category term="Java" />
    
      <category term="Tips" />
    
    <link href="http://netwjx.github.com/blog/2012/07/31/java-development-tips-in-eclipse-1/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-31T21:12:00+08:00</published>
    <updated>2012-07-31T21:12:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/31/java-development-tips-in-eclipse-1</id>
    <content type="html"><![CDATA[<p>这是我以前使用Eclipse时经常使用的一些小技巧, 多数都是比较基础的, 涉及的方面也比较的多. 觉得比较实用, 就整理成文.</p>

<p>不分先后顺序, 只是想到什么就写什么, 因为内容比较多, 所以这篇是1.</p>

<p>以英文版的介绍为主, 因为我发现很多人基本都只使用英文版.</p>

<h2>快速测试简短代码</h2>

<p>不是很熟悉字符串的查找, 截取等到底返回的是多少? 不清楚日期返回的年月日分别是几? 不清楚某个静态方法给特定值返回的是多少?</p>

<!-- more -->


<p>这些经常会遇到的小问题, 基本都可以建立一个测试Java项目写个包含main的静态方法, 在里面写测试代码就行了. 但是这样始终很麻烦. 可以试试下面的这个功能:</p>

<p>先确保右上已经选择的是 <strong>Java</strong>(Java perspective), 在随便一个Java项目中右键 -> <strong>New</strong> -> <strong>Other</strong>, 选择树状结构中的<strong>Java -> Java Run/Debug -> Scrapbook Page</strong>, 如下图</p>

<p><img src="/i/e/scrapbook.png" alt="ScrapBook" /></p>

<p>然后<strong>Next</strong>, 输入文件名, 比如<code>test</code>, <strong>Finish</strong>. 打开的窗口中可以输入类似下面的代码, 选择所有代码后点工具栏上的<strong>Display Result of Evaluating Selected Text</strong>, 如下图:</p>

<p><img src="/i/e/scrapbook-1.png" alt="ScrapBook" /></p>

<p>鼠标右键菜单中也有和菜单栏按钮等价的菜单项:</p>

<p><img src="/i/e/scrapbook-2.png" alt="ScrapBook" /></p>

<ul>
<li><p>Inspect</p>

<p>可以在弹出的小窗口中显示, 类似Eclipse中调试Java代码时的Inspect</p></li>
<li><p>Display</p>

<p>上文已经说过了, 它可以将这段表达式或最后一行语句的结果显示在编辑器中</p></li>
<li><p>Execute</p>

<p>这个和直接运行差不多, <code>System.out.println</code>这些会输出</p></li>
<li><p>Set Imports</p>

<p>设置默认导入哪些类, 包, 类似Java中<code>import</code>语句</p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/31/java-development-tips-in-eclipse-1/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode转义(\uXXXX)的编码和解码]]></title>
    
      <category term="CSharp" />
    
      <category term="Decode" />
    
      <category term="Encode" />
    
      <category term="Java" />
    
      <category term="Javascript" />
    
      <category term="RegExp" />
    
    <link href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-07T12:23:00+08:00</published>
    <updated>2012-07-07T12:23:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string</id>
    <content type="html"><![CDATA[<p>在涉及Web前端开发时, 有时会遇到<code>\uXXXX</code>格式表示的字符, 其中<code>XXXX</code>是16进制数字的字符串表示形式, 在js中这个叫Unicode转义字符, 和<code>\n</code> <code>\r</code>同属于转义字符. 在其他语言中也有类似的, 可能还有其它变形的格式.</p>

<p>多数时候遇到需要解码的情况多点, 所以会先介绍解码decode, 后介绍编码encode.</p>

<p>下文会提供Javascript C# Java三种语言下不同方法的实现和简单说明, 会涉及到正则和位运算的典型用法.</p>

<!-- more -->


<h2>Javascript的实现</h2>

<h3>解码的实现</h3>

<p>``` js
function decode(s) {</p>

<pre><code>return unescape(s.replace(/\\(u[0-9a-fA-F]{4})/gm, '%$1'));
</code></pre>

<p>}
```</p>

<p><code>unescape</code>是用来处理<code>%uXXXX</code>这样格式的字符串, 将<code>\uXXXX</code>替换成<code>%uXXXX</code>后<code>unescape</code>就可以处理了.</p>

<h3>编码的实现</h3>

<p>``` js
function encode1(s) {</p>

<pre><code>return escape(s).replace(/%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm, function($0, $1, $2) {
    return $1 &amp;&amp; '\\' + $1.toLowerCase() || unescape($2);
});
</code></pre>

<p>}
```</p>

<p>和解码中相对应, 使用<code>escape</code>编码, 然后将<code>%uXXXX</code>替换为<code>\uXXXX</code>, 因为<code>escape</code>还可能把一些字符编码成<code>%XX</code>的格式, 所以这些字符还需要使用<code>unescape</code>还原回来.</p>

<p><code>escape</code>编码结果<code>%uXXXX</code>中的<code>XXXX</code>是大写的, 所以后面的<code>replace</code>只处理大写的<code>A-F</code>.</p>

<h3>另一种编码的实现</h3>

<p>不使用正则和<code>escape</code></p>

<p>``` js
function encode2(s) {</p>

<pre><code>var i, c, ret = [],
    pad = '000';
for (i = 0; i &lt; s.length; i++) {
    c = s.charCodeAt(i);
    if (c &gt; 256) {
        c = c.toString(16);
        ret[i] = '\\u' + pad.substr(0, 4 - c.length) + c;
    } else {
        ret[i] = s[i];
    }
}
return ret.join('');
</code></pre>

<p>}
```</p>

<p>遍历字符串中的字符, 那些<code>charCode</code>大于256的会转换成16进制字符串<code>c.toString(16)</code>, 如果不足4位则左边补0<code>pad.substr(0, 4 - c.length)</code>. 结尾将遍历的结果合并成字符串返回.</p>

<h2>C#的实现</h2>

<h3>解码的实现</h3>

<p>``` csharp
static Regex reUnicode = new Regex(@"\u([0-9a-fA-F]{4})", RegexOptions.Compiled);</p>

<p>public static string Decode(string s)
{</p>

<pre><code>return reUnicode.Replace(s, m =&gt;
{
    short c;
    if (short.TryParse(m.Groups[1].Value, System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture, out c))
    {
        return "" + (char)c;
    }
    return m.Value;
});
</code></pre>

<p>}
```</p>

<p>正则和js中的一样, 将<code>XXXX</code>转换以16进制<code>System.Globalization.NumberStyles.HexNumber</code>解析为<code>short</code>类型, 然后直接<code>(char)c</code>就能转换成对应的字符, <code>"" + (char)c</code>用于转换成字符串类型返回.</p>

<p>由于正则中也有<code>\uXXXX</code>, 所以需要写成<code>\\uXXXX</code>来表示匹配字符串<code>\uXXXX</code>, 而不是具体的字符.</p>

<p>上面使用到了Lambda, 需要至少dotnet 4的SDK才能编译通过, 可以在dotnet 2下运行.</p>

<h3>编码的实现</h3>

<p>``` csharp
static Regex reUnicodeChar = new Regex(@"[<sup>\u0000-\u00ff]",</sup> RegexOptions.Compiled);</p>

<p>public static string Encode(string s)
{</p>

<pre><code>return reUnicodeChar.Replace(s, m =&gt; string.Format(@"\u{0:x4}", (short)m.Value[0]));
</code></pre>

<p>}
```</p>

<p>和C#的解码实现正好相反, 0-255之外的字符, 从<code>char</code>转换成<code>short</code>, 然后<code>string.Format</code>以16进制, 至少输出4位.</p>

<h2>Java的实现</h2>

<h3>解码的实现</h3>

<p>和C#相似的, 使用正则</p>

<p>``` java
static final Pattern reUnicode = Pattern.compile("\\u([0-9a-zA-Z]{4})");</p>

<p>public static String decode1(String s) {</p>

<pre><code>Matcher m = reUnicode.matcher(s);
StringBuffer sb = new StringBuffer(s.length());
while (m.find()) {
    m.appendReplacement(sb,
            Character.toString((char) Integer.parseInt(m.group(1), 16)));
}
m.appendTail(sb);
return sb.toString();
</code></pre>

<p>}
```</p>

<p>Java语言没有内嵌正则语法, 也没有类似C#的<code>@"\u1234"</code>原始形式字符串的语法, 所以要表示正则中匹配<code>\</code>, 就需要<code>\\\\</code>, 其中2个是用于Java中字符转义, 2个是正则中的字符转义.</p>

<p>Java语言中没有设计函数或者委托的语法, 所以它的正则库提供的是<code>find</code> <code>appendReplacement</code> <code>appendTail</code>这些方法的组合, 等价于js和C#中的<code>replace</code>.</p>

<p>这里使用<code>StringBuffer</code>类型是由于<code>appendReplacement</code>只接受这个类型, <code>StringBuffer</code>有线程安全的额外操作, 所以性能差一点. 也许第三方的正则库能把API设计的更好用点.</p>

<p><code>Integer.parseInt(m.group(1), 16)</code>用于解析为<code>int</code>类型, 之后再<code>(char)</code>, 以及<code>Character.toString</code>转换成字符串.</p>

<h3>解码的另一种实现</h3>

<p>因为<code>StringBuffer</code>的原因, 不使用正则的实现</p>

<p>``` java
public static String decode2(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length());
char[] chars = s.toCharArray();
for (int i = 0; i &lt; chars.length; i++) {
    char c = chars[i];
    if (c == '\\' &amp;&amp; chars[i + 1] == 'u') {
        char cc = 0;
        for (int j = 0; j &lt; 4; j++) {
            char ch = Character.toLowerCase(chars[i + 2 + j]);
            if ('0' &lt;= ch &amp;&amp; ch &lt;= '9' || 'a' &lt;= ch &amp;&amp; ch &lt;= 'f') {
                cc |= (Character.digit(ch, 16) &lt;&lt; (3 - j) * 4);
            } else {
                cc = 0;
                break;
            }
        }
        if (cc &gt; 0) {
            i += 5;
            sb.append(cc);
            continue;
        }
    }
    sb.append(c);
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>手工做就是麻烦很多, 代码中也一坨的符号.</p>

<p>遍历所有字符<code>chars</code>, 检测到<code>\u</code>这样的字符串, 检测后续的4个字符是否是16进制数字的字符表示. 因为<code>Character.isDigit</code>会把一些其它语系的数字也算进来, 所以保险的做法<code>'0' &lt;= ch &amp;&amp; ch &lt;= '9'</code>.</p>

<p><code>Character.digit</code>会把<code>0-9</code>返回为<code>int</code>类型的0-9, 第2个参数是16时会把<code>a-f</code>返回为<code>int</code>类型的10-15.</p>

<p>剩下的就是用<code>|=</code>把各个部分的数字合并到一起, 转换成char类型. 还有一些调整遍历位置等.</p>

<h3>编码的实现</h3>

<p>考虑到Java正则的杯具, 还是继续手工来吧, 相对解码来说代码少点.</p>

<p>``` java
public static String encode(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length() * 3);
for (char c : s.toCharArray()) {
    if (c &lt; 256) {
        sb.append(c);
    } else {
        sb.append("\\u");
        sb.append(Character.forDigit((c &gt;&gt;&gt; 12) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 8) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 4) &amp; 0xf, 16));
        sb.append(Character.forDigit((c) &amp; 0xf, 16));
    }
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>对应于上文Java编码的实现正好是反向的实现, 依旧遍历字符, 遇到大于256的字符, 用位运算提取出4部分并使用<code>Character.forDigit</code>转换成16进制数对应的字符.</p>

<p>剩下就是<code>sb.toString()</code>返回了.</p>

<h2>总结</h2>

<ul>
<li>编码从逻辑上比解码简单点.</li>
<li>对付字符串, js还是最顺手的, 也方便测试.</li>
<li>位运算的性能很高.</li>
<li>Java的正则库设计的很不方便, 可以考虑第三方.</li>
<li>Java的语法设计现在看来呆板, 落后, 也没有js那种灵活.</li>
<li>上文Java的非正则实现可以写成等价的C#代码.</li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[截取指定字节长度的字符串]]></title>
    
      <category term="Java" />
    
    <link href="http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-15T18:35:00+08:00</published>
    <updated>2012-04-15T18:35:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length</id>
    <content type="html"><![CDATA[<p>在搜文本换行算法的时候发现了<a href="http://www.iteye.com/topic/1037773">编写一个截取字符串的函数</a>, 问题是</p>

<blockquote><p>编写一个截取字符串的函数，输入为一个<strong>字符串</strong>和<strong>字节数</strong>，输出为<strong>按字节截取的字符串</strong>。</p>

<p>但是要保证汉字<strong>不被截半个</strong>，如“我ABC”4，应该截为“我AB”，输入“我ABC汉DEF”，6，应该输出为“我ABC”而不是“我ABC+汉的半个”。</p></blockquote>

<!--more -->


<p>可能描述的有些不明确, 应该这样说</p>

<blockquote><p>编写一个截取字符串的函数, 给定<strong>字符串</strong>, <strong>编码格式</strong>, 使用前2个参数编码之后的<strong>字节数组</strong>, 以及截取<strong>字节数组的最大长度</strong>.</p>

<p>要求返回<strong>实际需要截取的长度</strong>, 不能在解码指定长度字节数组后出现<strong>半个字符</strong>的现象.</p></blockquote>

<p>那么测试代码大概是这样的(就以Java为例):</p>

<p>``` java
  String str = "我abc的def";
  String charset = "gbk";
  int length = 6;
  byte[] bytes = str.getBytes(charset);</p>

<p>  String result = new String(bytes, 0, subString(str, charset, bytes,</p>

<pre><code>  length), charset);
</code></pre>

<p>  assert result.equals("我abc的");
```</p>

<p>最后一行的断言仅适用于gbk和utf-8的情况, 其它的不保证可用.</p>

<p>在开始的帖子中看到过一个实现, 等价于下面的代码:</p>

<p>``` java
  private static int subString(String str, String charset, byte[] bytes,</p>

<pre><code>  int length) throws UnsupportedEncodingException {
int i = 0;
for (char c : str.toCharArray()) {
  int n = i + String.valueOf(c).getBytes(charset).length;
  if (n &gt; length)
    return i;
  else if (n == length)
    return n;
  i = n;
}
return i;
</code></pre>

<p>  }
```</p>

<p>不过想想, subString返回值一般在length-3到length之间, 可以探测截取指定长度是否会有问题, 那么就可以有下面的一个实现:</p>

<p>``` java
  private static int detectByte(String str, String charset, byte[] bytes,</p>

<pre><code>  int length) throws UnsupportedEncodingException {
String s = null;
int i = length + 1;
do {
  i--;
  s = new String(bytes, 0, i, charset);
} while (!str.substring(0, s.length()).equals(s));
return i;
</code></pre>

<p>  }
```</p>

<p>再想想, 实际有差别的只是最后一个字符, 只比较最后一个字符即可:</p>

<p>``` java
  private static int subString(String str, String charset, byte[] bytes,</p>

<pre><code>  int length) throws UnsupportedEncodingException {
String s = null;
int n = length + 1;
int i;
do {
  n--;
  s = new String(bytes, 0, n, charset);
  i = s.length() - 1;
} while (str.charAt(i) != s.charAt(i));
return n;
</code></pre>

<p>  }
```</p>

<p>第一种会比较慢些, 后面的方法会占用更多的内存.</p>

<p>这个问题始终和编码类型有关的, 因为需要返回的是字节数组/流的长度, 而不是字符数组/串/流的长度.</p>

<p>不过这个代码的应用场景我还是想不出来, 即使有这样的场景, 也可以有别的变通办法可以不需要这样截取.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
