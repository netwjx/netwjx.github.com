<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: Ruby | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-09-02T15:33:02+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Jekyll插件:分类云]]></title>
    
      <category term="Jekyll" />
    
      <category term="Octopress" />
    
      <category term="Plugin" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-06-03T14:55:00+08:00</published>
    <updated>2012-06-03T14:55:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll</id>
    <content type="html"><![CDATA[<p>Octopress默认有存档页, 但是没有能列出所有分类的页面, 我试图找这方面的插件, 但是尝试使用的一些都不是很理想, 所以尝试自己写了一个这样的插件, 效果就如导航栏链接<a href="/blog/categories/">分类</a> 哪样.</p>

<p>以下是代码, 多数代码都是从Jeykll插件示例中抄的, 第一次写实用的ruby程序, 也没多想注释什么的.</p>

<!-- more -->


<p>``` ruby plugins/category_cloud.rb
module Jekyll
  class CategoryCloudPage &lt; Page</p>

<pre><code>def initialize(site, base, dir, cloud)
  @site = site
  @base = base
  @dir = dir
  @name = 'index.html'

  self.process(@name)
  self.read_yaml(File.join(base, '_layouts'), 'category_cloud.html')

  self.data['cloud'] = cloud
end
</code></pre>

<p>  end</p>

<p>  class CategoryCloudGenerator &lt; Generator</p>

<pre><code>safe true

def generate(site)
  if site.layouts.key? 'category_cloud'
    dir = site.config['category_dir'] || 'categories'

    count = site.categories.map do |item|
      [item[0], item[1].length]
    end

    maxsize = 5
    minsize = 1
    min, max = count.map(&amp;:last).minmax

    cloud = site.categories.map do |name, posts|
      {
        "title" =&gt; name,
        "rank"  =&gt; maxsize + minsize - ((posts.length - min) * (maxsize - minsize) / (max - min) + minsize),
        "link"  =&gt; "/#{dir}/#{name.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/"
      }
    end

    index = CategoryCloudPage.new(site, site.source, dir, cloud)
    index.render(site.layouts, site.site_payload)
    index.write(site.dest)
    site.pages &lt;&lt; index
  end
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>``` scss sass/partials/_category_cloud.scss
.category-cloud {</p>

<pre><code>@for $i from 1 through 5 {
    .rank-#{$i} { font-size: nth(230% 210% 180% 140% 90%, $i); }
}
.rank-1, .rank-2, .rank-3, .rank-4 { font-weight:bold; }
span { line-height: 1.25em; padding:0 5px; }
</code></pre>

<p>}
```</p>

<p>需要修改<code>sass/_partials.scss</code>, 结尾加入一行
<code>scss sass/_partials.scss
@import "partials/category_cloud"
</code></p>

<h2>``` html source/_layouts/category_cloud.html</h2>

<p>layout: page
title: 分类</p>

<h2>footer: false</h2>

<p></p>

<div class="category-cloud">
    {% for item in page.cloud %}
        <span class="rank-{{ item.rank }}"><a href="{{ item.link }}">{{ item.title }}</a></span>
    {% endfor %}
</div>


<p>
```</p>

<p>目前只做了生成分类页面, 侧边栏还没有做, 以后有做的冲动了再说吧.</p>

<h2>参考资料</h2>

<ul>
<li><p><a href="http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/">Migrating from Wordpress to Jekyll - Part 2</a> Tag cloud 段落</p></li>
<li><p><a href="http://blog.16codes.com/2007/12/how-to-create-tag-cloud-with-formula.html">How to create a tag cloud? (With formula and sample calculation) </a> 算法</p></li>
<li><p><a href="https://github.com/imathis/octopress/blob/master/plugins/category_generator.rb">octopress / plugins / category_generator.rb</a> Octopress修改的具体分类页面生成插件</p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 和 Jekyll 的笔记]]></title>
    
      <category term="Jekyll" />
    
      <category term="Liquid" />
    
      <category term="Octopress" />
    
      <category term="RegExp" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-05-06T15:57:00+08:00</published>
    <updated>2012-05-06T15:57:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note</id>
    <content type="html"><![CDATA[<p>之前发现<a href="http://octopress.org/">Octopress</a>产生的页面中, <strong>meta</strong>标签的<strong>content</strong>属性没有处理换行, 今天尝试自己写个插件来处理这个地方, 因为没有学过Ruby, 下面的操作基本都是临时找资料, 所以记录一些重点.</p>

<p>插件代码如下</p>

<p>``` ruby plugins/html_attr_filter.rb</p>

<h1>coding: utf-8</h1>

<h1>html attribute filter</h1>

<p>module HtmlAttrFilters</p>

<pre><code>def html_attr(input)
    input.gsub(/\r\n|\r|\n/, "\r\n"=&gt;'&amp;#13;&amp;#10;', "\r"=&gt;'&amp;#13;', "\n"=&gt;'&amp;#10;')
end
</code></pre>

<p>end</p>

<p>Liquid::Template.register_filter HtmlAttrFilters
```</p>

<p>修改<code>source/_includes/head.html</code>中<code>&lt;meta name="description"</code>所在的行</p>

<p><code>html source/_includes/head.html
  &lt;meta name="description" content="{{ description | strip_html | condense_spaces | truncate:150 | html_attr }}"&gt;
</code></p>

<p>然后<code>rake generate</code>就能看到<code>&lt;meta name="description"</code>的<strong>content</strong>已经不会有换行了, 下面说说中间涉及的相关东西.</p>

<!-- more -->


<h2>Jekyll扩展和Liquid扩展</h2>

<p><a href="http://octopress.org/">Octopress</a>是基于<a href="https://github.com/mojombo/jekyll">Jekyll</a>的, <a href="https://github.com/mojombo/jekyll">Jekyll</a>使用的模版引擎是<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>, 在模版中<code>{{ a | foo | bar}}</code>的<code>foo</code>和<code>bar</code>叫做<strong>Filter</strong>, 后面将把其称为<strong>过滤器</strong>, 在<a href="https://github.com/mojombo/jekyll">Jekyll</a>的<a href="https://github.com/mojombo/jekyll/wiki/Plugins">插件开发文档</a>中有一段是关于过滤器扩展, 我主要是参考这里来做文章开始的扩展.</p>

<h3>Liquid filters</h3>

<p>You can add your own filters to the liquid system much like you can add tags above. Filters are simply modules that export their methods to liquid. All methods will have to take at least one parameter which represents the input of the filter. The return value will be the output of the filter.</p>

<p>``` ruby
module Jekyll
  module AssetFilter</p>

<pre><code>def asset_url(input)      
  "http://www.example.com/#{input}?#{Time.now.to_i}"
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_filter(Jekyll::AssetFilter)
```</p>

<p><strong>Advanced</strong>: you can access the <code>site</code> object through the <code>@context.registers</code> feature of liquid. Registers a hash where arbitrary context objects can be attached to. In Jekyll you can access the site object through registers. As an example, you can access the global configuration (_config.yml) like this: <code>@context.registers[:site].config['cdn']</code>.</p>

<h3>延伸: Octopress Jekyll和Liquid所有可用的过滤器</h3>

<p><a href="http://octopress.org/">Octopress</a>扩展的过滤器在<a href="https://github.com/imathis/octopress/blob/master/plugins/octopress_filters.rb">这里</a>, 主要是从36行开始的这些:</p>

<p>``` ruby plugins/octopress_filters.rb
module OctopressLiquidFilters
  include Octopress::Date</p>

<p>  # Used on the blog index to split posts on the <!--more--> marker
  def excerpt(input)</p>

<pre><code>if input.index(/&lt;!--\s*more\s*--&gt;/i)
  input.split(/&lt;!--\s*more\s*--&gt;/i)[0]
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Checks for excerpts (helpful for template conditionals)
  def has_excerpt(input)</p>

<pre><code>input =~ /&lt;!--\s*more\s*--&gt;/i ? true : false
</code></pre>

<p>  end</p>

<p>  # Summary is used on the Archive pages to return the first block of content from a post.
  def summary(input)</p>

<pre><code>if input.index(/\n\n/)
  input.split(/\n\n/)[0]
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Extracts raw content DIV from template, used for page description as 
  # contains complete sub-template code on main page level
  def raw_content(input)</p>

<pre><code>/&lt;div class="entry-content"&gt;(?&lt;content&gt;[\s\S]*?)&lt;\/div&gt;\s*&lt;(footer|\/article)&gt;/ =~ input
return (content.nil?) ? input : content
</code></pre>

<p>  end</p>

<p>  # Escapes CDATA sections in post content
  def cdata_escape(input)</p>

<pre><code>input.gsub(/&lt;!\[CDATA\[/, '&amp;lt;![CDATA[').gsub(/\]\]&gt;/, ']]&amp;gt;')
</code></pre>

<p>  end</p>

<p>  # Replaces relative urls with full urls
  def expand_urls(input, url='')</p>

<pre><code>url ||= '/'
input.gsub /(\s+(href|src)\s*=\s*["|']{1})(\/[^\"'&gt;]*)/ do
  $1+url+$3
end
</code></pre>

<p>  end</p>

<p>  # Improved version of Liquid's truncate:
  # - Doesn't cut in the middle of a word.
  # - Uses typographically correct ellipsis (…) insted of '...'
  def truncate(input, length)</p>

<pre><code>if input.length &gt; length &amp;&amp; input[0..(length-1)] =~ /(.+)\b.+$/im
  $1.strip + ' &amp;hellip;'
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Improved version of Liquid's truncatewords:
  # - Uses typographically correct ellipsis (…) insted of '...'
  def truncatewords(input, length)</p>

<pre><code>truncate = input.split(' ')
if truncate.length &gt; length
  truncate[0..length-1].join(' ').strip + ' &amp;hellip;'
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Condenses multiple spaces and tabs into a single space
  def condense_spaces(input)</p>

<pre><code>input.gsub(/\s{2,}/, ' ')
</code></pre>

<p>  end</p>

<p>  # Removes trailing forward slash from a string for easily appending url segments
  def strip_slash(input)</p>

<pre><code>if input =~ /(.+)\/$|^\/$/
  input = $1
end
input
</code></pre>

<p>  end</p>

<p>  # Returns a url without the protocol (http://)
  def shorthand_url(input)</p>

<pre><code>input.gsub /(https?:\/\/)(\S+)/ do
  $2
end
</code></pre>

<p>  end</p>

<p>  # Returns a title cased string based on John Gruber's title case http://daringfireball.net/2008/08/title_case_update
  def titlecase(input)</p>

<pre><code>input.titlecase
</code></pre>

<p>  end</p>

<p>end
Liquid::Template.register_filter OctopressLiquidFilters
```</p>

<p><code>def</code>后的名称即过滤器的名称.</p>

<p><a href="https://github.com/mojombo/jekyll">Jekyll</a>扩展的过滤器在<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">这里</a></p>

<p><a href="https://github.com/Shopify/liquid/wiki">Liquid</a>的标准过滤器在<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">这里</a></p>

<h2>Ruby的字符串和正则</h2>

<p>Ruby的字符串可以使用双引号<code>"foo bar"</code>, 也可以使用单引号<code>'foo bar'</code>, 区别是:</p>

<ul>
<li>双引号中可以使用<code>\r\n</code>等转义符号, 以及<code>#{bar}</code>来引入一个变量的值, <code>bar</code>表示一个变量名.</li>
<li>单引号会将所有的字符原样保留, 包括<code>\r\n</code>, 其等价于双引号的<code>\\r\\n</code>.</li>
</ul>


<p>Ruby字符串的替换可以使用<code>gsub</code>方法, 类似一般语言中的<code>replace</code>, 第一个参数仍旧可以为正则, Ruby的文档中代码示例如下:</p>

<p><code>ruby String#gsub
"hello".gsub(/[aeiou]/, '*')                  #=&gt; "h*ll*"
"hello".gsub(/([aeiou])/, '&lt;\1&gt;')             #=&gt; "h&lt;e&gt;ll&lt;o&gt;"
"hello".gsub(/./) {|s| s.ord.to_s + ' '}      #=&gt; "104 101 108 108 111 "
"hello".gsub(/(?&lt;foo&gt;[aeiou])/, '{\k&lt;foo&gt;}')  #=&gt; "h{e}ll{o}"
'hello'.gsub(/[eo]/, 'e' =&gt; 3, 'o' =&gt; '*')    #=&gt; "h3ll*"
</code></p>

<p>我没有完整的看Ruby的语言规范, 根据文档的描述, 示例代码中最后一行<code>'e' =&gt; 3, 'o' =&gt; '*'</code>叫做<strong>Hash</strong>.</p>

<p>另外一个方法<code>sub</code>和<code>gsub</code>区别在: <code>sub</code>只会替换一次, <code>gsub</code>会替换所有的.</p>

<p>更多资料:</p>

<ul>
<li> <a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_stdtypes.html">Ruby基础类型</a>中还有更多关于<code>String</code>类型的基础.</li>
<li> <a href="http://www.ruby-doc.org/core-1.9.3/String.html">类库参考 String</a>中有完整的<code>String</code>可使用.</li>
</ul>


<p>Ruby中正则的使用感觉和Javascript的十分象, 当然也有一些其它的语法, 详细参考<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">Ruby类库参考 Regexp</a></p>

<p>发现一个特别的地方是Javascript中正则可以使用的选项有<code>igm</code>, 而Ruby是<code>imxo</code>, 见<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">这里</a><strong>的Options</strong></p>

      <p><a href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 笔记]]></title>
    
      <category term="Octopress" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/03/18/octopress-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-03-18T14:43:00+08:00</published>
    <updated>2012-03-18T14:43:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/03/18/octopress-note</id>
    <content type="html"><![CDATA[<p>Octopress是一个blog框架, 基于Jekyll, 但是增加了很多方便的脚本, 并提供和github集成.</p>

<p>blog是生成静态页, 配合github-pages可以使用默认的2级域名或者绑定自己的顶级域名使用, 当然也可以部署到自己的服务器上.</p>

<p>这里主要是以我自己的环境来写, 即在Windows下使用Octopress. 因为Win下折腾这个中间出的问题很多.</p>

<!--more -->


<h2>安装前提</h2>

<p>Octopress使用ruby编写, 所以需要ruby, Win下使用RubyInstaller</p>

<ul>
<li><a href="http://rubyinstaller.org">http://rubyinstaller.org</a> 因为神奇的原因我这里无法访问它.</li>
<li><a href="http://rubyforge.org/projects/rubyinstaller/">http://rubyforge.org/projects/rubyinstaller/</a> 这里可以下载到, 我现在看到的RubyInstaller最高版本是1.9.3-p125</li>
</ul>


<p>上面的网页先别关, 还有一个devkit需要下载, 全称Development Kit, 用途是编译一些ruby中使用的c模块, 常见的比如sqlite</p>

<p>那么下载的文件有</p>

<ul>
<li>rubyinstaller-1.9.3-p125.exe</li>
<li>devkit-3.4.5r3-20091110.7z</li>
</ul>


<p>Octopress可以到<a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a> 下载一份zip包, 如果已经有git环境则直接</p>

<pre><code>git clone git://github.com/imathis/octopress.git myoctopress
</code></pre>

<p>我这里使用git, 那么应该会得到一个文件夹(下面提到将名为myoctopress目录), 内容和<a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a> 上显示的一样</p>

<p>前期准备基本完成, 如果没有git而打算使用git看下段</p>

<h3>没有git, 打算使用git</h3>

<p>Win下使用简单的git是TortoiseGit</p>

<ul>
<li><a href="http://code.google.com/p/tortoisegit/">http://code.google.com/p/tortoisegit/</a> 因为神奇的原因它可能有时会无法访问</li>
<li><a href="http://goo.gl/ZpyYx">http://goo.gl/ZpyYx</a> 我在金山快盘的共享, 密码为IYzDsp</li>
</ul>


<p>由于TortoiseGit的后端使用的是Git for Windows <a href="http://code.google.com/p/msysgit/">http://code.google.com/p/msysgit/</a> , 所以下载的文件有</p>

<ul>
<li>TortoiseGit-1.7.6.0-32bit.msi</li>
<li>Git-1.7.8-preview20111206.exe</li>
</ul>


<p>版本可能不同, 名字应该都是相似的, 先安装<code>Git-1.7.8-preview20111206.exe</code>, 然后是<code>TortoiseGit-1.7.6.0-32bit.msi</code>, 然后右键菜单中就有TortoiseGit项了.</p>

<p>建议将Git for Windows安装目录的bin目录加入到环境变量Path中, 默认是<code>C:\Program Files\Git\bin</code>, 因为Octopress中会使用系统中的git命令</p>

<h2>安装Ruby</h2>

<p><code>rubyinstaller-1.9.3-p125.exe</code>建议安装到<code>c:\ruby</code>, 因为devkit中的默认配置就是这个路径</p>

<p>确保<code>C:\Ruby\bin</code>在你的环境变量Path中, 下面使用的ruby gem命令都需要</p>

<p>然后是devkit-3.4.5r3-20091110.7z解压到<code>c:\ruby</code>.</p>

<p>如果不是这个路径, 解压之后还需要到<code>devkit\msys\1.0.11\etc\fstab</code>修改文件内容.</p>

<p>如果路径包含空格, 则需要将路径转换成8.3格式短文件名, 方法是<code>dir /-n</code>, 就可以看到8.3格式的</p>

<p>建议将<code>C:\Ruby\devkit\msys\1.0.11\bin</code>也加入到环境变量Path中, 可以避免后续在安装ruby的fsevent模块时出现一个没有找到命令行的错误</p>

<p>可以运行<code>C:\Ruby\devkit\msys\1.0.11\msys.bat</code>看看, 这个是msys的环境, 一个最小的UNIX环境, 类似Cygwin, 但是原理不同, 更快, 更小, 前面Git for Windows也是基于这个.</p>

<p>打开<code>C:\Ruby\lib\ruby\1.9.1\i386-mingw32\rbconfig.rb</code>, 找到62行附近, 查找<code>-Wno-missing-field-initializers</code>, 将其删除, 我这里是复制一份新的修改并注释原来的</p>

<pre><code>#CONFIG["warnflags"] = "-Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-missing-field-initializers -Wno-long-long"
CONFIG["warnflags"] = "-Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-long-long"
</code></pre>

<p>这么做可以避免在安装ruby的本地c模块时调用gcc失败的问题, 我遇到的是无法安装RedCloth模块, 可能是devkit里面附带的gcc版本旧, 不支持这个选项吧.</p>

<h3>修改gem的源服务器地址</h3>

<p>因为神奇的原因gem可能会下载任何东西失败, 修改后可解决这个问题</p>

<p>gem是ruby的包管理程序, 类似debian的apt-get</p>

<p>打开命令行</p>

<pre><code>gem sources --remove http://rubygems.org/
gem sources -a http://ruby.taobao.org/
gem sources -l
*** CURRENT SOURCES ***

http://ruby.taobao.org
</code></pre>

<p>最后一个命令<code>gem sources -l</code>是查看当前的配置, 确保输出和上述的一致</p>

<h2>安装Octopress</h2>

<p>前面那么多准备都是为了这里, 主要参考http://octopress.org/docs/setup/.</p>

<p>下述的命令行工作目录都是在myoctopress目录, 为了方便, 你可以在myoctopress目录创建一个cmd.cmd, 内容是</p>

<pre><code>@start
</code></pre>

<p>命令行</p>

<pre><code>gem install bundler
</code></pre>

<p>会需要一会时间, 完成后打开myoctopress目录下的Gemfile, 将<code>source "http://rubygems.org"</code>注释掉, 添加<code>source 'http://ruby.taobao.org/'</code>, 如下</p>

<pre><code>#source "http://rubygems.org"
source 'http://ruby.taobao.org/'
</code></pre>

<p>这样可以让bundle不会因为神奇的原因而容易出错, 然后命令行</p>

<pre><code>bundle install
</code></pre>

<p>这会安装Octopress相关依赖的包, 比前一个命令需要更多的时间, 如果打算使用github的话可以看看下一段.</p>

<p><code>bundle install</code>执行完毕后再</p>

<pre><code>rake install
</code></pre>

<p>这个会创建好相关的目录结构</p>

<p>接下来是设置如何部署, 参考<a href="http://octopress.org/docs/deploying/">http://octopress.org/docs/deploying/</a>, 我这里使用github</p>

<h3>github上创建代码库</h3>

<p><a href="http://pages.github.com">http://pages.github.com</a> 上有详细的说明, 我使用的是User Pages, 比如我的用户名是netwjx, 那么创建项目 netwjx.github.com</p>

<p>后续还有关于域名绑定什么的就不多说了, 主要是修改CNAME记录和A记录的</p>

<p>创建好之后能看到其git访问的地址, 比如我是 <code>git@github.com:netwjx/netwjx.github.com.git</code></p>

<p>按照github上的说明将提交用的ssh public key都折腾好, 如果以前用过github最好</p>

<h2>设置部署github</h2>

<p>参考<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a> , 命令行</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>输入git的地址,比如我的是 <code>git@github.com:netwjx/netwjx.github.com.git</code></p>

<p>然后这个命令</p>

<ul>
<li>会把myoctopress中原来clone时的代码库origin改名为octopress,并将刚刚输入git地址作为origin的代码库地址.</li>
<li>会把当前分支名称从master改为source</li>
<li>其它Url的设置还有deploy目录设置等</li>
</ul>


<p>中间需要用到git命令, 所以之前安装Git for Windows后必须将其<code>bin</code>目录加入到Path中</p>

<p>中间可能会在<code>My Octopress Page is coming soon</code>之后出现<code>hellip;</code>不是内部命令之类的错误, 可以不用管, 如果一定不想要出现这个错误可以修改myoctopress目录下的Rakefile, 搜<code>My Octopress Page is coming soon</code>, 在<code>&amp;hellip;</code>前加个<code>^</code>(这个是Windows cmd的转义符), 如下</p>

<pre><code>system "echo 'My Octopress Page is coming soon ^&amp;hellip;' &gt; index.html"
</code></pre>

<p><code>rake setup_github_pages</code>命令最后出现<code>Now you can deploy to xxxxxxx with `rake deploy`</code>, 就表示成功.</p>

<p>接下来</p>

<pre><code>rake generate
</code></pre>

<p>将会在myoctopress的public目录中生成静态的文件, 可以使用下面的命令预览</p>

<pre><code>rake preview
</code></pre>

<p>通过<a href="http://localhost:4000">http://localhost:4000</a>来访问, 现在应该只能看到空白的网站.</p>

<h2>第一篇blog</h2>

<p>参考<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></p>

<pre><code>rake new_post["title"]
</code></pre>

<p>将会在<code>source/_posts</code>目录中创建指定名称的markdown文件, 文件名前面会自动加上年月日. title不能有中文, 因为这个名字会在url中使用, 中文标题可以打开这个markdown文件后自行修改, 刚刚创建的markdown文件内容如下</p>

<pre><code>---
layout: post
title: "title"
date: 2012-03-18
comments: true
categories:
---
</code></pre>

<p>这段除了title改成自己需要的, 别的可以先不管, 详细的见这段开始提到的参考.</p>

<p>如果刚刚没关闭<code>rake preview</code>, 那么现在浏览<a href="http://localhost:4000">http://localhost:4000</a>应该能看到有了新的变化.</p>

<h2>提交到github</h2>

<p>先把<code>rake preview</code>关掉, 命令行</p>

<pre><code>rake deploy
</code></pre>

<p>如果是直接使用TortoiseGit, 而不是Git for Windows的话, 这里将会因为ssh配置相关而发生错误. 修改配置会另起一篇来说, 这里可以自行使用TortoiseGit来提交.</p>

<p>先说明一下目录的情况</p>

<ul>
<li><code>myoctopress</code> 是source分支</li>
<li><code>myoctopress/_deploy</code> 是master分支</li>
</ul>


<p>如果仅仅需要看到网站, 只需要在<code>myoctopress/_deploy</code>目录中用TortoiseGit的<code>Git Sync</code>, Remote Branch选择<code>master</code>, 然后Push即可</p>

<p>如果同时需要将原始的markdown等文件也提交到github, 就是在<code>myoctopress</code>目录做类似的操作.</p>

<p>先在<code>myoctopress</code>目录中把已经修改的文件和<code>source\_posts</code>目录下的新文件都<code>Git Commit -&gt; "source"</code></p>

<p>然后<code>Git Sync</code>, 在Remote Branch选择<code>source</code>, 如果没有这个分支就自己填上, 再Push.</p>

<p>如果Push请确认<code>Git Sync</code>时的Remote URL设置的是<code>origin</code>, 另外一个<code>octopress</code>是Octopress项目的Url, 所以Push会失败, 除非你获得了操作Octopress项目的权限.</p>

<h3>结构说明</h3>

<p>github上的<code>master</code>(网站)和<code>source</code>(原始文件), 与本地的对应分支/目录是平等的关系, 上面提交到github不能理解为从属关系, 了解git的话这个很容易理解.</p>

<p>可以按照需要将<code>myoctopress/_deploy</code> (master分支) 目录放到任何Web服务器(当然会有一些绝对路径有问题)</p>

<p>同样<code>myoctopress</code>(source分支)可以不向github上Push, 而保留在自己本机, 或者Push到U盘等其它备份的地方, 熟悉git的话这是很自然的事.</p>

<h2>还剩下些</h2>

<p>Octopress的文档中github相关都是使用git命令行, 上述的操作在Push时使用的是TortoiseGit,  使用Git for Windows操作github上的代码库以后另起一篇来说.</p>

<p>这些是根据昨天的操作回忆而写的, 所以可能有疏漏和记忆偏差.</p>

<p>Octopress的模版, 评论, 还有其它扩展可以Google, 以后用到也许会写些文章.</p>

<p>Octopress自身的东西在<a href="http://octopress.org/docs/">http://octopress.org/docs/</a>上很全.</p>

<p>我没学过ruby, 上面提及ruby相关的地方很可能概念有错.</p>

      <p><a href="http://netwjx.github.com/blog/2012/03/18/octopress-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
