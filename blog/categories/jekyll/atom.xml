<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: Jekyll | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/jekyll/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-12-08T17:11:06+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Jekyll插件:分类云]]></title>
    
      <category term="Jekyll" />
    
      <category term="Octopress" />
    
      <category term="Plugin" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-06-03T14:55:00+08:00</published>
    <updated>2012-06-03T14:55:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll</id>
    <content type="html"><![CDATA[<p>Octopress默认有存档页, 但是没有能列出所有分类的页面, 我试图找这方面的插件, 但是尝试使用的一些都不是很理想, 所以尝试自己写了一个这样的插件, 效果就如导航栏链接<a href="/blog/categories/">分类</a> 哪样.</p>

<p>以下是代码, 多数代码都是从Jeykll插件示例中抄的, 第一次写实用的ruby程序, 也没多想注释什么的.</p>

<!-- more -->


<p>``` ruby plugins/category_cloud.rb
module Jekyll
  class CategoryCloudPage &lt; Page</p>

<pre><code>def initialize(site, base, dir, cloud)
  @site = site
  @base = base
  @dir = dir
  @name = 'index.html'

  self.process(@name)
  self.read_yaml(File.join(base, '_layouts'), 'category_cloud.html')

  self.data['cloud'] = cloud
end
</code></pre>

<p>  end</p>

<p>  class CategoryCloudGenerator &lt; Generator</p>

<pre><code>safe true

def generate(site)
  if site.layouts.key? 'category_cloud'
    dir = site.config['category_dir'] || 'categories'

    count = site.categories.map do |item|
      [item[0], item[1].length]
    end

    maxsize = 5
    minsize = 1
    min, max = count.map(&amp;:last).minmax

    cloud = site.categories.map do |name, posts|
      {
        "title" =&gt; name,
        "rank"  =&gt; maxsize + minsize - ((posts.length - min) * (maxsize - minsize) / (max - min) + minsize),
        "link"  =&gt; "/#{dir}/#{name.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/"
      }
    end

    index = CategoryCloudPage.new(site, site.source, dir, cloud)
    index.render(site.layouts, site.site_payload)
    index.write(site.dest)
    site.pages &lt;&lt; index
  end
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>``` scss sass/partials/_category_cloud.scss
.category-cloud {</p>

<pre><code>@for $i from 1 through 5 {
    .rank-#{$i} { font-size: nth(230% 210% 180% 140% 90%, $i); }
}
.rank-1, .rank-2, .rank-3, .rank-4 { font-weight:bold; }
span { line-height: 1.25em; padding:0 5px; }
</code></pre>

<p>}
```</p>

<p>需要修改<code>sass/_partials.scss</code>, 结尾加入一行
<code>scss sass/_partials.scss
@import "partials/category_cloud"
</code></p>

<h2>``` html source/_layouts/category_cloud.html</h2>

<p>layout: page
title: 分类</p>

<h2>footer: false</h2>

<p></p>

<div class="category-cloud">
    {% for item in page.cloud %}
        <span class="rank-{{ item.rank }}"><a href="{{ item.link }}">{{ item.title }}</a></span>
    {% endfor %}
</div>


<p>
```</p>

<p>目前只做了生成分类页面, 侧边栏还没有做, 以后有做的冲动了再说吧.</p>

<h2>参考资料</h2>

<ul>
<li><p><a href="http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/">Migrating from Wordpress to Jekyll - Part 2</a> Tag cloud 段落</p></li>
<li><p><a href="http://blog.16codes.com/2007/12/how-to-create-tag-cloud-with-formula.html">How to create a tag cloud? (With formula and sample calculation) </a> 算法</p></li>
<li><p><a href="https://github.com/imathis/octopress/blob/master/plugins/category_generator.rb">octopress / plugins / category_generator.rb</a> Octopress修改的具体分类页面生成插件</p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 和 Jekyll 的笔记]]></title>
    
      <category term="Jekyll" />
    
      <category term="Liquid" />
    
      <category term="Octopress" />
    
      <category term="RegExp" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-05-06T15:57:00+08:00</published>
    <updated>2012-05-06T15:57:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note</id>
    <content type="html"><![CDATA[<p>之前发现<a href="http://octopress.org/">Octopress</a>产生的页面中, <strong>meta</strong>标签的<strong>content</strong>属性没有处理换行, 今天尝试自己写个插件来处理这个地方, 因为没有学过Ruby, 下面的操作基本都是临时找资料, 所以记录一些重点.</p>

<p>插件代码如下</p>

<p>``` ruby plugins/html_attr_filter.rb</p>

<h1>coding: utf-8</h1>

<h1>html attribute filter</h1>

<p>module HtmlAttrFilters</p>

<pre><code>def html_attr(input)
    input.gsub(/\r\n|\r|\n/, "\r\n"=&gt;'&amp;#13;&amp;#10;', "\r"=&gt;'&amp;#13;', "\n"=&gt;'&amp;#10;')
end
</code></pre>

<p>end</p>

<p>Liquid::Template.register_filter HtmlAttrFilters
```</p>

<p>修改<code>source/_includes/head.html</code>中<code>&lt;meta name="description"</code>所在的行</p>

<p><code>html source/_includes/head.html
  &lt;meta name="description" content="{{ description | strip_html | condense_spaces | truncate:150 | html_attr }}"&gt;
</code></p>

<p>然后<code>rake generate</code>就能看到<code>&lt;meta name="description"</code>的<strong>content</strong>已经不会有换行了, 下面说说中间涉及的相关东西.</p>

<!-- more -->


<h2>Jekyll扩展和Liquid扩展</h2>

<p><a href="http://octopress.org/">Octopress</a>是基于<a href="https://github.com/mojombo/jekyll">Jekyll</a>的, <a href="https://github.com/mojombo/jekyll">Jekyll</a>使用的模版引擎是<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>, 在模版中<code>{{ a | foo | bar}}</code>的<code>foo</code>和<code>bar</code>叫做<strong>Filter</strong>, 后面将把其称为<strong>过滤器</strong>, 在<a href="https://github.com/mojombo/jekyll">Jekyll</a>的<a href="https://github.com/mojombo/jekyll/wiki/Plugins">插件开发文档</a>中有一段是关于过滤器扩展, 我主要是参考这里来做文章开始的扩展.</p>

<h3>Liquid filters</h3>

<p>You can add your own filters to the liquid system much like you can add tags above. Filters are simply modules that export their methods to liquid. All methods will have to take at least one parameter which represents the input of the filter. The return value will be the output of the filter.</p>

<p>``` ruby
module Jekyll
  module AssetFilter</p>

<pre><code>def asset_url(input)      
  "http://www.example.com/#{input}?#{Time.now.to_i}"
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_filter(Jekyll::AssetFilter)
```</p>

<p><strong>Advanced</strong>: you can access the <code>site</code> object through the <code>@context.registers</code> feature of liquid. Registers a hash where arbitrary context objects can be attached to. In Jekyll you can access the site object through registers. As an example, you can access the global configuration (_config.yml) like this: <code>@context.registers[:site].config['cdn']</code>.</p>

<h3>延伸: Octopress Jekyll和Liquid所有可用的过滤器</h3>

<p><a href="http://octopress.org/">Octopress</a>扩展的过滤器在<a href="https://github.com/imathis/octopress/blob/master/plugins/octopress_filters.rb">这里</a>, 主要是从36行开始的这些:</p>

<p>``` ruby plugins/octopress_filters.rb
module OctopressLiquidFilters
  include Octopress::Date</p>

<p>  # Used on the blog index to split posts on the <!--more--> marker
  def excerpt(input)</p>

<pre><code>if input.index(/&lt;!--\s*more\s*--&gt;/i)
  input.split(/&lt;!--\s*more\s*--&gt;/i)[0]
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Checks for excerpts (helpful for template conditionals)
  def has_excerpt(input)</p>

<pre><code>input =~ /&lt;!--\s*more\s*--&gt;/i ? true : false
</code></pre>

<p>  end</p>

<p>  # Summary is used on the Archive pages to return the first block of content from a post.
  def summary(input)</p>

<pre><code>if input.index(/\n\n/)
  input.split(/\n\n/)[0]
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Extracts raw content DIV from template, used for page description as 
  # contains complete sub-template code on main page level
  def raw_content(input)</p>

<pre><code>/&lt;div class="entry-content"&gt;(?&lt;content&gt;[\s\S]*?)&lt;\/div&gt;\s*&lt;(footer|\/article)&gt;/ =~ input
return (content.nil?) ? input : content
</code></pre>

<p>  end</p>

<p>  # Escapes CDATA sections in post content
  def cdata_escape(input)</p>

<pre><code>input.gsub(/&lt;!\[CDATA\[/, '&amp;lt;![CDATA[').gsub(/\]\]&gt;/, ']]&amp;gt;')
</code></pre>

<p>  end</p>

<p>  # Replaces relative urls with full urls
  def expand_urls(input, url='')</p>

<pre><code>url ||= '/'
input.gsub /(\s+(href|src)\s*=\s*["|']{1})(\/[^\"'&gt;]*)/ do
  $1+url+$3
end
</code></pre>

<p>  end</p>

<p>  # Improved version of Liquid's truncate:
  # - Doesn't cut in the middle of a word.
  # - Uses typographically correct ellipsis (…) insted of '...'
  def truncate(input, length)</p>

<pre><code>if input.length &gt; length &amp;&amp; input[0..(length-1)] =~ /(.+)\b.+$/im
  $1.strip + ' &amp;hellip;'
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Improved version of Liquid's truncatewords:
  # - Uses typographically correct ellipsis (…) insted of '...'
  def truncatewords(input, length)</p>

<pre><code>truncate = input.split(' ')
if truncate.length &gt; length
  truncate[0..length-1].join(' ').strip + ' &amp;hellip;'
else
  input
end
</code></pre>

<p>  end</p>

<p>  # Condenses multiple spaces and tabs into a single space
  def condense_spaces(input)</p>

<pre><code>input.gsub(/\s{2,}/, ' ')
</code></pre>

<p>  end</p>

<p>  # Removes trailing forward slash from a string for easily appending url segments
  def strip_slash(input)</p>

<pre><code>if input =~ /(.+)\/$|^\/$/
  input = $1
end
input
</code></pre>

<p>  end</p>

<p>  # Returns a url without the protocol (http://)
  def shorthand_url(input)</p>

<pre><code>input.gsub /(https?:\/\/)(\S+)/ do
  $2
end
</code></pre>

<p>  end</p>

<p>  # Returns a title cased string based on John Gruber's title case http://daringfireball.net/2008/08/title_case_update
  def titlecase(input)</p>

<pre><code>input.titlecase
</code></pre>

<p>  end</p>

<p>end
Liquid::Template.register_filter OctopressLiquidFilters
```</p>

<p><code>def</code>后的名称即过滤器的名称.</p>

<p><a href="https://github.com/mojombo/jekyll">Jekyll</a>扩展的过滤器在<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">这里</a></p>

<p><a href="https://github.com/Shopify/liquid/wiki">Liquid</a>的标准过滤器在<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">这里</a></p>

<h2>Ruby的字符串和正则</h2>

<p>Ruby的字符串可以使用双引号<code>"foo bar"</code>, 也可以使用单引号<code>'foo bar'</code>, 区别是:</p>

<ul>
<li>双引号中可以使用<code>\r\n</code>等转义符号, 以及<code>#{bar}</code>来引入一个变量的值, <code>bar</code>表示一个变量名.</li>
<li>单引号会将所有的字符原样保留, 包括<code>\r\n</code>, 其等价于双引号的<code>\\r\\n</code>.</li>
</ul>


<p>Ruby字符串的替换可以使用<code>gsub</code>方法, 类似一般语言中的<code>replace</code>, 第一个参数仍旧可以为正则, Ruby的文档中代码示例如下:</p>

<p><code>ruby String#gsub
"hello".gsub(/[aeiou]/, '*')                  #=&gt; "h*ll*"
"hello".gsub(/([aeiou])/, '&lt;\1&gt;')             #=&gt; "h&lt;e&gt;ll&lt;o&gt;"
"hello".gsub(/./) {|s| s.ord.to_s + ' '}      #=&gt; "104 101 108 108 111 "
"hello".gsub(/(?&lt;foo&gt;[aeiou])/, '{\k&lt;foo&gt;}')  #=&gt; "h{e}ll{o}"
'hello'.gsub(/[eo]/, 'e' =&gt; 3, 'o' =&gt; '*')    #=&gt; "h3ll*"
</code></p>

<p>我没有完整的看Ruby的语言规范, 根据文档的描述, 示例代码中最后一行<code>'e' =&gt; 3, 'o' =&gt; '*'</code>叫做<strong>Hash</strong>.</p>

<p>另外一个方法<code>sub</code>和<code>gsub</code>区别在: <code>sub</code>只会替换一次, <code>gsub</code>会替换所有的.</p>

<p>更多资料:</p>

<ul>
<li> <a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_stdtypes.html">Ruby基础类型</a>中还有更多关于<code>String</code>类型的基础.</li>
<li> <a href="http://www.ruby-doc.org/core-1.9.3/String.html">类库参考 String</a>中有完整的<code>String</code>可使用.</li>
</ul>


<p>Ruby中正则的使用感觉和Javascript的十分象, 当然也有一些其它的语法, 详细参考<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">Ruby类库参考 Regexp</a></p>

<p>发现一个特别的地方是Javascript中正则可以使用的选项有<code>igm</code>, 而Ruby是<code>imxo</code>, 见<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">这里</a><strong>的Options</strong></p>

      <p><a href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Octopress中使用代码高亮]]></title>
    
      <category term="Jekyll" />
    
      <category term="Octopress" />
    
    <link href="http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-21T16:45:00+08:00</published>
    <updated>2012-04-21T16:45:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress</id>
    <content type="html"><![CDATA[<p>在<a href="http://octopress.org">Octopress</a>中使用代码高亮, 实际就是<a href="http://jekyllrb.com/">Jekyll</a>的<a href="http://pygments.org/">Pygments</a>代码高亮, 效果如下</p>

<p>源</p>

<pre><code>``` js Javascript Hello World 
    alert('hello world');
```
</code></pre>

<p>效果</p>

<p>``` js Javascript Hello World</p>

<pre><code>alert('hello world');
</code></pre>

<p>```</p>

<p>而默认安装<a href="http://octopress.org">Octopress</a>时对代码高亮还是不支持的, 还需要安装<a href="http://python.org/">Python</a>, 我没有使用<a href="http://www.activestate.com/activepython">ActivePython</a>, 而是<a href="http://python.org/getit/">CPython</a>, 安装好后应该会有<code>c:\Windows\System32\python27.dll</code>.</p>

<p>但是现在还可能会出现<code>Could not open library’.dll’</code>的问题.</p>

<!-- more -->


<p>下面的修改会和版本有关, 我目前使用的Octopress版本是<code>2.0 2012/3/8 Commit:9f40242b1e7eb0098f0ef3c508c7bed7e647b982</code></p>

<p>将<code>Gemfile.lock</code>的<strong>33行</strong></p>

<pre><code>pygments.rb (0.1.3)
</code></pre>

<p>修改为</p>

<pre><code>pygments.rb (0.2.11)
</code></pre>

<p>以及<strong>40行</strong></p>

<pre><code>rubypython (0.5.1)
</code></pre>

<p>修改为</p>

<pre><code>rubypython (0.5.3)
</code></pre>

<p>注意上面的修改不要改变原有的缩进, 然后在命令行下执行</p>

<pre><code>bundle install
</code></pre>

<p>这将会使用<a href="http://gembundler.com/">bundler</a>这个依赖管理工具安装新版本的<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>和<a href="http://rubypython.rubyforge.org/">rubypython</a>.</p>

<p>如果还有问题请参考<a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a>的<strong>部署Python</strong>部分.</p>

<h2>Octopress代码高亮的工作原理</h2>

<p>如果上面的还是不能使用代码高亮就需要了解原理之后在自行判断如何处理.</p>

<p><a href="http://octopress.org">Octopress</a>的代码高亮实际是<a href="http://jekyllrb.com/">Jekyll</a>的代码高亮, 其中插件<code>Backtick Code Blocks</code> <code>Code Blocks</code> <code>Include Code</code> 这些插件都有代码高亮功能, 其代码高亮都使用<code>Pygments Code</code>插件, 这个插件如名字所示, 其使用的gem库是<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>.</p>

<p><a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>包含有<a href="http://pygments.org/">pygments</a>的代码, 可以在Ruby安装目录下的<code>\lib\ruby\gems\1.9.1\gems\pygments.rb-0.2.11\vendor</code>中看到.</p>

<p>使用<a href="http://gembundler.com/">bundler</a>安装<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>时会自动的安装它依赖的<a href="http://rubypython.rubyforge.org/">rubypython</a>.</p>

<p><a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>使用<a href="http://rubypython.rubyforge.org/">rubypython</a>的方式为<a href="https://github.com/ffi/ffi">ffi</a>, 这个是ruby中调用C语言写的库的工具, 在这里是调用<code>python27.dll</code>.</p>

<h2>备用方案</h2>

<p>上述的方法还是不能正常使用代码高亮的话, 还可以使用一些后备的方法.</p>

<h3>Gist插件</h3>

<p>在<a href="https://gist.github.com/">github:gist</a>上贴代码, 并使用类似下面的代码</p>

<pre><code>{% gist 2436351 %}
</code></pre>

<p>将展示为</p>

<p><div><script src='https://gist.github.com/2436351.js?file='></script>
<noscript><pre><code>var parser = document.createElement('a');
parser.href = &quot;http://example.com:3000/pathname/?search=test#hash&quot;;

parser.protocol; // =&gt; &quot;http:&quot;
parser.host;     // =&gt; &quot;example.com&quot;
parser.port;     // =&gt; &quot;3000&quot;
parser.pathname; // =&gt; &quot;/pathname/&quot;
parser.search;   // =&gt; &quot;?search=test&quot;
parser.hash;     // =&gt; &quot;#hash&quot;</code></pre></noscript></div>
</p>

<p><a href="http://octopress.org/docs/plugins/gist-tag/">Gist Tag 插件的更多资料</a></p>

<h3>jsFiddle插件</h3>

<p>这个更适合用于web前端相关的html css js的展示, 使用类似下面的代码</p>

<pre><code>{% jsfiddle 3h5A4/3 %}
</code></pre>

<p>将展示为</p>

<p><iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/3h5A4/3/embedded/js,resources,html,css,result/light/"></iframe></p>

<p><a href="http://octopress.org/docs/plugins/jsfiddle-tag/">jsFiddle Tag 插件的更多资料</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
