<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: CSharp | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/csharp/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-10-13T20:21:40+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Unicode转义(\uXXXX)的编码和解码]]></title>
    
      <category term="CSharp" />
    
      <category term="Decode" />
    
      <category term="Encode" />
    
      <category term="Java" />
    
      <category term="Javascript" />
    
      <category term="RegExp" />
    
    <link href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-07T12:23:00+08:00</published>
    <updated>2012-07-07T12:23:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string</id>
    <content type="html"><![CDATA[<p>在涉及Web前端开发时, 有时会遇到<code>\uXXXX</code>格式表示的字符, 其中<code>XXXX</code>是16进制数字的字符串表示形式, 在js中这个叫Unicode转义字符, 和<code>\n</code> <code>\r</code>同属于转义字符. 在其他语言中也有类似的, 可能还有其它变形的格式.</p>

<p>多数时候遇到需要解码的情况多点, 所以会先介绍解码decode, 后介绍编码encode.</p>

<p>下文会提供Javascript C# Java三种语言下不同方法的实现和简单说明, 会涉及到正则和位运算的典型用法.</p>

<!-- more -->


<h2>Javascript的实现</h2>

<h3>解码的实现</h3>

<p>``` js
function decode(s) {</p>

<pre><code>return unescape(s.replace(/\\(u[0-9a-fA-F]{4})/gm, '%$1'));
</code></pre>

<p>}
```</p>

<p><code>unescape</code>是用来处理<code>%uXXXX</code>这样格式的字符串, 将<code>\uXXXX</code>替换成<code>%uXXXX</code>后<code>unescape</code>就可以处理了.</p>

<h3>编码的实现</h3>

<p>``` js
function encode1(s) {</p>

<pre><code>return escape(s).replace(/%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm, function($0, $1, $2) {
    return $1 &amp;&amp; '\\' + $1.toLowerCase() || unescape($2);
});
</code></pre>

<p>}
```</p>

<p>和解码中相对应, 使用<code>escape</code>编码, 然后将<code>%uXXXX</code>替换为<code>\uXXXX</code>, 因为<code>escape</code>还可能把一些字符编码成<code>%XX</code>的格式, 所以这些字符还需要使用<code>unescape</code>还原回来.</p>

<p><code>escape</code>编码结果<code>%uXXXX</code>中的<code>XXXX</code>是大写的, 所以后面的<code>replace</code>只处理大写的<code>A-F</code>.</p>

<h3>另一种编码的实现</h3>

<p>不使用正则和<code>escape</code></p>

<p>``` js
function encode2(s) {</p>

<pre><code>var i, c, ret = [],
    pad = '000';
for (i = 0; i &lt; s.length; i++) {
    c = s.charCodeAt(i);
    if (c &gt; 256) {
        c = c.toString(16);
        ret[i] = '\\u' + pad.substr(0, 4 - c.length) + c;
    } else {
        ret[i] = s[i];
    }
}
return ret.join('');
</code></pre>

<p>}
```</p>

<p>遍历字符串中的字符, 那些<code>charCode</code>大于256的会转换成16进制字符串<code>c.toString(16)</code>, 如果不足4位则左边补0<code>pad.substr(0, 4 - c.length)</code>. 结尾将遍历的结果合并成字符串返回.</p>

<h2>C#的实现</h2>

<h3>解码的实现</h3>

<p>``` csharp
static Regex reUnicode = new Regex(@"\u([0-9a-fA-F]{4})", RegexOptions.Compiled);</p>

<p>public static string Decode(string s)
{</p>

<pre><code>return reUnicode.Replace(s, m =&gt;
{
    short c;
    if (short.TryParse(m.Groups[1].Value, System.Globalization.NumberStyles.HexNumber, CultureInfo.InvariantCulture, out c))
    {
        return "" + (char)c;
    }
    return m.Value;
});
</code></pre>

<p>}
```</p>

<p>正则和js中的一样, 将<code>XXXX</code>转换以16进制<code>System.Globalization.NumberStyles.HexNumber</code>解析为<code>short</code>类型, 然后直接<code>(char)c</code>就能转换成对应的字符, <code>"" + (char)c</code>用于转换成字符串类型返回.</p>

<p>由于正则中也有<code>\uXXXX</code>, 所以需要写成<code>\\uXXXX</code>来表示匹配字符串<code>\uXXXX</code>, 而不是具体的字符.</p>

<p>上面使用到了Lambda, 需要至少dotnet 4的SDK才能编译通过, 可以在dotnet 2下运行.</p>

<h3>编码的实现</h3>

<p>``` csharp
static Regex reUnicodeChar = new Regex(@"[<sup>\u0000-\u00ff]",</sup> RegexOptions.Compiled);</p>

<p>public static string Encode(string s)
{</p>

<pre><code>return reUnicodeChar.Replace(s, m =&gt; string.Format(@"\u{0:x4}", (short)m.Value[0]));
</code></pre>

<p>}
```</p>

<p>和C#的解码实现正好相反, 0-255之外的字符, 从<code>char</code>转换成<code>short</code>, 然后<code>string.Format</code>以16进制, 至少输出4位.</p>

<h2>Java的实现</h2>

<h3>解码的实现</h3>

<p>和C#相似的, 使用正则</p>

<p>``` java
static final Pattern reUnicode = Pattern.compile("\\u([0-9a-zA-Z]{4})");</p>

<p>public static String decode1(String s) {</p>

<pre><code>Matcher m = reUnicode.matcher(s);
StringBuffer sb = new StringBuffer(s.length());
while (m.find()) {
    m.appendReplacement(sb,
            Character.toString((char) Integer.parseInt(m.group(1), 16)));
}
m.appendTail(sb);
return sb.toString();
</code></pre>

<p>}
```</p>

<p>Java语言没有内嵌正则语法, 也没有类似C#的<code>@"\u1234"</code>原始形式字符串的语法, 所以要表示正则中匹配<code>\</code>, 就需要<code>\\\\</code>, 其中2个是用于Java中字符转义, 2个是正则中的字符转义.</p>

<p>Java语言中没有设计函数或者委托的语法, 所以它的正则库提供的是<code>find</code> <code>appendReplacement</code> <code>appendTail</code>这些方法的组合, 等价于js和C#中的<code>replace</code>.</p>

<p>这里使用<code>StringBuffer</code>类型是由于<code>appendReplacement</code>只接受这个类型, <code>StringBuffer</code>有线程安全的额外操作, 所以性能差一点. 也许第三方的正则库能把API设计的更好用点.</p>

<p><code>Integer.parseInt(m.group(1), 16)</code>用于解析为<code>int</code>类型, 之后再<code>(char)</code>, 以及<code>Character.toString</code>转换成字符串.</p>

<h3>解码的另一种实现</h3>

<p>因为<code>StringBuffer</code>的原因, 不使用正则的实现</p>

<p>``` java
public static String decode2(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length());
char[] chars = s.toCharArray();
for (int i = 0; i &lt; chars.length; i++) {
    char c = chars[i];
    if (c == '\\' &amp;&amp; chars[i + 1] == 'u') {
        char cc = 0;
        for (int j = 0; j &lt; 4; j++) {
            char ch = Character.toLowerCase(chars[i + 2 + j]);
            if ('0' &lt;= ch &amp;&amp; ch &lt;= '9' || 'a' &lt;= ch &amp;&amp; ch &lt;= 'f') {
                cc |= (Character.digit(ch, 16) &lt;&lt; (3 - j) * 4);
            } else {
                cc = 0;
                break;
            }
        }
        if (cc &gt; 0) {
            i += 5;
            sb.append(cc);
            continue;
        }
    }
    sb.append(c);
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>手工做就是麻烦很多, 代码中也一坨的符号.</p>

<p>遍历所有字符<code>chars</code>, 检测到<code>\u</code>这样的字符串, 检测后续的4个字符是否是16进制数字的字符表示. 因为<code>Character.isDigit</code>会把一些其它语系的数字也算进来, 所以保险的做法<code>'0' &lt;= ch &amp;&amp; ch &lt;= '9'</code>.</p>

<p><code>Character.digit</code>会把<code>0-9</code>返回为<code>int</code>类型的0-9, 第2个参数是16时会把<code>a-f</code>返回为<code>int</code>类型的10-15.</p>

<p>剩下的就是用<code>|=</code>把各个部分的数字合并到一起, 转换成char类型. 还有一些调整遍历位置等.</p>

<h3>编码的实现</h3>

<p>考虑到Java正则的杯具, 还是继续手工来吧, 相对解码来说代码少点.</p>

<p>``` java
public static String encode(String s) {</p>

<pre><code>StringBuilder sb = new StringBuilder(s.length() * 3);
for (char c : s.toCharArray()) {
    if (c &lt; 256) {
        sb.append(c);
    } else {
        sb.append("\\u");
        sb.append(Character.forDigit((c &gt;&gt;&gt; 12) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 8) &amp; 0xf, 16));
        sb.append(Character.forDigit((c &gt;&gt;&gt; 4) &amp; 0xf, 16));
        sb.append(Character.forDigit((c) &amp; 0xf, 16));
    }
}
return sb.toString();
</code></pre>

<p>}
```</p>

<p>对应于上文Java编码的实现正好是反向的实现, 依旧遍历字符, 遇到大于256的字符, 用位运算提取出4部分并使用<code>Character.forDigit</code>转换成16进制数对应的字符.</p>

<p>剩下就是<code>sb.toString()</code>返回了.</p>

<h2>总结</h2>

<ul>
<li>编码从逻辑上比解码简单点.</li>
<li>对付字符串, js还是最顺手的, 也方便测试.</li>
<li>位运算的性能很高.</li>
<li>Java的正则库设计的很不方便, 可以考虑第三方.</li>
<li>Java的语法设计现在看来呆板, 落后, 也没有js那种灵活.</li>
<li>上文Java的非正则实现可以写成等价的C#代码.</li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用.Net Remoting的IpcChannel时发生 RemotingException : 拒绝访问 异常]]></title>
    
      <category term="CSharp" />
    
      <category term="IPC" />
    
      <category term="Remoting" />
    
      <category term="Windows" />
    
    <link href="http://netwjx.github.com/blog/2012/06/03/remotingexception-access-is-denied-in-net-remoting-ipcchannel/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-06-03T12:09:00+08:00</published>
    <updated>2012-06-03T12:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/06/03/remotingexception-access-is-denied-in-net-remoting-ipcchannel</id>
    <content type="html"><![CDATA[<p>在一个使用IPC进行单机跨进称的通讯时发生了 <code>RemotingException : 拒绝访问</code> 异常, 期间查找异常原因的时候发现中文不大容易搜到正确的答案, 也可能是因为Remoting是已经不再支持的技术吧, 因为历史的原因还不能使用WCF, 所以这里将这个异常的原因和解决办法介绍一下.</p>

<p>发生这个异常的场景是一个Windows服务程序在IPC信道注册, 另外一个桌面程序连接到IPC信道通讯, 重点是在IPC信道注册的程序是Windows服务, 默认情况下它将运行在LocalSystem帐号下, 连接这个IPC信道的是另外的用户启动的进程.</p>

<p>错误的原因是向IPC信道注册时, 默认的授权是相同用户的进程才可以访问这个IPC信道, 可以通过下面的代码修改默认授权:</p>

<!-- more -->


<p><code>csharp
var dict = new Dictionary&lt;string, string&gt;();
dict["name"] = dict["portName"] = portName;
dict["authorizedGroup"] = "Everyone";
serverChannel = new IpcServerChannel(dict, null);
ChannelServices.RegisterChannel(serverChannel, false);
</code></p>

<p>其中<code>portName</code>变量是IPC信道的名称</p>

<p>在IIS中运行的Web应用一般也是由一个<code>IUSER_xxxxx</code>的用户运行, 所以还有通过<code>web.config</code>配置方式在IPC信道注册的方式:</p>

<p>``` xml
&lt;?xml version="1.0"?><br/>
<configuration><br/>
 &lt;system.runtime.remoting><br/>
   <application></p>

<pre><code> &lt;client&gt;  
   &lt;wellknown type="fragrank.FragRankRemoting,FragRankLogic" url="ipc://FragRankChannel/FragRank" /&gt;  
 &lt;/client&gt;  
 &lt;channels&gt;  
   &lt;channel ref="ipc" authorizedGroup="Everyone"&gt;  
     &lt;clientProviders&gt;  
      &lt;formatter ref="binary"/&gt;  
     &lt;/clientProviders&gt;  
   &lt;/channel&gt;  
 &lt;/channels&gt;  
</code></pre>

<p>   </application><br/>
 &lt;/system.runtime.remoting><br/>
</configuration>
```</p>

<h2>参考资料</h2>

<ul>
<li><p><a href="http://www.codedblog.com/2007/09/01/calling-a-windows-service-from-aspnet-via-remoting-ipcchannel/">Calling a Windows Service from ASP.NET via Remoting &amp; IpcChannel</a></p>

<p>MSDN的文档对属性值并没有太多的说明, 这个里面有多个示例.</p></li>
<li><p><a href="http://msdn.microsoft.com/zh-cn/library/bb397847.aspx">信道属性</a></p></li>
<li><p><a href="http://msdn.microsoft.com/zh-cn/library/bb397831.aspx">服务器信道属性</a></p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/06/03/remotingexception-access-is-denied-in-net-remoting-ipcchannel/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#委托和Lambda表达式]]></title>
    
      <category term="CSharp" />
    
      <category term="Delegate" />
    
      <category term="Functional" />
    
      <category term="Lambda" />
    
    <link href="http://netwjx.github.com/blog/2012/05/19/csharp-delegate-and-lambda/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-05-19T19:54:00+08:00</published>
    <updated>2012-05-19T19:54:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/05/19/csharp-delegate-and-lambda</id>
    <content type="html"><![CDATA[<p>C#算是个多范式编程语言, 除了传统的OO风格, 还可以在部分范围中使用函数式编程的风格, 这里整理一下C#中委托和Lambda实践中的各种写法.</p>

<p>这里不会解释具体的代码含义, 仅仅介绍写法, 可能不适合刚开始学习.</p>

<h2>声明委托类型</h2>

<p>使用前必须要有具体的委托类型, 下面的例子中会使用到这些常用的委托类型</p>

<p>``` csharp</p>

<pre><code>delegate void Action();

delegate void Action&lt;in T1, in T2&gt;(T1 arg1, T2 arg2);

delegate bool Predicate&lt;in T&gt;(T obj);

delegate TResult Func&lt;in T1, in T2, out TResult&gt;(T1 arg1, T2 arg2);
</code></pre>

<p>```</p>

<p><code>Action</code>和<code>Action&lt;in T1, in T2&gt;</code>是在dotnet 3.5 sp1出现的一个很实用的委托, 类似的还有1-16个参数的, 这里主要使用这2种.</p>

<p><code>Predicate</code>是从dotnet 2.0就出现的, 一般是在泛型集合的查询中使用.</p>

<p><code>Func&lt;in T1, in T2, out TResult&gt;</code>也是dotnet 3.5 sp1出现的, 和<code>Action</code>基本一样, 也有1-16个参数的, 和Action不同的是这个委托都声明有返回值类型, 而不是<code>Action</code>的void.</p>

<!-- more -->


<h2>最初的写法</h2>

<p>最简单的<code>Action</code></p>

<p>``` csharp</p>

<pre><code>static void Main(string[] args)
{
    Action foo = new Action(Foo);
}

static void Foo()
{
    // ...
}
</code></pre>

<p>```</p>

<p>对于复杂的委托, 比如<code>Func</code></p>

<p>``` csharp</p>

<pre><code>static void Main(string[] args)
{
    Func&lt;int, string, bool&gt; foo = new Func&lt;int, string, bool&gt;(Foo);
}

static bool Foo(int i, string s)
{
    // ...
}
</code></pre>

<p>```</p>

<h2>匿名委托</h2>

<p>和上一个区别就是不需要创建<code>Foo</code>方法了</p>

<p>``` csharp</p>

<pre><code>Action foo = new Action(delegate()
{
    // ...
});
</code></pre>

<p>```</p>

<p><code>Predicate</code>就是这样的</p>

<p>``` csharp</p>

<pre><code>Predicate&lt;string&gt; foo = new Predicate&lt;string&gt;(delegate(string s)
{
    return false;
});
</code></pre>

<p>```</p>

<p>右边的<code>new xxxx()</code> 可以省略</p>

<p>``` csharp</p>

<pre><code>Action&lt;int, string&gt; foo = delegate(int i, string s)
{
    // ...
};
</code></pre>

<p>```</p>

<p>由于也是一行代码, 结尾的分号还是必须的.</p>

<p>也适用于<strong>最初的写法</strong></p>

<p>``` csharp</p>

<pre><code>static void Main(string[] args)
{
    Func&lt;int, string, bool&gt; foo = Foo;
}

static bool Foo(int i, string s)
{
    // ...
}
</code></pre>

<p>```</p>

<p>如果使用的是dotnet 4的编译器, 可以使用<code>var</code>, 看起来就像是颠倒过来了</p>

<p>``` csharp</p>

<pre><code>var foo = new Func&lt;int, string, bool&gt;(delegate(int i, string s)
{
    return false;
});
</code></pre>

<p>```</p>

<p><code>var</code>是编译器提供的<strong>魔法</strong>, 会自动推导<code>=</code>右边的类型, 当然前提是右边的可以推导出来类型, 无法推导出来就会编译错误.</p>

<h2>Lambda登场</h2>

<p>``` csharp</p>

<pre><code>Action foo = () =&gt; Console.WriteLine("hello, world");

Action&lt;int, string&gt; foo = (i, s) =&gt; Console.WriteLine(i + s);

Predicate&lt;string&gt; foo = s =&gt; s.startsWith("bar");

Func&lt;int, string, bool&gt; foo = (i, s) =&gt; s.Length &lt; i;
</code></pre>

<p>```</p>

<p>语法方面, 无参数要写成<code>()</code>, 1个参数可以省略括号, 2个及更多参数则必须括号<code>()</code>; <code>=&gt;</code> 右边必须有表达式; 表达式结果必须是委托的返回值类型, 如果委托返回值类型是void则无所谓表达式结果类型.</p>

<p>Lambda也算是编译器魔法, 上述Lambda表达式特点都是左边的委托类型明确, 即委托的参数, 返回值也是明确的, 和<code>var</code>相似, 类型是可推导出来的, 那么就可以使用Lambda, 这样就省了写一堆的参数类型和return语句.</p>

<p>实际使用中可能是这样的</p>

<p>``` csharp</p>

<pre><code>List&lt;string&gt; list = new List&lt;string&gt;();
// ...

list.FindAll(s =&gt; s.startsWith("bar"));
</code></pre>

<p>```</p>

<p>即除了声明变量, 参数是明确的委托类型时, 也可以使用Lambda.</p>

<p>Lambda的<code>=&gt;</code>右边也可以是多行代码</p>

<p>``` csharp</p>

<pre><code>Func&lt;int, string, bool&gt; foo = (i, s) =&gt;
{
    return false;
};

ThreadPool.QueueUserWorkItem(o =&gt;
{
    // ...
});
</code></pre>

<p>```</p>

<h2>委托可以叠加</h2>

<p>``` csharp</p>

<pre><code>Action foo;
// ...
foo += ()=&gt; Console.WriteLine("bar");

Func&lt;int, string, bool&gt; foo
// ...
foo += (i, s) =&gt; s.Length &lt; i;
</code></pre>

<p>```</p>

<p>执行时会按照先加先执行的顺序, 如果有返回值, 那么将使用最后加进来的委托的返回值.</p>

<p>同样也可以从叠加的里面减去, 不过这里是按引用, 所以需要保留一个加进去的委托引用.</p>

<p>``` csharp</p>

<pre><code>Action foo;
// ...
Action bar = () =&gt; Console.WriteLine("foo");
foo+=bar;
// ...
foo-=bar;
</code></pre>

<p>```</p>

<h3>事件</h3>

<p>C#提供了一个<code>event</code>关键字用于声明一种特殊的委托, 可以在类外部<code>+=</code> <code>-=</code>, 但是执行委托只能在内部</p>

<p>``` csharp</p>

<pre><code>event EventHandle Foo;

void Bar()
{
    Foo += (o, e) = Console.WriteLine("Foo Event");
}

void Bar2()
{
    Foo(new object(), EventArgs.Empty);
}
</code></pre>

<p>```</p>

<p>默认的事件实现中<code>+=</code> <code>-=</code>是线程安全的, 这点可以在反编译<code>event</code>的源码中看到, 如果要自行实现<code>event</code>的<code>+=</code> <code>-=</code>则需要自行处理线程安全.</p>

<h2>总结</h2>

<p>使用委托可以避免创建太多的中间方法, 而使用Lambda, 则可以使在写委托的时候避免大量的<code>delegate</code>关键字和重复的委托参数类型声明.</p>

<p>也许会让代码不是很容易理解, 但是只要遵循一些约定, 熟悉了还是没关系的.</p>

<p>重要的是这会少写很多重复的东西, 同样修改时也少修改一些东西.</p>

<h2>参考链接</h2>

<ul>
<li><a href="http://msdn.microsoft.com/zh-cn/library/aa664629%28v=vs.71%29">C# 语言规范 1.10 委托</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/ms173171%28v=vs.80%29.aspx">委托（C# 编程指南）</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/900fyy8e%28v=vs.80%29.aspx">委托（C# 参考）</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/x53a06bb%28v=vs.80%29.aspx">C# 关键字</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/bb397687.aspx">Lambda 表达式（C# 编程指南）</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bfcke1bz">Predicate<T> Delegate</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bb549311">Action&lt;T1, T2> Delegate</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/system.action">Action Delegate</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bb534647">Func&lt;T1, T2, TResult> Delegate</a></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/05/19/csharp-delegate-and-lambda/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WinForms开发中SynchronizationContext和Invoke的使用注意事项]]></title>
    
      <category term="CSharp" />
    
      <category term="Thread" />
    
      <category term="WinForms" />
    
    <link href="http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-29T14:26:00+08:00</published>
    <updated>2012-04-29T14:26:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke</id>
    <content type="html"><![CDATA[<p>WinForms 开发中<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>是用于非UI线程中请求修改UI元素的方法, 一般配合<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.invokerequired.aspx">Control.InvokeRequired</a>使用:</p>

<p>``` csharp Control.Invoke and Control.InvokeRequired
public partial class Form1 : Form
{</p>

<pre><code>private void Foo(string text)
{
    if (InvokeRequired)
    {
        Invoke((Action&lt;string&gt;)Foo, text);
    }
    else
    {
        textBox1.Text = text;
    }
}
</code></pre>

<p>}
```</p>

<p>类似<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>的还有<a href="http://msdn.microsoft.com/zh-cn/library/0b1bf3y3.aspx">Control.BeginInvoke</a>和<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.endinvoke.aspx">Control.EndInvoke</a>, 它们是异步调用.</p>

<p>这些方法和属性都依赖于<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>true</code>时, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>表示窗口句柄是否已创建, 它并不是指是否<code>new Form1()</code>过, 而是指是否<code>Show()</code>过, 包括<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.show.aspx">Show</a>, <a href="http://msdn.microsoft.com/zh-cn/library/c7ykbedk.aspx">ShowDialog</a>这些调用都会使<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>true</code>.</p>

<p>而在<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>false</code>时, 比如刚刚<code>new Form1()</code>, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.invokerequired.aspx">Control.InvokeRequired</a>返回<code>false</code>, 调用<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>会抛出异常:</p>

<pre><code>System.InvalidOperationException: 在创建窗口句柄之前，不能在控件上调用 Invoke 或 BeginInvoke。
</code></pre>

<!-- more -->


<p>当在非UI线程和多个窗口之间操作时, 可能会有一些麻烦的情况发生, 这种情况可能会考虑使用<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a>.</p>

<p><a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a>可以在当前线程第一次<code>new Form1()</code>之后通过<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>取得, 之后使用<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.post.aspx">Post</a>和<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.send.aspx">Send</a>实现在UI线程执行指定的委托, 下面使用的<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.windowsformssynchronizationcontext.aspx">WindowsFormsSynchronizationContext</a>.Current在WinForms程序中等价于<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>:</p>

<p>``` csharp SynchronizationContext.Post
public partial class Form1 : Form
{</p>

<pre><code>public static SynchronizationContext SyncContext { get; set; }

public Form1()
{
    InitializeComponent();
    SyncContext = WindowsFormsSynchronizationContext.Current;
}

private void Foo(string text)
{
    SyncContext.Post(delegate(object obj)
    {
        textBox1.Text = text;
    }, null);
}
</code></pre>

<p>}
```</p>

<p>从<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>的文档可知它只会返回当前线程的同步上下文, 要在别的线程中访问需要自行保存它的引用, 即这里属性<code>SyncContext</code>, 使用时确保在访问<code>SyncContext</code>之前<code>new Form1()</code>过一次, 且只能一次, 否则后续的会覆盖之前的, 在符合需求的情况下会很自然想到单例模式:</p>

<p>``` csharp 线程安全的单例模式</p>

<pre><code>static Form1[] _Instance = { null };

public static Form1 Instance
{
    get
    {
        if (_Instance[0] == null)
        {
            lock (_Instance)
            {
                if (_Instance[0] == null)
                {
                    _Instance[0] = new Form1();
                }
            }
        }
        return _Instance[0];
    }
}
</code></pre>

<p>```</p>

<p>目前看起来是没什么问题了, 现实总是会出点问题, 比如<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>总是返回当前线程的, 结合上述的单例模式, 如果第一次访问<code>Instance</code>属性是在别的线程中, 测试代码如下:</p>

<p>``` csharp 在不同的线程中访问Form1.Instance</p>

<pre><code>new Thread(delegate()
{
    Form1.Instance.ToString();
    Debug.Assert(SynchronizationContext.Current != null);
}).Start();

Thread.Sleep(3000);

var f = Form1.Instance;
Debug.Assert(SynchronizationContext.Current == null);
Application.Run(f);
</code></pre>

<p>```</p>

<p>上面代码的两处断言都通过了, 这种情况下<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.post.aspx">Form1.SyncContext.Post</a>仍旧可以调用, 但是将<strong>不产生任何效果</strong>, 也<strong>不抛出异常</strong>, 因为<code>new Form1()</code>的那个线程已经结束了, 以及那个线程并没有执行消息循环<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>.</p>

<p>如果需要在<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>之后, 相关的UI元素变得可用时再执行相关代码, 可以自行定义事件, 实现相关的触发和绑定, 确保<code>new Form1</code>和<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>在同一个线程中调用, 在具体的多线程环境中解决办法会表现的完全不同.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[捕获摄像头信息]]></title>
    
      <category term="CSharp" />
    
      <category term="DirectShow" />
    
      <category term="MF" />
    
      <category term="VLC" />
    
      <category term="Win32API" />
    
    <link href="http://netwjx.github.com/blog/2012/04/21/camera-capture/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-21T14:59:00+08:00</published>
    <updated>2012-04-21T14:59:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/21/camera-capture</id>
    <content type="html"><![CDATA[<p>最近有做一个从摄像头获取信息的程序, 期间查找了各种方案, 这里列出一些总结.</p>

<h2>实现方案</h2>

<ol>
<li><p>avicap32.dll 的实现 Win32API</p>

<p>主要使用<code>capGetDriverDescriptionA</code>函数获取获取摄像头设备, 使用<code>capCreateCaptureWindow</code>和<code>SendMessage</code>发送一系列窗口消息控制, 图像数据使用一个<code>PictrueBox</code>控件来显示, 有可以保存到avi文件.</p>

<p>其属于<strong>Video for Windows</strong>技术, 代码示例可以参考<a href="http://kadaitcha.cx/vb/capture_webcam_video.html">How to Interface to a Video Device and Capture Video and Images</a>, C#的代码示例可以参考<a href="http://www.koders.com/csharp/fidFEFD079826A1CB5ACB35A56EC33C4651456FA0A7.aspx">_VideoCapturer.cs</a>, 以及MSDN上的参考<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd757692.aspx">Video Capture </a></p>

<p>这个实现方法无法使用<strong>虚拟摄像头</strong>, <code>capGetDriverDescriptionA</code>不会返回任何虚拟摄像头设备.</p></li>
</ol>


<!-- more -->


<ol>
<li><p>DirectShow 的实现</p>

<p>这个实现的API使用起来比上面的要繁杂很多, 但是可以使用<strong>虚拟摄像头</strong>, 现在典型的IM软件其实现应该都是基于此.</p>

<p>没找到什么入门的介绍,只能从MSDN上<a href="http://msdn.microsoft.com/en-us/library/dd375454.aspx">DirectShow</a>翻看</p>

<p>可以先从<a href="http://msdn.microsoft.com/en-us/library/dd390352.aspx">Introduction to DirectShow Application Programming</a>了解典型的结构和流程, <code>Filter Graph Manager</code>是核心的部分, 以及 <a href="http://msdn.microsoft.com/en-us/library/dd375470.aspx">DirectShow System Overview</a>, 结构图:</p>

<p><img src="http://i.msdn.microsoft.com/dynimg/IC420381.png" alt="High level architecture" /></p>

<p>DirectShow 视频捕获部分<a href="http://msdn.microsoft.com/en-us/library/dd407331.aspx">Video Capture</a></p>

<p>在dotnet下有一个<a href="http://directshownet.sourceforge.net/index.html">DirectShow.Net</a>库对DirectShow的封装, 可以直接在C#和VB.Net中直接使用, 文档仍旧需要以DirectShow的文档为主, 但是DirectShow.Net提供有大量的<a href="http://sourceforge.net/projects/directshownet/files/DirectShowSamples/">代码示例</a>, 个别有些小问题, 但是简单改改都可以正常跑起来.</p></li>
<li><p>libVLC 的实现, 源自VLC播放器</p>

<p><a href="http://www.videolan.org/vlc/">VLC</a>是跨平台的影音播放器, 除了能播放传统视频外, 还可以捕获视频, <a href="http://www.videolan.org/vlc/features.html">具体的特性</a>中有描述, 可以看到Windows下<strong>Video acquisition</strong>的实现是基于DirectShow</p>

<p>而<a href="http://www.videolan.org/vlc/libvlc.html">libVLC</a>是VLC播放器的底层库</p>

<p><img src="http://images1.videolan.org/images/libvlc_stack.png" alt="Technical Diagram" /></p>

<p>在dotnet下有一个<a href="http://www.videolan.org/vlc/">VLC</a>的封装<a href="http://vlcdotnet.codeplex.com/">vlcdotnet</a>, 也是开源的, 从介绍上可以看到能在WinForm, WPF, SilverLight 5下使用, 需要依赖<strong>libvlc.dll</strong>, <strong>libvlccore.dll</strong>, 安装<a href="http://www.videolan.org/vlc/">VLC</a>播放器后在安装目录下能找到.</p></li>
<li><p>Microsoft Media Foundation 的实现</p>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms694197.aspx">MMF</a> 这个其实没什么好讲的, 主要是只有Windows Vista及以后的才支持, 说是用来代替DirectShow的, 文档仍旧是以C++为主的, 在未来也许会比较有价值.</p></li>
</ol>


<h2>综述</h2>

<ol>
<li><p>最简单的是avicap32的实现.</p></li>
<li><p>需要支持虚拟摄像头, 或者是方便使用虚拟摄像头调试, 可以使用基于DirectShow的方案.</p></li>
<li><p>需要跨平台, 或者是涉及到音视频回放之类的可以使用基于VLC的方案.</p></li>
<li><p>MMF暂时周边相关的还不是很成熟, 除非环境允许能够使用这个方案.</p></li>
</ol>


<p>我最后选择的使用DirectShow, 使用<a href="http://directshownet.sourceforge.net/index.html">DirectShow.Net</a>库, 代码麻烦了点, 但是有示例还是问题不大.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/21/camera-capture/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
