<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[类别: Scala | netwjx]]></title>
  <link href="http://netwjx.github.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-12-05T22:23:08+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[函数的Currying (Javascript 和 Scala)]]></title>
    
      <category term="Javascript" />
    
      <category term="Memo" />
    
      <category term="Scala" />
    
    <link href="http://netwjx.github.com/blog/2012/12/05/function-currying-in-javascript-and-scala/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-12-05T13:52:00+08:00</published>
    <updated>2012-12-05T13:52:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/12/05/function-currying-in-javascript-and-scala</id>
    <content type="html"><![CDATA[<p>Currying或者Curry, 中文有翻译成<a href="http://book.51cto.com/art/200806/77578.htm">科里化</a>. 我最早了解它是在一篇讲<a href="http://www.ibm.com/developerworks/cn/java/j-pg08235/">Groovy中函数式编程</a>的文章中, 之后又在<a href="http://www.python.org/">Python</a>中<a href="http://code.activestate.com/recipes/52549/">遇到同样的东西</a>. 最近在看<a href="http://www.scala-lang.org/">Scala</a>的介绍时<a href="http://www.scala-lang.org/node/135">又看到了</a>, 而且发现<a href="http://www.scala-lang.org/">Scala</a>设计的明显更好, 然后就成了这篇文章, 使用Javascript作为主要语言是因为我使用Javascript的时间更长, 并且Javascript这门语言的表达能力<a href="http://www.nafine.com/Work_View.php?id=271">奇强</a><sup>-<sup>{%</sup></sup> endraw %}.</p>

<p>Currying是<a href="http://www.ibm.com/developerworks/cn/java/j-cb12196/">函数式编程</a>中一种<a href="http://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">高阶函数</a>的典型应用, 如果非要把它对应到传统OO中的话, 那么它类似<a href="https://www.google.com/search?q=builder+pattern">Builder模式</a>, 一般译作构建器模式 建造者模式.</p>

<p>Builder模式可以简单理解为创建一个复杂的对象需要依赖多个参数, 要提供的参数又依赖于不同的方法, 使用Builder模式让每个方法只关注自己提供的参数, 最终根据全部参数创建出对象来. 对象实例最终是拿来调用的, 你可以把这个过程想象成调用一个参数很多的函数.</p>

<p>Javascript中完全可以按照传统OO的方式实现Builder模式, 但使用Currying更轻量级 简单, 考虑下面的代码:</p>

<p>``` js
function filter(list, func) {</p>

<pre><code>var ret = [];
for (var i = 0; i &lt; list.length; i++) {
    var v = list[i];
    if (func(v)) {
        ret.push(v);
    }
}
return ret;
</code></pre>

<p>}</p>

<p>function modN(n, x) {</p>

<pre><code>return x % n === 0;
</code></pre>

<p>}</p>

<p>var nums = [1, 2, 3, 4, 5, 6, 7, 8];</p>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>return modN(2, x);
</code></pre>

<p>}));</p>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>return modN(3, x);
</code></pre>

<p>}));
```</p>

<!-- more -->


<p>执行输出</p>

<p><code>
2,4,6,8
3,6
</code></p>

<p>modN函数有2个参数, 示例中可以同时提供所有的参数, 当然这是相当理想的情况. 实际可能不同的参数在不同的阶段提供:</p>

<p>``` js
var p = [2];  // 提供相关参数
console.log(filter(nums, function(x) {</p>

<pre><code>p[1] = x;
return modN.apply(this, p);
</code></pre>

<p>}));</p>

<p>p[0] = 3;  // 提供相关参数
console.log(filter(nums, function(x) {</p>

<pre><code>p[1] = x
return modN.apply(this, p);
</code></pre>

<p>}));
```</p>

<p>这种方式需要有一个变量用来保存参数, 而如果使用Currying可以这样:</p>

<p><code>js
console.log(filter(nums, modN.curry(2)));
console.log(filter(nums, modN.curry(3)));
</code></p>

<p>根据需要可以<code>curry()</code>多个参数或<code>curry()</code>多次. 上文中使用的<code>curry</code>函数的实现:</p>

<p>``` js
Function.prototype.curry = function() {</p>

<pre><code>var func = this,
    p = Array.prototype.slice.call(arguments, 0);
return function() {
    return func.apply(this, p.concat.apply(p, arguments));
};
</code></pre>

<p>};
```</p>

<p>这是最轻量级 最简单的实现方式, 深入挖掘Javascript语言的表达力应该还会出现更巧妙的设计.</p>

<h2>Currying的来由</h2>

<p>考虑体积计算公式<code>体积 = 长 x 宽 x 高</code>, 假设已知长为10, 那么这个公式就变成了<code>体积 = 10 x 宽 x 高</code>, 进一步已知宽为7, 那么公式就变为<code>体积 = 10 x 7 x 高</code>, 这种转换即Currying.</p>

<p>这是最通俗的描述, 比较正式的可以参考<a href="http://www.wikipedia.org/">维基百科</a>的<a href="http://en.wikipedia.org/wiki/Currying">Currying</a>词条.</p>

<h2>Scala语言中的Currying</h2>

<p>之所以要额外提<a href="http://www.scala-lang.org/">Scala</a>, 是因为它是原生支持Currying的语言, 相对比通过类库支持能提供更巧妙的语法, 参见下面的代码:</p>

<p>``` scala A Tour of Scala: Currying http://www.scala-lang.org/node/135 来源
object CurryTest extends Application {</p>

<p>  // 这种声明就是支持Currying的函数, 每个参数用 ( ) 分隔开
  def modN(n: Int)(x: Int) = ((x % n) == 0)</p>

<p>  // 参数p是有1个Int类型参数的函数, 返回Boolean类型
  def filter(xs: List[Int], p: Int => Boolean): List[Int] =</p>

<pre><code>if (xs.isEmpty) xs
else if (p(xs.head)) xs.head :: filter(xs.tail, p)
else filter(xs.tail, p)
</code></pre>

<p>  val nums = List(1, 2, 3, 4, 5, 6, 7, 8)</p>

<p>  // modN2引用的是包含1个Int类型参数, 并返回Boolean类型的函数, 结尾的下划线是Scala中的语法
  val modN2 = modN(2)_
  println(filter(nums, modN2))</p>

<p>  // 不需要赋值的就不需要结尾的下划线了
  println(filter(nums, modN(3)))
}
```</p>

<p>上述代码只是加了额外的注释, 调整了下顺序, 和来源中的代码等价.</p>

<p>最重要的, <a href="http://www.scala-lang.org/">Scala</a>是静态类型语言, 开发环境可以提供每次<code>Currying</code>之后的<strong>函数提示信息</strong>, 并能够做<strong>编译时检查</strong>, 而<a href="http://groovy.codehaus.org/">Groovy</a>, <a href="http://www.python.org/">Python</a>, Javascript只能依赖约定, 错误会在运行时发生, 必须有其它的措施确保同步修改关联的代码.</p>

<h2>偏函数 Partial function</h2>

<p>和Currying很像, 只是另外一种更灵活的语法, 可以不按照参数顺序提供参数, 比如Scala的示例代码:</p>

<p><code>scala
def add(i: Int, j: Int) = i + j
val add5 = add(_: Int, 5)
println(add5(2))
</code></p>

<p>参考[Wikipedia][]的<a href="http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application">Contrast with partial function application</a> 和 <a href="http://en.wikipedia.org/wiki/Partial_function">Partial function</a></p>

<h2>Javascript中更常见的传递大量参数的方式</h2>

<p>Javascript是动态语言, 开发环境无法提供太多提示信息, 上文提到的Currying更适合一些比较稳定的, 不经常变动的API.</p>

<p>实际项目中如果函数参数很多, 并且可能在不同的地方提供参数, 则会使用参数对象的方式:</p>

<p>``` js
function modN(opt) {</p>

<pre><code>opt.num = opt.num || 1;
opt.x = opt.x || 1;
return opt.x % opt.num === 0;
</code></pre>

<p>}</p>

<p>var opt2 = { num: 2 },</p>

<pre><code>opt3 = { num: 3 };
</code></pre>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>opt2.x = x;
return modN(opt2);
</code></pre>

<p>}));</p>

<p>console.log(filter(nums, function(x) {</p>

<pre><code>opt3.x = x;
return modN(opt3);
</code></pre>

<p>}));
```</p>

<p>这个看起来和Builder模式十分相像, 参数都提供有默认值, <code>num</code>和<code>x</code>可以使用更有意义的名称以使阅读性更好一些, 但也付出了不少编码工作.</p>

<p>从<a href="http://www.mozilla.org/en-US/firefox/fx/#desktop">Firefox 2.0</a>开始支持<strong>解构赋值</strong><a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Destructuring_assignment_%28Merge_into_own_page.2Fsection%29">New in JavaScript 1.7: Destructuring assignment</a>, 这个特性可以让实现<code>modN</code>少了一些纠结:</p>

<p>``` js
function modN(opt) {</p>

<pre><code>var { num, x } = opt;
num = num || 1;
x = x || 1;
return x % num === 0;
</code></pre>

<p>}
```</p>

<p>原文中还有解构赋值的很多<a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Looping_across_values_in_an_array_of_objects">高级用法</a>, 但是到目前为之还没看到其它浏览器提供支持, 也没有进入ECMAScript标准, 只能在比如Firefox扩展开发时爽爽.</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://www.cnblogs.com/fox23/archive/2009/10/22/intro-to-Lambda-calculus-and-currying.html">Lambda演算与科里化(Currying)</a></li>
<li><a href="http://book.51cto.com/art/200806/77578.htm">《JavaScript王者归来》第二十二章 科里化（Currying）小节</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-pg08235/">实战 Groovy: 用 curry 过的闭包进行函数式编程</a></li>
<li><a href="http://code.activestate.com/recipes/52549/">curry -- associating parameters with a function (Python recipe)</a></li>
<li><a href="http://www.scala-lang.org/node/135">A Tour of Scala: Currying</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-cb12196/">跨越边界: JavaScript 语言特性</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">维基百科 高阶函数 词条</a></li>
<li><a href="http://en.wikipedia.org/wiki/Currying">维基百科 Currying 词条</a></li>
<li><a href="http://en.wikipedia.org/wiki/Partial_function">维基百科 Partial function 词条</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Destructuring_assignment_%28Merge_into_own_page.2Fsection%29">New in JavaScript 1.7 : Destructuring assignment 解构赋值</a></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/12/05/function-currying-in-javascript-and-scala/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
