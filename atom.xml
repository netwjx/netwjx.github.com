<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[netwjx]]></title>
  <link href="http://netwjx.github.com/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-05-19T01:19:03+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Ruby 和 Jekyll 的笔记]]></title>
    
      <category term="Jekyll" />
    
      <category term="Liquid" />
    
      <category term="Octopress" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-05-06T15:57:00+08:00</published>
    <updated>2012-05-06T15:57:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note</id>
    <content type="html"><![CDATA[<p>之前发现<a href="http://octopress.org/">Octopress</a>产生的页面中, <strong>meta</strong>标签的<strong>content</strong>属性没有处理换行, 今天尝试自己写个插件来处理这个地方, 因为没有学过Ruby, 下面的操作基本都是临时找资料, 所以记录一些重点.</p>

<p>插件代码如下</p>

<figure class='code'><figcaption><span>plugins/html_attr_filter.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#html attribute filter</span>
</span><span class='line'><span class="k">module</span> <span class="nn">HtmlAttrFilters</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">html_attr</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>        <span class="n">input</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\r\n|\r|\n/</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="o">=&gt;</span><span class="s1">&#39;&amp;#13;&amp;#10;&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\r</span><span class="s2">&quot;</span><span class="o">=&gt;</span><span class="s1">&#39;&amp;#13;&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">=&gt;</span><span class="s1">&#39;&amp;#10;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span> <span class="no">HtmlAttrFilters</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改<code>source/_includes/head.html</code>中<code>&lt;meta name="description"</code>所在的行</p>

<figure class='code'><figcaption><span>source/_includes/head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&#39;{{ description | strip_html | condense_spaces | truncate:150 | html_attr }}&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后<code>rake generate</code>就能看到<code>&lt;meta name="description"</code>的<strong>content</strong>已经不会有换行了, 下面说说中间涉及的相关东西.</p>

<h2>Jekyll扩展和Liquid扩展</h2>

<p><a href="http://octopress.org/">Octopress</a>是基于<a href="https://github.com/mojombo/jekyll">Jekyll</a>的, <a href="https://github.com/mojombo/jekyll">Jekyll</a>使用的模版引擎是<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>, 在模版中<code>{{ a | foo | bar}}</code>的<code>foo</code>和<code>bar</code>叫做<strong>Filter</strong>, 后面将把其称为<strong>过滤器</strong>, 在<a href="https://github.com/mojombo/jekyll">Jekyll</a>的<a href="https://github.com/mojombo/jekyll/wiki/Plugins">插件开发文档</a>中有一段是关于过滤器扩展, 我主要是参考这里来做文章开始的扩展.</p>

<h3>Liquid filters</h3>

<p>You can add your own filters to the liquid system much like you can add tags above. Filters are simply modules that export their methods to liquid. All methods will have to take at least one parameter which represents the input of the filter. The return value will be the output of the filter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">AssetFilter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">asset_url</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;http://www.example.com/</span><span class="si">#{</span><span class="n">input</span><span class="si">}</span><span class="s2">?</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span><span class="p">(</span><span class="no">Jekyll</span><span class="o">::</span><span class="no">AssetFilter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Advanced</strong>: you can access the <code>site</code> object through the <code>@context.registers</code> feature of liquid. Registers a hash where arbitrary context objects can be attached to. In Jekyll you can access the site object through registers. As an example, you can access the global configuration (_config.yml) like this: <code>@context.registers[:site].config['cdn']</code>.</p>

<h3>延伸: Octopress Jekyll和Liquid所有可用的过滤器</h3>

<p><a href="http://octopress.org/">Octopress</a>扩展的过滤器在<a href="https://github.com/imathis/octopress/blob/master/plugins/octopress_filters.rb">这里</a>, 主要是从36行开始的这些:</p>

<figure class='code'><figcaption><span>plugins/octopress_filters.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">OctopressLiquidFilters</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Octopress</span><span class="o">::</span><span class="no">Date</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Used on the blog index to split posts on the &lt;!--more--&gt; marker</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">excerpt</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sr">/&lt;!--\s*more\s*--&gt;/i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">input</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/&lt;!--\s*more\s*--&gt;/i</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Checks for excerpts (helpful for template conditionals)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_excerpt</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">=~</span> <span class="sr">/&lt;!--\s*more\s*--&gt;/i</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Summary is used on the Archive pages to return the first block of content from a post.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">summary</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sr">/\n\n/</span><span class="p">)</span>
</span><span class='line'>      <span class="n">input</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n\n/</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Extracts raw content DIV from template, used for page description as </span>
</span><span class='line'>  <span class="c1"># contains complete sub-template code on main page level</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">raw_content</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="sr">/&lt;div class=&quot;entry-content&quot;&gt;(?&lt;content&gt;[\s\S]*?)&lt;\/div&gt;\s*&lt;(footer|\/article)&gt;/</span> <span class="o">=~</span> <span class="n">input</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">content</span><span class="o">.</span><span class="n">nil?</span><span class="p">)</span> <span class="p">?</span> <span class="n">input</span> <span class="p">:</span> <span class="n">content</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Escapes CDATA sections in post content</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cdata_escape</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&lt;!\[CDATA\[/</span><span class="p">,</span> <span class="s1">&#39;&amp;lt;![CDATA[&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\]\]&gt;/</span><span class="p">,</span> <span class="s1">&#39;]]&amp;gt;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Replaces relative urls with full urls</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">expand_urls</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">||=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/(\s+(href|src)\s*=\s*[&quot;|&#39;]{1})(\/[^\&quot;&#39;&gt;]*)/</span> <span class="k">do</span>
</span><span class='line'>      <span class="vg">$1</span><span class="o">+</span><span class="n">url</span><span class="o">+</span><span class="vg">$3</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Improved version of Liquid&#39;s truncate:</span>
</span><span class='line'>  <span class="c1"># - Doesn&#39;t cut in the middle of a word.</span>
</span><span class='line'>  <span class="c1"># - Uses typographically correct ellipsis (…) insted of &#39;...&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">truncate</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">length</span> <span class="o">&amp;&amp;</span> <span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/(.+)\b.+$/im</span>
</span><span class='line'>      <span class="vg">$1</span><span class="o">.</span><span class="n">strip</span> <span class="o">+</span> <span class="s1">&#39; &amp;hellip;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Improved version of Liquid&#39;s truncatewords:</span>
</span><span class='line'>  <span class="c1"># - Uses typographically correct ellipsis (…) insted of &#39;...&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">truncatewords</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="n">truncate</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">truncate</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">length</span>
</span><span class='line'>      <span class="n">truncate</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span> <span class="o">+</span> <span class="s1">&#39; &amp;hellip;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Condenses multiple spaces and tabs into a single space</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">condense_spaces</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s{2,}/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Removes trailing forward slash from a string for easily appending url segments</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">strip_slash</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span> <span class="o">=~</span> <span class="sr">/(.+)\/$|^\/$/</span>
</span><span class='line'>      <span class="n">input</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">input</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Returns a url without the protocol (http://)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shorthand_url</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/(https?:\/\/)(\S+)/</span> <span class="k">do</span>
</span><span class='line'>      <span class="vg">$2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Returns a title cased string based on John Gruber&#39;s title case http://daringfireball.net/2008/08/title_case_update</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">titlecase</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">titlecase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span> <span class="no">OctopressLiquidFilters</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>def</code>后的名称即过滤器的名称.</p>

<p><a href="https://github.com/mojombo/jekyll">Jekyll</a>扩展的过滤器在<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">这里</a></p>

<p><a href="https://github.com/Shopify/liquid/wiki">Liquid</a>的标准过滤器在<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">这里</a></p>

<h2>Ruby的字符串和正则</h2>

<p>Ruby的字符串可以使用双引号<code>"foo bar"</code>, 也可以使用单引号<code>'foo bar'</code>, 区别是:</p>

<ul>
<li>双引号中可以使用<code>\r\n</code>等转义符号, 以及<code>#{bar}</code>来引入一个变量的值, <code>bar</code>表示一个变量名.</li>
<li>单引号会将所有的字符原样保留, 包括<code>\r\n</code>, 其等价于双引号的<code>\\r\\n</code>.</li>
</ul>


<p>Ruby字符串的替换可以使用<code>gsub</code>方法, 类似一般语言中的<code>replace</code>, 第一个参数仍旧可以为正则, Ruby的文档中代码示例如下:</p>

<figure class='code'><figcaption><span>String#gsub</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[aeiou]/</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>                  <span class="c1">#=&gt; &quot;h*ll*&quot;</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([aeiou])/</span><span class="p">,</span> <span class="s1">&#39;&lt;\1&gt;&#39;</span><span class="p">)</span>             <span class="c1">#=&gt; &quot;h&lt;e&gt;ll&lt;o&gt;&quot;</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">ord</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span><span class="p">}</span>      <span class="c1">#=&gt; &quot;104 101 108 108 111 &quot;</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/(?&lt;foo&gt;[aeiou])/</span><span class="p">,</span> <span class="s1">&#39;{\k&lt;foo&gt;}&#39;</span><span class="p">)</span>  <span class="c1">#=&gt; &quot;h{e}ll{o}&quot;</span>
</span><span class='line'><span class="s1">&#39;hello&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[eo]/</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>    <span class="c1">#=&gt; &quot;h3ll*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我没有完整的看Ruby的语言规范, 根据文档的描述, 示例代码中最后一行<code>'e' =&gt; 3, 'o' =&gt; '*'</code>叫做<strong>Hash</strong>.</p>

<p>另外一个方法<code>sub</code>和<code>gsub</code>区别在: <code>sub</code>只会替换一次, <code>gsub</code>会替换所有的.</p>

<p>更多资料:</p>

<ul>
<li> <a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_stdtypes.html">Ruby基础类型</a>中还有更多关于<code>String</code>类型的基础.</li>
<li> <a href="http://www.ruby-doc.org/core-1.9.3/String.html">类库参考 String</a>中有完整的<code>String</code>可使用.</li>
</ul>


<p>Ruby中正则的使用感觉和Javascript的十分象, 当然也有一些其它的语法, 详细参考<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">Ruby类库参考 Regexp</a></p>

<p>发现一个特别的地方是Javascript中正则可以使用的选项有<code>igm</code>, 而Ruby是<code>imxo</code>, 见<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">这里</a><strong>的Options</strong></p>

      <p><a href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WinForms开发中SynchronizationContext和Invoke的使用注意事项]]></title>
    
      <category term="Dotnet" />
    
      <category term="Thread" />
    
    <link href="http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-29T14:26:00+08:00</published>
    <updated>2012-04-29T14:26:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke</id>
    <content type="html"><![CDATA[<p>WinForms 开发中<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>是用于非UI线程中请求修改UI元素的方法, 一般配合<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.invokerequired.aspx">Control.InvokeRequired</a>使用:</p>

<figure class='code'><figcaption><span>Control.Invoke and Control.InvokeRequired</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Form1</span> <span class="p">:</span> <span class="n">Form</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">InvokeRequired</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Invoke</span><span class="p">((</span><span class="n">Action</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;)</span><span class="n">Foo</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textBox1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类似<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>的还有<a href="http://msdn.microsoft.com/zh-cn/library/0b1bf3y3.aspx">Control.BeginInvoke</a>和<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.endinvoke.aspx">Control.EndInvoke</a>, 它们是异步调用.</p>

<p>这些方法和属性都依赖于<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>true</code>时, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>表示窗口句柄是否已创建, 它并不是指是否<code>new Form1()</code>过, 而是指是否<code>Show()</code>过, 包括<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.show.aspx">Show</a>, <a href="http://msdn.microsoft.com/zh-cn/library/c7ykbedk.aspx">ShowDialog</a>这些调用都会使<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>true</code>.</p>

<p>而在<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>false</code>时, 比如刚刚<code>new Form1()</code>, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.invokerequired.aspx">Control.InvokeRequired</a>返回<code>false</code>, 调用<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>会抛出异常:</p>

<pre><code>System.InvalidOperationException: 在创建窗口句柄之前，不能在控件上调用 Invoke 或 BeginInvoke。
</code></pre>

<p>当在非UI线程和多个窗口之间操作时, 可能会有一些麻烦的情况发生, 这种情况可能会考虑使用<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a>.</p>

<p><a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a>可以在当前线程第一次<code>new Form1()</code>之后通过<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>取得, 之后使用<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.post.aspx">Post</a>和<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.send.aspx">Send</a>实现在UI线程执行指定的委托, 下面使用的<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.windowsformssynchronizationcontext.aspx">WindowsFormsSynchronizationContext</a>.Current在WinForms程序中等价于<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>:</p>

<figure class='code'><figcaption><span>SynchronizationContext.Post</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Form1</span> <span class="p">:</span> <span class="n">Form</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">SynchronizationContext</span> <span class="n">SyncContext</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">InitializeComponent</span><span class="p">();</span>
</span><span class='line'>        <span class="n">SyncContext</span> <span class="p">=</span> <span class="n">WindowsFormsSynchronizationContext</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">SyncContext</span><span class="p">.</span><span class="n">Post</span><span class="p">(</span><span class="k">delegate</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">textBox1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>的文档可知它只会返回当前线程的同步上下文, 要在别的线程中访问需要自行保存它的引用, 即这里属性<code>SyncContext</code>, 使用时确保在访问<code>SyncContext</code>之前<code>new Form1()</code>过一次, 且只能一次, 否则后续的会覆盖之前的, 在符合需求的情况下会很自然想到单例模式:</p>

<figure class='code'><figcaption><span>线程安全的单例模式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">Form1</span><span class="p">[]</span> <span class="n">_Instance</span> <span class="p">=</span> <span class="p">{</span> <span class="k">null</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Form1</span> <span class="n">Instance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">lock</span> <span class="p">(</span><span class="n">_Instance</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Form1</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前看起来是没什么问题了, 现实总是会出点问题, 比如<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>总是返回当前线程的, 结合上述的单例模式, 如果第一次访问<code>Instance</code>属性是在别的线程中, 测试代码如下:</p>

<figure class='code'><figcaption><span>在不同的线程中访问Form1.Instance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="p">(</span><span class="k">delegate</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Form1</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">Assert</span><span class="p">(</span><span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">f</span> <span class="p">=</span> <span class="n">Form1</span><span class="p">.</span><span class="n">Instance</span><span class="p">;</span>
</span><span class='line'><span class="n">Debug</span><span class="p">.</span><span class="n">Assert</span><span class="p">(</span><span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span> <span class="p">==</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="n">Application</span><span class="p">.</span><span class="n">Run</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码的两处断言都通过了, 这种情况下<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.post.aspx">Form1.SyncContext.Post</a>仍旧可以调用, 但是将<strong>不产生任何效果</strong>, 也<strong>不抛出异常</strong>, 因为<code>new Form1()</code>的那个线程已经结束了, 以及那个线程并没有执行消息循环<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>.</p>

<p>如果需要在<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>之后, 相关的UI元素变得可用时再执行相关代码, 可以自行定义事件, 实现相关的触发和绑定, 确保<code>new Form1</code>和<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>在同一个线程中调用, 在具体的多线程环境中解决办法会表现的完全不同.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Octopress中使用代码高亮]]></title>
    
      <category term="Jekyll" />
    
      <category term="Octopress" />
    
    <link href="http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-21T16:45:00+08:00</published>
    <updated>2012-04-21T16:45:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress</id>
    <content type="html"><![CDATA[<p>在<a href="http://octopress.org">Octopress</a>中使用代码高亮, 实际就是<a href="http://jekyllrb.com/">Jekyll</a>的<a href="http://pygments.org/">Pygments</a>代码高亮, 效果如下</p>

<p>源</p>

<pre><code>``` js Javascript Hello World 
    alert('hello world');
```
</code></pre>

<p>效果</p>

<figure class='code'><figcaption><span>Javascript Hello World </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>而默认安装<a href="http://octopress.org">Octopress</a>时对代码高亮还是不支持的, 还需要安装<a href="http://python.org/">Python</a>, 我没有使用<a href="http://www.activestate.com/activepython">ActivePython</a>, 而是<a href="http://python.org/getit/">CPython</a>, 安装好后应该会有<code>c:\Windows\System32\python27.dll</code>.</p>

<p>但是现在还可能会出现<code>Could not open library’.dll’</code>的问题, 下面的修改会和版本有关, 我目前使用的Octopress版本是<code>2.0 2012/3/8 Commit:9f40242b1e7eb0098f0ef3c508c7bed7e647b982</code></p>

<p>将<code>Gemfile.lock</code>的<strong>33行</strong></p>

<pre><code>pygments.rb (0.1.3)
</code></pre>

<p>修改为</p>

<pre><code>pygments.rb (0.2.11)
</code></pre>

<p>以及<strong>40行</strong></p>

<pre><code>rubypython (0.5.1)
</code></pre>

<p>修改为</p>

<pre><code>rubypython (0.5.3)
</code></pre>

<p>注意上面的修改不要改变原有的缩进, 然后在命令行下执行</p>

<pre><code>bundle install
</code></pre>

<p>这将会使用<a href="http://gembundler.com/">bundler</a>这个依赖管理工具安装新版本的<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>和<a href="http://rubypython.rubyforge.org/">rubypython</a>.</p>

<p>如果还有问题请参考<a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a>的<strong>部署Python</strong>部分.</p>

<h2>Octopress代码高亮的工作原理</h2>

<p>如果上面的还是不能使用代码高亮就需要了解原理之后在自行判断如何处理.</p>

<p><a href="http://octopress.org">Octopress</a>的代码高亮实际是<a href="http://jekyllrb.com/">Jekyll</a>的代码高亮, 其中插件<code>Backtick Code Blocks</code> <code>Code Blocks</code> <code>Include Code</code> 这些插件都有代码高亮功能, 其代码高亮都使用<code>Pygments Code</code>插件, 这个插件如名字所示, 其使用的gem库是<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>.</p>

<p><a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>包含有<a href="http://pygments.org/">pygments</a>的代码, 可以在Ruby安装目录下的<code>\lib\ruby\gems\1.9.1\gems\pygments.rb-0.2.11\vendor</code>中看到.</p>

<p>使用<a href="http://gembundler.com/">bundler</a>安装<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>时会自动的安装它依赖的<a href="http://rubypython.rubyforge.org/">rubypython</a>.</p>

<p><a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>使用<a href="http://rubypython.rubyforge.org/">rubypython</a>的方式为<a href="https://github.com/ffi/ffi">ffi</a>, 这个是ruby中调用C语言写的库的工具, 在这里是调用<code>python27.dll</code>.</p>

<h2>备用方案</h2>

<p>上述的方法还是不能正常使用代码高亮的话, 还可以使用一些后备的方法.</p>

<h3>Gist插件</h3>

<p>在<a href="https://gist.github.com/">github:gist</a>上贴代码, 并使用类似下面的代码</p>

<pre><code>{% gist 2436351 %}
</code></pre>

<p>将展示为</p>

<div><script src='https://gist.github.com/2436351.js?file='></script>
<noscript><pre><code>var parser = document.createElement('a');
parser.href = &quot;http://example.com:3000/pathname/?search=test#hash&quot;;

parser.protocol; // =&gt; &quot;http:&quot;
parser.host;     // =&gt; &quot;example.com&quot;
parser.port;     // =&gt; &quot;3000&quot;
parser.pathname; // =&gt; &quot;/pathname/&quot;
parser.search;   // =&gt; &quot;?search=test&quot;
parser.hash;     // =&gt; &quot;#hash&quot;</code></pre></noscript></div>


<p><a href="http://octopress.org/docs/plugins/gist-tag/">Gist Tag 插件的更多资料</a></p>

<h3>jsFiddle插件</h3>

<p>这个更适合用于web前端相关的html css js的展示, 使用类似下面的代码</p>

<pre><code>{% jsfiddle 3h5A4/3 %}
</code></pre>

<p>将展示为</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/3h5A4/3/embedded/js,resources,html,css,result/light/"></iframe>


<p><a href="http://octopress.org/docs/plugins/jsfiddle-tag/">jsFiddle Tag 插件的更多资料</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[捕获摄像头信息]]></title>
    
      <category term="CSharp" />
    
      <category term="DirectShow" />
    
      <category term="MF" />
    
      <category term="VLC" />
    
      <category term="Win32API" />
    
    <link href="http://netwjx.github.com/blog/2012/04/21/camera-capture/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-21T14:59:00+08:00</published>
    <updated>2012-04-21T14:59:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/21/camera-capture</id>
    <content type="html"><![CDATA[<p>最近有做一个从摄像头获取信息的程序, 期间查找了各种方案, 这里列出一些总结.</p>

<h2>实现方案</h2>

<ol>
<li><p>avicap32.dll 的实现 Win32API</p>

<p>主要使用<code>capGetDriverDescriptionA</code>函数获取获取摄像头设备, 使用<code>capCreateCaptureWindow</code>和<code>SendMessage</code>发送一系列窗口消息控制, 图像数据使用一个<code>PictrueBox</code>控件来显示, 有可以保存到avi文件.</p>

<p>其属于<strong>Video for Windows</strong>技术, 代码示例可以参考<a href="http://kadaitcha.cx/vb/capture_webcam_video.html">How to Interface to a Video Device and Capture Video and Images</a>, C#的代码示例可以参考<a href="http://www.koders.com/csharp/fidFEFD079826A1CB5ACB35A56EC33C4651456FA0A7.aspx">_VideoCapturer.cs</a>, 以及MSDN上的参考<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd757692.aspx">Video Capture </a></p>

<p>这个实现方法无法使用<strong>虚拟摄像头</strong>, <code>capGetDriverDescriptionA</code>不会返回任何虚拟摄像头设备.</p></li>
<li><p>DirectShow 的实现</p>

<p>这个实现的API使用起来比上面的要繁杂很多, 但是可以使用<strong>虚拟摄像头</strong>, 现在典型的IM软件其实现应该都是基于此.</p>

<p>没找到什么入门的介绍,只能从MSDN上<a href="http://msdn.microsoft.com/en-us/library/dd375454.aspx">DirectShow</a>翻看</p>

<p>可以先从<a href="http://msdn.microsoft.com/en-us/library/dd390352.aspx">Introduction to DirectShow Application Programming</a>了解典型的结构和流程, <code>Filter Graph Manager</code>是核心的部分, 以及 <a href="http://msdn.microsoft.com/en-us/library/dd375470.aspx">DirectShow System Overview</a>, 结构图:</p>

<p><img src="http://i.msdn.microsoft.com/dynimg/IC420381.png" alt="High level architecture" /></p>

<p>DirectShow 视频捕获部分<a href="http://msdn.microsoft.com/en-us/library/dd407331.aspx">Video Capture</a></p>

<p>在dotnet下有一个<a href="http://directshownet.sourceforge.net/index.html">DirectShow.Net</a>库对DirectShow的封装, 可以直接在C#和VB.Net中直接使用, 文档仍旧需要以DirectShow的文档为主, 但是DirectShow.Net提供有大量的<a href="http://sourceforge.net/projects/directshownet/files/DirectShowSamples/">代码示例</a>, 个别有些小问题, 但是简单改改都可以正常跑起来.</p></li>
<li><p>libVLC 的实现, 源自VLC播放器</p>

<p><a href="http://www.videolan.org/vlc/">VLC</a>是跨平台的影音播放器, 除了能播放传统视频外, 还可以捕获视频, <a href="http://www.videolan.org/vlc/features.html">具体的特性</a>中有描述, 可以看到Windows下<strong>Video acquisition</strong>的实现是基于DirectShow</p>

<p>而<a href="http://www.videolan.org/vlc/libvlc.html">libVLC</a>是VLC播放器的底层库</p>

<p><img src="http://images1.videolan.org/images/libvlc_stack.png" alt="Technical Diagram" /></p>

<p>在dotnet下有一个<a href="http://www.videolan.org/vlc/">VLC</a>的封装<a href="http://vlcdotnet.codeplex.com/">vlcdotnet</a>, 也是开源的, 从介绍上可以看到能在WinForm, WPF, SilverLight 5下使用, 需要依赖<strong>libvlc.dll</strong>, <strong>libvlccore.dll</strong>, 安装<a href="http://www.videolan.org/vlc/">VLC</a>播放器后在安装目录下能找到.</p></li>
<li><p>Microsoft Media Foundation 的实现</p>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms694197.aspx">MMF</a> 这个其实没什么好讲的, 主要是只有Windows Vista及以后的才支持, 说是用来代替DirectShow的, 文档仍旧是以C++为主的, 在未来也许会比较有价值.</p></li>
</ol>


<h2>综述</h2>

<ol>
<li><p>最简单的是avicap32的实现.</p></li>
<li><p>需要支持虚拟摄像头, 或者是方便使用虚拟摄像头调试, 可以使用基于DirectShow的方案.</p></li>
<li><p>需要跨平台, 或者是涉及到音视频回放之类的可以使用基于VLC的方案.</p></li>
<li><p>MMF暂时周边相关的还不是很成熟, 除非环境允许能够使用这个方案.</p></li>
</ol>


<p>我最后选择的使用DirectShow, 使用<a href="http://directshownet.sourceforge.net/index.html">DirectShow.Net</a>库, 代码麻烦了点, 但是有示例还是问题不大.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/21/camera-capture/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[截取指定字节长度的字符串]]></title>
    
      <category term="Java" />
    
    <link href="http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-15T18:35:00+08:00</published>
    <updated>2012-04-15T18:35:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length</id>
    <content type="html"><![CDATA[<p>在搜文本换行算法的时候发现了<a href="http://www.iteye.com/topic/1037773">编写一个截取字符串的函数</a>, 问题是</p>

<blockquote><p>编写一个截取字符串的函数，输入为一个<strong>字符串</strong>和<strong>字节数</strong>，输出为<strong>按字节截取的字符串</strong>。</p>

<p>但是要保证汉字<strong>不被截半个</strong>，如“我ABC”4，应该截为“我AB”，输入“我ABC汉DEF”，6，应该输出为“我ABC”而不是“我ABC+汉的半个”。</p></blockquote>

<p>可能描述的有些不明确, 应该这样说</p>

<blockquote><p>编写一个截取字符串的函数, 给定<strong>字符串</strong>, <strong>编码格式</strong>, 使用前2个参数编码之后的<strong>字节数组</strong>, 以及截取<strong>字节数组的最大长度</strong>.</p>

<p>要求返回<strong>实际需要截取的长度</strong>, 不能在解码指定长度字节数组后出现<strong>半个字符</strong>的现象.</p></blockquote>

<p>那么测试代码大概是这样的(就以Java为例):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;我abc的def&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">charset</span> <span class="o">=</span> <span class="s">&quot;gbk&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">charset</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">subString</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">charset</span><span class="o">,</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="n">length</span><span class="o">),</span> <span class="n">charset</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span> <span class="n">result</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;我abc的&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一行的断言仅适用于gbk和utf-8的情况, 其它的不保证可用.</p>

<p>在开始的帖子中看到过一个实现, 等价于下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">subString</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">charset</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">c</span><span class="o">).</span><span class="na">getBytes</span><span class="o">(</span><span class="n">charset</span><span class="o">).</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">length</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">length</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过想想, subString返回值一般在length-3到length之间, 可以探测截取指定长度是否会有问题, 那么就可以有下面的一个实现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">detectByte</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">charset</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">i</span><span class="o">--;</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">charset</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()).</span><span class="na">equals</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再想想, 实际有差别的只是最后一个字符, 只比较最后一个字符即可:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">subString</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">charset</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">n</span><span class="o">--;</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">charset</span><span class="o">);</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一种会比较慢些, 后面的方法会占用更多的内存.</p>

<p>这个问题始终和编码类型有关的, 因为需要返回的是字节数组/流的长度, 而不是字符数组/串/流的长度.</p>

<p>不过这个代码的应用场景我还是想不出来, 即使有这样的场景, 也可以有别的变通办法可以不需要这样截取.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在jQuery中发生'Object' 未定义]]></title>
    
      <category term="IE9" />
    
      <category term="Javascript" />
    
    <link href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-15T13:09:00+08:00</published>
    <updated>2012-04-15T13:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery</id>
    <content type="html"><![CDATA[<p>之前发现一个比较奇怪的现象, 一个很典型的页面, 总是在打开时会在jQuery中的一个位置发生 <code>'Object' 未定义</code> 的错误, 并且只在首次打开, 编译需要时间, 加载也比平时慢点的情况下.</p>

<p>在不使用jQuery的页面也发生类似现象, 错误可能是window未定义, document未定义之类的.</p>

<p>仅ie9下有这个现象, 忽略这个错误后仍能正常打开页面, 没有任何功能有问题.</p>

<p>记得以前遇到过类似的现象, 这次仔细找了下发现了这个:</p>

<p><a href="http://stackoverflow.com/questions/8389261/ie9-throws-exceptions-when-loading-scripts-in-iframe-why">IE9 throws exceptions when loading scripts in iframe. Why?</a></p>

<p>以及msdn的 <a href="http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4">APIs Are Not Available if iFrame Is Removed from DOM Tree</a></p>

<p>简单的说是在包含iframe的页面中, 如果这个iframe被移除后, 其内部的Javascript和DOM API都会无法被调用.</p>

<p>上述<strong>特性</strong>在ie9标准下有效, 往后更新的版本应该也是如此.</p>

<p>上面只是根本原因, 实际会有一些比较复杂的表现方式, 比如在jQuery中类似 <code>$('#id').appendTo('#foo')</code> 的代码将会先从DOM树中移除, 然后再添加进去, 这将会诱发上述现象.</p>

<p>其它的比如jQuery EasyUI的Layout, 它的实现方式会修改DOM结构, 这将会移除和重新创建包含iframe的元素.</p>

<h2>处理办法</h2>

<p>简单的可以是避免在IE9标准模式渲染.</p>

<p>麻烦点的就是先不设置iframe的src, 等移除iframe操作完成后再设置, 一般可以考虑在window.onload时做这个操作.</p>

<p>可以利用setTimeout让一些操作在事件触发完毕后再执行, 关于setTimeout的特性可以参考<a href="http://ejohn.org/blog/how-javascript-timers-work/">How JavaScript Timers Work</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬山备忘]]></title>
    
      <category term="Live" />
    
      <category term="Memo" />
    
    <link href="http://netwjx.github.com/blog/2012/04/07/mountain-climbing/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-07T18:49:00+08:00</published>
    <updated>2012-04-07T18:49:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/07/mountain-climbing</id>
    <content type="html"><![CDATA[<p>前几天去爬山,记下中间需要注意的事项,有些备忘的适用场景不限于爬山.</p>

<h2>准备工作</h2>

<p>下面只是尽量列出,按需要准备</p>

<ol>
<li><p>建议在确保前一天睡眠充足的情况下做下面的准备</p></li>
<li><p>提前查看天气预报,气温,决定穿着的薄厚,一般带一件挡风的外套</p>

<p>如果有可能下雨,准备把雨伞</p></li>
<li><p>查询路线,包括到山脚下的路线和爬山的路线,记录沿途的标识</p></li>
<li><p>查询路线顺便估计时间,尽量将登顶或休息放到合适的时间</p></li>
<li><p>如果是节假日,估计中间可能会堵车之类的事,考虑不容易误点的交通方式或线路</p></li>
<li><p>准备舒适的鞋子,会步行挺久,所以这个很重要,不建议穿新鞋</p></li>
<li><p>手机,电子设备充电,如果有电子地图,考虑预先下载好地图,山上可能会有无信号的区域.</p></li>
<li><p>水和零食,山上的东西会很贵,一般是山下的3倍.水不能太少,也不宜太多,以具体到每人的实际情况决定</p>

<p>容易出汗的人会需要更多的水</p>

<p>爬山途中温度会比较高,不宜带太多遇热会融化的零食,比如巧克力</p>

<p>必要的话用双肩包携带</p></li>
<li><p>如果人多,可以考虑带纸牌,野餐垫,其它想带的东西,当然还是量力而行,也估计好时间,不要负担太多</p>

<p>相机,考虑是否一定有必要,除了手机可能作为替代,目的地也许还有其它途径可以拍照</p></li>
<li><p>风景区的话,在网上找一份风景区的简单宣传资料,里面的电话 缩略地图可能会用到</p>

<p>有GPS或类似功能的设备虽然可以定位,但是山上的小路多,一般互联网上的地图都没有山上的详图,而卫星地图有可能没对准,树木茂盛等原因不容易找到自己的位置,而宣传资料上一般会有简略爬山路线</p></li>
<li><p>简单估计下山计划,如果有缆车下山速度会很快,这样可以有多一些时间在山上.</p>

<p>下山路线,如果可能的话多考虑几条路线</p>

<p>下山的实现,下山后休息的地点,交通方式</p></li>
<li><p>上述按需要记录到纸上或电子设备,确保电子设备不会中途电量耗尽</p></li>
<li><p>如果路线是人烟稀少的,请确保有一个家人知道行程安排,什么时间到什么地方</p></li>
</ol>


<h2>出行</h2>

<ol>
<li><p>携带上面提及的水和零食等,手机,钱包,钥匙,卡(公交 银行 信用卡等)</p></li>
<li><p>女的考虑怎么化妆,避免出汗后会花的</p></li>
<li><p>行进途中如果自己感觉身体状况异常,必须立即告知其它同行的人,并理解停下来实施缓解措施.状态异常比如眩晕</p>

<p>爬山消耗不小,身体处于脱水状态不是很好,别刻意不喝水,只要中途能买到水.毕竟爬山还是出来玩嘛</p>

<p>因为在一直活动,喝水不宜大口喝</p>

<p>同时也注意同行的人,有些人性格内向可能会勉强自己,避免同行的人发生状况</p></li>
<li><p>中途需要休息就休息,没必要挑战自己的极限,爬山需要耐久</p>

<p>可能会有人中途下山</p></li>
<li><p>山上会有风,出汗后不宜吹风太多,容易感冒,挡风的外套在这里比较有用</p></li>
<li><p>别做傻事,山上会有一些比较险的地形.同时也注意同行的人中哪些可能会干傻事的人,虽然这样的人很少</p></li>
<li><p>在计划的最迟下山时间即将到来前开始下山,可以考虑乘缆车下山,如果有的话</p></li>
<li><p>早点休息,一般这个时候会比较累</p></li>
</ol>


<h2>其它事项</h2>

<ol>
<li><p>任何人多的地方都要注意小偷,避免注意力被转移</p>

<p>给被偷留下二手准备,至少要有一个人做这样的准备,准备如怎么回家</p></li>
</ol>


      <p><a href="http://netwjx.github.com/blog/2012/04/07/mountain-climbing/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Play/Android Market 解锁]]></title>
    
      <category term="Android" />
    
    <link href="http://netwjx.github.com/blog/2012/03/25/unlock-google-play-android-market/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-03-25T22:09:00+08:00</published>
    <updated>2012-03-25T22:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/03/25/unlock-google-play-android-market</id>
    <content type="html"><![CDATA[<p>Android Market刚改名叫Google Play不久,不明白为什么改成这个名字,难道Play后面还有Game?</p>

<p>说说标题上的事,如果使用浏览器查找应用,应用是免费的,但是安装哪里会提示&#8221;此商品无法在您设备所在的国家/地区安装&#8221;.</p>

<p>在Google帐号设置里面怎么改都没作用.</p>

<p>而用手机搜索,要么搜不到,要么搜到了点安装仍旧是上面的提示.</p>

<p>上面提示的依据只依据一个 <strong>手机卡的网络运营商</strong>.</p>

<p>搜到一些解决办法是使用Market Enabler,但是我尝试的结果是没作用,应该是升级到了Google Play以前的方法失效了.</p>

<p>继续搜索发现了<a href="https://play.google.com/store/apps/details?id=com.evanhe.marketunlocker">Market Unlocker</a> ,使用后发现可用,下面基本是Market Unlocker的中文使用说明.</p>

<h2>Market Unlocker</h2>

<p>这个软件只能让手机可以安装哪些限制特定地区安装的软件,比如<a href="https://play.google.com/store/apps/details?id=com.com2us.inotia3.normal.freefull.google.global.android.common">Inotia 3</a> ,不可能免费安装收费的软件.</p>

<p>这个软件需要手机已经root, 或者是可以获取到root权限(我这使用小米手机会在获取root权限时提示).</p>

<p>需要wifi,并开飞行模式.</p>

<p>开始.</p>

<p><a href="https://play.google.com/store/apps/details?id=com.evanhe.marketunlocker">下载地址</a> , 或在手机上搜 Market Unlocker , 开发者是Evan He的那个 , 免费版的即可.</p>

<p>切换到飞行模式</p>

<p>安装好后会看到应用<strong>市场解锁</strong>,打开后<strong>主页</strong>中打开<strong>启用解锁</strong>,这将会有一系列的提示,如果没root这里将会失败.</p>

<p>可以在<strong>市场</strong>里面选择模拟的运营商,默认是Verizon.</p>

<p>退出,到系统设置 - 程序 - 程序管理 - 全部,找到<strong>Google Play 商店</strong>,进去后<strong>清除数据</strong>.</p>

<p>重启手机.</p>

<p>打开Wifi,在开飞行模式的情况下.</p>

<p>等待Google服务同步完成或刷新Gmail.(这段是Market Unlocker的说明,我不记得我有这步操作)</p>

<p>打开Google Play,查找需要安装的软件并安装.</p>

<p>最后关闭飞行模式.</p>

<h2>吐槽</h2>

<p>免费的应用也设置地区限制,这是什么逻辑嘛.即使是收费的,地区限制也完全没必要,只要能支付就行了.</p>

<p>况且上面的限制完全没有发挥任何作用,只是折腾人,或者使用其它的应用市场.</p>

<h2>对艾诺迪亚 3(Inotia 3)的吐槽</h2>

<p>这个游戏在480x854的解析度上看起来画面不精细,可能是我习惯了NDS哪种2D游戏的像素感了.</p>

<p>这个游戏不提供多点触控支持,即使设备支持,结果就是控制移动的时候点技能没效果,而点技能没放开的话也不能移动.再加上下面的原因会很让人觉得这设计真坑人.</p>

<p>人物的卡位,在场景中移动,遇到阻挡会自动向旁边划开,但是在战斗时前面有队友或者敌人挡住会被<em>粘住</em>,不大容易做到擦身而过,人物占位空间比实际看到的稍微大一点.</p>

<p>再加上战斗时队友不会自动让路,自动让路也仅仅支持相邻的2个,前面再挡一个自己的队友就卡住了.</p>

<p>还有一些队友AI的毛病,繁琐的物品和队伍界面.</p>

<p>总感觉玩起来不那么顺畅,熟悉了能在中间环节上快点,但是还是感觉繁琐.</p>

<p>上述这些可能是因为要兼容旧版本做的一些妥协吧.</p>

      <p><a href="http://netwjx.github.com/blog/2012/03/25/unlock-google-play-android-market/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 笔记]]></title>
    
      <category term="Octopress" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/03/18/octopress-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-03-18T14:43:00+08:00</published>
    <updated>2012-03-18T14:43:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/03/18/octopress-note</id>
    <content type="html"><![CDATA[<p>Octopress是一个blog框架, 基于Jekyll, 但是增加了很多方便的脚本, 并提供和github集成.</p>

<p>blog是生成静态页, 配合github-pages可以使用默认的2级域名或者绑定自己的顶级域名使用, 当然也可以部署到自己的服务器上.</p>

<p>这里主要是以我自己的环境来写, 即在Windows下使用Octopress. 因为Win下折腾这个中间出的问题很多.</p>

<h2>安装前提</h2>

<p>Octopress使用ruby编写, 所以需要ruby, Win下使用RubyInstaller</p>

<ul>
<li><a href="http://rubyinstaller.org">http://rubyinstaller.org</a> 因为神奇的原因我这里无法访问它.</li>
<li><a href="http://rubyforge.org/projects/rubyinstaller/">http://rubyforge.org/projects/rubyinstaller/</a> 这里可以下载到, 我现在看到的RubyInstaller最高版本是1.9.3-p125</li>
</ul>


<p>上面的网页先别关, 还有一个devkit需要下载, 全称Development Kit, 用途是编译一些ruby中使用的c模块, 常见的比如sqlite</p>

<p>那么下载的文件有</p>

<ul>
<li>rubyinstaller-1.9.3-p125.exe</li>
<li>devkit-3.4.5r3-20091110.7z</li>
</ul>


<p>Octopress可以到<a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a> 下载一份zip包, 如果已经有git环境则直接</p>

<pre><code>git clone git://github.com/imathis/octopress.git myoctopress
</code></pre>

<p>我这里使用git, 那么应该会得到一个文件夹(下面提到将名为myoctopress目录), 内容和<a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a> 上显示的一样</p>

<p>前期准备基本完成, 如果没有git而打算使用git看下段</p>

<h3>没有git, 打算使用git</h3>

<p>Win下使用简单的git是TortoiseGit</p>

<ul>
<li><a href="http://code.google.com/p/tortoisegit/">http://code.google.com/p/tortoisegit/</a> 因为神奇的原因它可能有时会无法访问</li>
<li><a href="http://goo.gl/ZpyYx">http://goo.gl/ZpyYx</a> 我在金山快盘的共享, 密码为IYzDsp</li>
</ul>


<p>由于TortoiseGit的后端使用的是Git for Windows <a href="http://code.google.com/p/msysgit/">http://code.google.com/p/msysgit/</a> , 所以下载的文件有</p>

<ul>
<li>TortoiseGit-1.7.6.0-32bit.msi</li>
<li>Git-1.7.8-preview20111206.exe</li>
</ul>


<p>版本可能不同, 名字应该都是相似的, 先安装<code>Git-1.7.8-preview20111206.exe</code>, 然后是<code>TortoiseGit-1.7.6.0-32bit.msi</code>, 然后右键菜单中就有TortoiseGit项了.</p>

<p>建议将Git for Windows安装目录的bin目录加入到环境变量Path中, 默认是<code>C:\Program Files\Git\bin</code>, 因为Octopress中会使用系统中的git命令</p>

<h2>安装Ruby</h2>

<p><code>rubyinstaller-1.9.3-p125.exe</code>建议安装到<code>c:\ruby</code>, 因为devkit中的默认配置就是这个路径</p>

<p>确保<code>C:\Ruby\bin</code>在你的环境变量Path中, 下面使用的ruby gem命令都需要</p>

<p>然后是devkit-3.4.5r3-20091110.7z解压到<code>c:\ruby</code>.</p>

<p>如果不是这个路径, 解压之后还需要到<code>devkit\msys\1.0.11\etc\fstab</code>修改文件内容.</p>

<p>如果路径包含空格, 则需要将路径转换成8.3格式短文件名, 方法是<code>dir /-n</code>, 就可以看到8.3格式的</p>

<p>建议将<code>C:\Ruby\devkit\msys\1.0.11\bin</code>也加入到环境变量Path中, 可以避免后续在安装ruby的fsevent模块时出现一个没有找到命令行的错误</p>

<p>可以运行<code>C:\Ruby\devkit\msys\1.0.11\msys.bat</code>看看, 这个是msys的环境, 一个最小的UNIX环境, 类似Cygwin, 但是原理不同, 更快, 更小, 前面Git for Windows也是基于这个.</p>

<p>打开<code>C:\Ruby\lib\ruby\1.9.1\i386-mingw32\rbconfig.rb</code>, 找到62行附近, 查找<code>-Wno-missing-field-initializers</code>, 将其删除, 我这里是复制一份新的修改并注释原来的</p>

<pre><code>#CONFIG["warnflags"] = "-Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-missing-field-initializers -Wno-long-long"
CONFIG["warnflags"] = "-Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-long-long"
</code></pre>

<p>这么做可以避免在安装ruby的本地c模块时调用gcc失败的问题, 我遇到的是无法安装RedCloth模块, 可能是devkit里面附带的gcc版本旧, 不支持这个选项吧.</p>

<h3>修改gem的源服务器地址</h3>

<p>因为神奇的原因gem可能会下载任何东西失败, 修改后可解决这个问题</p>

<p>gem是ruby的包管理程序, 类似debian的apt-get</p>

<p>打开命令行</p>

<pre><code>gem sources --remove http://rubygems.org/
gem sources -a http://ruby.taobao.org/
gem sources -l
*** CURRENT SOURCES ***

http://ruby.taobao.org
</code></pre>

<p>最后一个命令<code>gem sources -l</code>是查看当前的配置, 确保输出和上述的一致</p>

<h2>安装Octopress</h2>

<p>前面那么多准备都是为了这里, 主要参考http://octopress.org/docs/setup/.</p>

<p>下述的命令行工作目录都是在myoctopress目录, 为了方便, 你可以在myoctopress目录创建一个cmd.cmd, 内容是</p>

<pre><code>@start
</code></pre>

<p>命令行</p>

<pre><code>gem install bundler
</code></pre>

<p>会需要一会时间, 完成后打开myoctopress目录下的Gemfile, 将<code>source "http://rubygems.org"</code>注释掉, 添加<code>source 'http://ruby.taobao.org/'</code>, 如下</p>

<pre><code>#source "http://rubygems.org"
source 'http://ruby.taobao.org/'
</code></pre>

<p>这样可以让bundle不会因为神奇的原因而容易出错, 然后命令行</p>

<pre><code>bundle install
</code></pre>

<p>这会安装Octopress相关依赖的包, 比前一个命令需要更多的时间, 如果打算使用github的话可以看看下一段.</p>

<p><code>bundle install</code>执行完毕后再</p>

<pre><code>rake install
</code></pre>

<p>这个会创建好相关的目录结构</p>

<p>接下来是设置如何部署, 参考<a href="http://octopress.org/docs/deploying/">http://octopress.org/docs/deploying/</a>, 我这里使用github</p>

<h3>github上创建代码库</h3>

<p><a href="http://pages.github.com">http://pages.github.com</a> 上有详细的说明, 我使用的是User Pages, 比如我的用户名是netwjx, 那么创建项目 netwjx.github.com</p>

<p>后续还有关于域名绑定什么的就不多说了, 主要是修改CNAME记录和A记录的</p>

<p>创建好之后能看到其git访问的地址, 比如我是 <code>git@github.com:netwjx/netwjx.github.com.git</code></p>

<p>按照github上的说明将提交用的ssh public key都折腾好, 如果以前用过github最好</p>

<h2>设置部署github</h2>

<p>参考<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a> , 命令行</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>输入git的地址,比如我的是 <code>git@github.com:netwjx/netwjx.github.com.git</code></p>

<p>然后这个命令</p>

<ul>
<li>会把myoctopress中原来clone时的代码库origin改名为octopress,并将刚刚输入git地址作为origin的代码库地址.</li>
<li>会把当前分支名称从master改为source</li>
<li>其它Url的设置还有deploy目录设置等</li>
</ul>


<p>中间需要用到git命令, 所以之前安装Git for Windows后必须将其<code>bin</code>目录加入到Path中</p>

<p>中间可能会在<code>My Octopress Page is coming soon</code>之后出现<code>hellip;</code>不是内部命令之类的错误, 可以不用管, 如果一定不想要出现这个错误可以修改myoctopress目录下的Rakefile, 搜<code>My Octopress Page is coming soon</code>, 在<code>&amp;hellip;</code>前加个<code>^</code>(这个是Windows cmd的转义符), 如下</p>

<pre><code>system "echo 'My Octopress Page is coming soon ^&amp;hellip;' &gt; index.html"
</code></pre>

<p><code>rake setup_github_pages</code>命令最后出现<code>Now you can deploy to xxxxxxx with `rake deploy`</code>, 就表示成功.</p>

<p>接下来</p>

<pre><code>rake generate
</code></pre>

<p>将会在myoctopress的public目录中生成静态的文件, 可以使用下面的命令预览</p>

<pre><code>rake preview
</code></pre>

<p>通过<a href="http://localhost:4000">http://localhost:4000</a>来访问, 现在应该只能看到空白的网站.</p>

<h2>第一篇blog</h2>

<p>参考<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></p>

<pre><code>rake new_post["title"]
</code></pre>

<p>将会在<code>source/_posts</code>目录中创建指定名称的markdown文件, 文件名前面会自动加上年月日. title不能有中文, 因为这个名字会在url中使用, 中文标题可以打开这个markdown文件后自行修改, 刚刚创建的markdown文件内容如下</p>

<pre><code>---
layout: post
title: "title"
date: 2012-03-18
comments: true
categories:
---
</code></pre>

<p>这段除了title改成自己需要的, 别的可以先不管, 详细的见这段开始提到的参考.</p>

<p>如果刚刚没关闭<code>rake preview</code>, 那么现在浏览<a href="http://localhost:4000">http://localhost:4000</a>应该能看到有了新的变化.</p>

<h2>提交到github</h2>

<p>先把<code>rake preview</code>关掉, 命令行</p>

<pre><code>rake deploy
</code></pre>

<p>如果是直接使用TortoiseGit, 而不是Git for Windows的话, 这里将会因为ssh配置相关而发生错误. 修改配置会另起一篇来说, 这里可以自行使用TortoiseGit来提交.</p>

<p>先说明一下目录的情况</p>

<ul>
<li><code>myoctopress</code> 是source分支</li>
<li><code>myoctopress/_deploy</code> 是master分支</li>
</ul>


<p>如果仅仅需要看到网站, 只需要在<code>myoctopress/_deploy</code>目录中用TortoiseGit的<code>Git Sync</code>, Remote Branch选择<code>master</code>, 然后Push即可</p>

<p>如果同时需要将原始的markdown等文件也提交到github, 就是在<code>myoctopress</code>目录做类似的操作.</p>

<p>先在<code>myoctopress</code>目录中把已经修改的文件和<code>source\_posts</code>目录下的新文件都<code>Git Commit -&gt; "source"</code></p>

<p>然后<code>Git Sync</code>, 在Remote Branch选择<code>source</code>, 如果没有这个分支就自己填上, 再Push.</p>

<p>如果Push请确认<code>Git Sync</code>时的Remote URL设置的是<code>origin</code>, 另外一个<code>octopress</code>是Octopress项目的Url, 所以Push会失败, 除非你获得了操作Octopress项目的权限.</p>

<h3>结构说明</h3>

<p>github上的<code>master</code>(网站)和<code>source</code>(原始文件), 与本地的对应分支/目录是平等的关系, 上面提交到github不能理解为从属关系, 了解git的话这个很容易理解.</p>

<p>可以按照需要将<code>myoctopress/_deploy</code> (master分支) 目录放到任何Web服务器(当然会有一些绝对路径有问题)</p>

<p>同样<code>myoctopress</code>(source分支)可以不向github上Push, 而保留在自己本机, 或者Push到U盘等其它备份的地方, 熟悉git的话这是很自然的事.</p>

<h2>还剩下些</h2>

<p>Octopress的文档中github相关都是使用git命令行, 上述的操作在Push时使用的是TortoiseGit,  使用Git for Windows操作github上的代码库以后另起一篇来说.</p>

<p>这些是根据昨天的操作回忆而写的, 所以可能有疏漏和记忆偏差.</p>

<p>Octopress的模版, 评论, 还有其它扩展可以Google, 以后用到也许会写些文章.</p>

<p>Octopress自身的东西在<a href="http://octopress.org/docs/">http://octopress.org/docs/</a>上很全.</p>

<p>我没学过ruby, 上面提及ruby相关的地方很可能概念有错.</p>

      <p><a href="http://netwjx.github.com/blog/2012/03/18/octopress-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    
      <category term="Hello World" />
    
    <link href="http://netwjx.github.com/blog/2012/03/18/hello-octopress/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-03-18T02:34:00+08:00</published>
    <updated>2012-03-18T02:34:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/03/18/hello-octopress</id>
    <content type="html"><![CDATA[<p>终于折腾起来了</p>

<p>深深的感觉到在win上折腾实在是极端的痛苦啊</p>

<p>基本是四处碰壁,还都是很难找到答案的</p>

<p>5个小时就这样过去了</p>

      <p><a href="http://netwjx.github.com/blog/2012/03/18/hello-octopress/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
