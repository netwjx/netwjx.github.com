<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[netwjx]]></title>
  <link href="http://netwjx.github.com/atom.xml" rel="self"/>
  <link href="http://netwjx.github.com/"/>
  <updated>2012-07-23T21:28:55+08:00</updated>
  <id>http://netwjx.github.com/</id>
  <author>
    <name><![CDATA[netwjx]]></name>
    <email><![CDATA[netwjx@mail.com]]></email>
    <uri>http://netwjx.github.com/</uri>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>
  <icon>/favicon.png</icon>
  <subtitle><![CDATA[混乱与有序]]></subtitle>

  
  <entry>
    <title type="html"><![CDATA[Windows命令行和批处理技巧]]></title>
    
      <category term="Bat" />
    
      <category term="Cmd" />
    
      <category term="Command" />
    
      <category term="Shell" />
    
      <category term="Windows" />
    
    <link href="http://netwjx.github.com/blog/2012/07/23/windows-shell-and-bat-skills/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-23T21:17:00+08:00</published>
    <updated>2012-07-23T21:17:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/23/windows-shell-and-bat-skills</id>
    <content type="html"><![CDATA[<p>有时不方便使用通用编程语言完成一些常见的目标, 会考虑使用命令行, 但是命令行的资料不容易找, 主要因为它有不少是字母和符号, 基本上搜索引擎会忽略这些特殊符号, 所以这里收集一些这方面的技巧.</p>

<p>下面代码示例中<code>rem</code>表示对下一行的注释, 一般下一行以<code>&gt;</code>开始, 表示在命令提示符中输入的, 再下一行表示大概的输出. 整块的代码一般是文件内容, 将会以文件中的形式表现.</p>

<!-- more -->


<h2>更新日志</h2>

<p>最新的在最开始</p>

<ol>
<li>2012-07-23  <strong>延缓环境变量扩展</strong>特性的说明</li>
<li>2012-06-16  完善输出重定向, for命令的tokens参数说明</li>
<li>2012-05-19  完成最初计划的内容</li>
<li>2012-05-13  初稿, 未完成</li>
</ol>


<h2>打开命令行</h2>

<p>除了<code>Win+R cmd</code>打开外, 还可以在文件窗口中按住<strong>Shift + 鼠标右键</strong>, <strong>在此处打开命令窗口</strong>, 在文件夹上<strong>Shift + 鼠标右键</strong>同样有这个菜单项.</p>

<h2 id="multi-commands">在一行执行多个命令</h2>


<ul>
<li><p><code>command1 &amp; command2</code></p>

<p>先执行command1, 然后是command2, 一般在<code>cmd</code>开启新的命令提示符窗口时比较有用</p>

<pre><code>cmd echo 1 &amp;&amp; echo 2 &amp;&amp; echo 3
</code></pre></li>
<li><p><code>command1 &amp;&amp; command2</code></p>

<p>先执行command1, 如果执行成功(退出码为0), 将会接着执行command2</p></li>
<li><p><code>command1 || command2</code></p>

<p>和<code>&amp;&amp;</code>相反, 如果command1执行失败将会执行command2</p></li>
<li><p><code>(command1 &amp; command2)</code></p>

<p><code>()</code>用于组合嵌入多个命令, 可以在其中使用换行符, 将类似<code>&amp;</code>的效果, 只是写成了多行, 在<code>for</code>和<code>if</code>中很有用</p>

<pre><code>if not defined foo (
    set foo = bar
)
</code></pre></li>
<li><p><code>command1 param1;param2</code></p>

<p>分割命令的参数, 也可以使用符号<code>,</code>.</p></li>
</ul>


<p>如果命令参数中有<code>&amp;</code> <code>|</code> <code>()</code> <code>&gt;</code> <code>&lt;</code> <code>^</code>则需要使用<code>^</code>转义</p>

<pre><code>&gt;echo ^&amp;
&amp;
</code></pre>

<h2>环境变量</h2>

<p>set命令用于基本的查看和设置环境变量</p>

<pre><code>&gt;set
....
USERNAME=netwjx

&gt;set user
USERNAME=netwjx

&gt;set username
USERNAME=netwjx

&gt;set myvar=varvalue
</code></pre>

<p>同样的, 如果变量值包含<code>&amp;</code> <code>|</code> <code>&gt;</code> <code>&lt;</code> <code>^</code>, <a href="#multi-commands">使用<code>^</code>转义符</a></p>

<p>set命令的进一步使用可用来计算数字</p>

<pre><code>&gt;set /p expr=输入时间,单位分钟,例如:5*60+35
输入时间,单位分钟,例如:5*60+35
&gt;3*60+11
&gt;set /a sec=%expr%
191
&gt;echo %sec%
191
</code></pre>

<p>使用环境变量</p>

<pre><code>&gt;echo %myvar%&gt; foo.txt
</code></pre>

<p><code>%myvar%</code>将会被替换成变量值, 并将这个值输出到<code>foo.txt</code>.</p>

<p>检测环境变量是否有定义</p>

<pre><code>if not defined foo (
    echo need %foo%
)
</code></pre>

<p>在执行一行命令时, <code>%myvar%</code>的替换将只会执行一次, 所以在<code>for</code> <code>if</code>或者<code>()</code>组合的多个命令中, 如果变量被修改过, 就需要使用<strong>延缓环境变量扩展</strong>, 使用下列命令</p>

<pre><code>setlocal enabledelayedexpansion
</code></pre>

<p>然后在需要的地方将原来的<code>%</code>替换为<code>!</code>, 如下</p>

<pre><code>set VAR=before
if "%VAR%" == "before" (
    set VAR=after
    if "!VAR!" == "after" @echo If you see this, it worked
)
</code></pre>

<p>要关闭<strong>延缓环境变量扩展</strong>特性除了</p>

<pre><code>setlocal disabledelayedexpansion
</code></pre>

<p>还可以</p>

<pre><code>endlocal
</code></pre>

<p>在<code>for</code>的<code>do</code>部分, 只有<code>for</code>的循环变量是个特例, 每次执行循环都会被替换为循环变量</p>

<h3>获取一个命令行的输出到环境变量</h3>

<p>执行<code>set</code>命令, 并将每行的内容作为循环变量%i输出</p>

<pre><code>&gt;for /f %i in ('set') do @echo %i
...
windir=C:\windows
</code></pre>

<p>有时可能不方便使用单引号<code>'</code>, 可以使用反引号<code>`</code></p>

<pre><code>&gt;for /f "usebackq" %i in (`set`) do @echo %i
...
windir=C:\windows
</code></pre>

<p>更多关于<a href="#for-command"><code>for</code>命令</a></p>

<h3 id="built-in-var">内建环境变量</h3>


<p>内建环境变量是在执行变量替换的时候最先检查的, 其中也有一些比较有用的</p>

<ul>
<li><p><code>%ALLUSERSPROFILE%</code></p>

<p>返回<strong>所有用户</strong>的数据目录, 对于Win7, 它是<code>C:\ProgramData</code></p></li>
<li><p><code>%APPDATA%</code></p>

<p>返回当前用户的应用程序数据存储目录</p></li>
<li><p><code>%CD%</code></p>

<p>返回当前活动目录</p></li>
<li><p><code>%CMDCMDLINE%</code></p>

<p>返回当前命令行解释器的路径, 结果是被双引号<code>"</code>括起来的</p></li>
<li><p><code>%CMDEXTVERSION%</code></p>

<p>返回当前命令行处理扩展的版本号</p></li>
<li><p><code>%COMPUTERNAME%</code></p>

<p>返回当前计算机名称</p></li>
<li><p><code>%COMSPEC%</code></p>

<p>和<code>%CMDCMDLINE%</code>基本一样, 只是结果不是被双引号<code>"</code>括起来的</p></li>
<li><p><code>%DATE%</code></p>

<p>返回当前的日期, 格式和<code>date /t</code>命令相同, 这个还和系统的区域和语言设置有关, 实际处理起来通用性不是很好.</p></li>
<li><p><code>%ERRORLEVEL%</code></p>

<p>返回最近一次命令的执行结果, 一般非0表示发生了错误.</p></li>
<li><p><code>%HOMEDRIVE%</code></p>

<p>返回用户目录所在的盘符, 格式如<code>C:</code></p></li>
<li><p><code>%HOMEPATH%</code></p>

<p>返回用户目录的路径, 不包括盘符, 格式如<code>\Users\netwjx</code></p></li>
<li><p><code>%HOMESHARE%</code>, <code>%LOGONSEVER%</code></p>

<p>文档中有, 但是我没测试出来有效值</p></li>
<li><p><code>%NUMBER_OF_PROCESSORS%</code></p>

<p>返回系统的处理器数量</p></li>
<li><p><code>%OS%</code></p>

<p>返回操作系统名称, 基本上Win2000以后都是<code>Windows_NT</code></p></li>
<li><p><code>%PATH%</code></p>

<p>可执行文件的搜索路径</p></li>
<li><p><code>%PATHEXT%</code></p>

<p>可执行文件后缀</p></li>
<li><p><code>%PROCESSOR_ARCHITECTURE%</code></p>

<p>返回处理器架构, <code>x86</code> <code>IA64</code></p></li>
<li><p><code>%PROCESSOR_IDENTIFIER%</code></p>

<p>返回处理器描述</p></li>
<li><p><code>%PROCESSOR_LEVEL%</code></p>

<p>返回处理器的系列编号</p></li>
<li><p><code>%PROCESSOR_REVISION%</code></p>

<p>返回处理器的修订编号</p></li>
<li><p><code>%PROMPT%</code></p>

<p>返回当前命令提示符窗口的提示符, 可以通过<code>prompt</code>命令修改</p></li>
<li><p><code>%RANDOM%</code></p>

<p>返回一个随机数字, 范围在0到32767之间</p></li>
<li><p><code>%SYSTEMDRIVE%</code></p>

<p>返回操作系统所在的盘符</p></li>
<li><p><code>%SYSTEMROOT%</code></p>

<p>返回操作系统的根路径, 包含盘符</p></li>
<li><p><code>%TEMP%</code> <code>%TMP%</code></p>

<p>返回当前用户的临时目录</p></li>
<li><p><code>%TIME%</code></p>

<p>返回当前的时间, 格式类似<code>time /t</code>命令返回的, 这个还和系统的区域和语言设置有关, 实际处理起来通用性不是很好.</p></li>
<li><p><code>%USERDOMAIN%</code></p>

<p>返回当前用户所在的域, 或工作组名</p></li>
<li><p><code>%USERNAME%</code></p>

<p>返回当前登录的用户</p></li>
<li><p><code>%USERPROFILE%</code></p>

<p>返回当前用户目录</p></li>
<li><p><code>%WINDIR%</code></p>

<p>返回当前操作系统的路径, 类似<code>%SYSTEMROOT%</code></p></li>
</ul>


<p>在内建环境变量中没有指定名称的变量后, 会依次从下面的位置查找</p>

<ul>
<li>系统变量</li>
<li>当前用户变量</li>
<li>Autoexec.bat 中定义的变量</li>
<li>登录脚本中定义的变量(如果有提供登录脚本)</li>
<li>当前命令提示符窗口或批处理中定义的变量</li>
</ul>


<h2>管道和重定向</h2>

<p>一个常见的场景, 查找使用特定网络端口的应用程序</p>

<pre><code>&gt;netstat -ano | find ":4000"
  UDP    0.0.0.0:4000           *:*                                    3876
</code></pre>

<p>其中最右边的<strong>3876</strong>是应用程序的进程ID, 而<code>|</code>是管道操作符.</p>

<p>管道操作将会把左边命令的输出, 作为右边命令的输入. 上面例子中<code>netstat -ano</code>将会输出本机的网络连接和对应的进程, <code>find ":4000"</code>则是在输入中找包含字符串<code>:4000</code>的行.</p>

<p>重定向和管道也很相似, 典型的用途是将一个命令的输出保存为文本文件.</p>

<pre><code>&gt;netstat -ano &gt; foo.txt
</code></pre>

<p>可以在当前目录中看到<code>foo.txt</code>, 其内容是<code>netstat -ano</code>命令的输出.</p>

<p>可以和管道操作结合, 将查出来的本地网络连接信息保存到文件</p>

<pre><code>?netstat -ano | find ":4000" &gt; foo.txt
</code></pre>

<p><code>&gt;</code>会始终覆盖原来的文件, 使用<code>&gt;&gt;</code>则会在文件结尾添加</p>

<pre><code>&gt;netstat -ano &gt;&gt; foo.txt
</code></pre>

<p>随着反复的运行, <code>foo.txt</code>的结尾会一直增加.</p>

<p>有一个特殊的管道目标叫<code>clip</code>, 可以用来操作系统剪贴板</p>

<p>还有一个特殊的输出设备叫<code>nul</code>, 它不会产生任何文件, 效果就像执行了命令, 但是不回显命令的输出, 在<a href="#sleep-ping">延迟 Sleep</a>有这个例子.</p>

<p>上述可以将命令正常执行的结果重定向到文件, 但是错误信息仍旧会输出到命令提示符窗口(<strong>标准输出</strong>)</p>

<pre><code>&gt;netstat -x &gt; nul

显示协议统计和当前 TCP/IP 网络连接。

NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-t] [interval]
....
</code></pre>

<p>默认错误信息输出的目标叫<strong>标准错误输出</strong>, 仍旧可以让其不显示</p>

<pre><code>&gt;netstat -x &gt; nul 2&gt;&amp;1
</code></pre>

<p>其中<code>&gt;&amp;</code>也是重定向操作符, 需要配合<code>&gt;</code> <code>&gt;&gt;</code>使用, 2<strong>标准错误输出</strong>, 1表示<strong>标准输出</strong>.</p>

<p><code>&gt; nul 2&gt;&amp;1</code>表示在将标准输出重定向到<code>nul</code>的同时将<strong>标准错误输出</strong>重定向到<strong>标准输出</strong>, 这样就完成了完全隐藏命令行输出的正常信息和错误信息.</p>

<p>关于重定向的数字下面是完整的参考</p>

<ul>
<li><p><code>0</code> STDIN</p>

<p>标准输入, 键盘输入</p></li>
<li><p><code>1</code> STDOUT</p>

<p>标准输出, 命令提示符窗口输出</p></li>
<li><p><code>2</code> STDERR</p>

<p>标准错误输出, 命令提示符窗口输出</p></li>
<li><p><code>3-9</code> UNDEFINED</p>

<p>未定义, 参考文档中描述其在特定应用程序中会使用, 但是没找到具体使用的例子, 所以我目前也不清楚具体使用是怎么样的.</p></li>
</ul>


<p>如果仅想取得命令的错误信息可以这样</p>

<pre><code>&gt;netstat -x 2&gt; foo.txt
</code></pre>

<p>在<a href="#ref-links">参考链接</a>中<strong>Using filters</strong>有管道和重定向混合使用示例.</p>

<h3>输入重定向</h3>

<p>上面的重定向都是输出重定向, 这里开始介绍输入重定向.</p>

<p>在介绍管道的时候使用了<code>find</code>命令, 它会在<strong>标准输入</strong>中查找指定字符串, 除了使用管道外, 还可以使用输入重定向</p>

<pre><code>&gt; netstat -ano &gt; foo.txt
&gt; find ":4000" &lt; foo.txt
  UDP    0.0.0.0:4000           *:*                                    3876
</code></pre>

<p>这会使用中间文件<code>foo.txt</code></p>

<p>而<strong>标准输入</strong>实际是个特殊的输入设备<code>con</code></p>

<pre><code>&gt;find "foo" &lt; con
</code></pre>

<p>等价于</p>

<pre><code>&gt;find "foo"
</code></pre>

<p>每当输入包含foo的字符串并回车后, 会立即回显一次.</p>

<p>比如使用用户输入来创建文件</p>

<pre><code>&gt;copy con foo.txt
&gt;bar
&gt;hello world
&gt;^Z
已复制         1 个文件。
</code></pre>

<p>其中<code>^Z</code>表示<code>Ctrl+Z</code>, 输入结束.</p>

<p>除了<code>find</code>会使用标准输入外, 常见的还有下列命令也会使用标准输入</p>

<ul>
<li><p><code>more</code></p>

<p>用于逐屏显示标准输入</p></li>
<li><p><code>sort</code></p>

<p>按行排序标准输入</p></li>
</ul>


<p>还有一个<code>&lt;&amp;</code>重定向操作符, 文档中的解释是会从右边的设备读取输入, 并从左边输出, 我实在想不出来这具体是在什么场景下使用, 所以也不知道如何介绍.</p>

<p>在<a href="#ref-links">参考链接</a>中<strong>Using filters</strong>有管道和重定向混合使用示例.</p>

<h2>在多个目录间切换工作目录</h2>

<pre><code>&gt;pushd d:\foo
</code></pre>

<p>将当前工作目录保存后, 立即将工作目录切换到<code>d:\foo</code>.</p>

<pre><code>&gt;popd
</code></pre>

<p>将当前工作目录切换到最近一次<code>pushd</code>时所在的工作目录.</p>

<p>很典型的一个栈stack结构, push和pop. stack为空时pop将没有任何效果.</p>

<p>比<code>cd</code>命令好用的是<code>cd</code>在跨盘符的时候还需要手工切换盘符.</p>

<h2 id="sleep-ping">延迟 Sleep</h2>


<pre><code>&gt;ping -n 4 -w 1000 127.0.0.1 &gt; nul
</code></pre>

<p>这将会延迟3秒, 其中<code>-n</code>参数表示的是重复ping的次数, 将决定最终的延迟的时间.</p>

<p>因为<code>ping 127.0.0.1</code>会立即返回, 所以实际延迟的时间是 <code>-n</code>参数 - 1 的秒数.</p>

<h2>echo特殊字符</h2>

<p>一般使用<code>%</code>作为转义字符</p>

<pre><code>&gt;echo %username%
netwjx

&gt;echo %%username%
%netwjx
</code></pre>

<p>但是<code>&amp;</code> <code>|</code>需要使用<code>^</code>转义, 这个在上面<a href="#multi-commands">在一行执行多个命令</a>已经有描述</p>

<pre><code>&gt;echo ping -n 3 127.0.0.1^&gt;nul
ping -n 3 127.0.0.1^&gt;nul

&gt;echo netstat -ano^|find ":80"
netstat -ano|find ":80"
</code></pre>

<p>P.S. Linux下echo转义符号是<code>\</code></p>

<p>空行, 在echo紧跟<code>.</code></p>

<pre><code>&gt;echo.
</code></pre>

<p>使用echo和输出重定向可以产生文本文件, 可以用来产生脚本批处理等.</p>

<h2 id="for-command">for命令</h2>


<p>如果在批处理文件中使用<code>for</code>则需要将<code>%i</code>写为<code>%%i</code>, 象下面这样</p>

<pre><code>&gt;for /f %%i in ('set') do @echo %%i
</code></pre>

<p>使用<code>for</code>命令的循环变量时, 可以使用类似批处理哪样的<a href="#batch-param-modifiers">参数修饰符</a></p>

<pre><code>&gt;for %I in (*.log) do @echo %~nxI
log.log
....
</code></pre>

<p>下面例子将使用在命令提示符窗口中的写法, 而不是批处理文件中的写法.</p>

<p><code>for</code>命令一般是用于处理多个文件, 文件的多行, 也可以用于处理另外一个命令的输出. 下面是显示<code>*.log</code>文件的例子</p>

<pre><code>&gt;for %i in (*.log) do @echo %i
C:\Log\log.log
....
</code></pre>

<p>匹配目录</p>

<pre><code>&gt;for /d %i in (.*) do @echo %i
.svn
....
</code></pre>

<p>枚举当前目录所有<strong>.txt</strong>文件</p>

<pre><code>&gt;for /r %i in (*.txt) do @echo %i
C:\foo.txt
C:\bar\foo.txt
....
</code></pre>

<p>枚举所有名字以<code>.</code>开始目录, 主要是指<code>.svn .hg</code>这些</p>

<pre><code>&gt;for /d /r %i in (.*) do @echo %i
C:\Users\Netwjx\.ssh
....
</code></pre>

<p>数字的循环变量</p>

<pre><code>&gt;for /l %i in (0, 1, 5) do @echo %i
0
1
2
3
4
5
</code></pre>

<p>注意初始值<code>0</code>和最大值<code>5</code>, 都会包含在内, 也就是这个循环将执行<strong>6次</strong>.</p>

<p>显示文件中的每行, 从开始到第一个空格到<code>tab</code>之间的字符串</p>

<pre><code>&gt;for /f %i in (mylog.log) do @echo %i
15:07:50.947:
15:07:50.947:
15:07:50.947:
....
</code></pre>

<p><code>/f</code>还可以使用一些参数, 下面将会把<code>path</code>环境变量的第一个<code>;</code>之前的内容输出</p>

<pre><code>&gt;for /f "usebackq delims=;= tokens=2" %i in (`set path`) do @echo %i
C:\Ruby\bin
.COM
</code></pre>

<p>详细参数如下, 空格分割</p>

<ul>
<li><p><code>eol=c</code></p>

<p>指定行注释字符, 以<code>c</code>字符开始的行将被忽略</p></li>
<li><p><code>skip=n</code></p>

<p>指定忽略开始的n行</p></li>
<li><p><code>delims=xxx</code></p>

<p>指定分割字符, 可以指定多个, 配合<code>tokens</code>参数使用, 类似传统编程语言中<code>split</code>函数的分割字符</p></li>
<li><p><code>tokens=x,y,m-n</code></p>

<p>将<code>x y</code>以及<code>m-n</code>之间的字符串返回给循环变量, 下标从1开始, 如果有<code>y*</code>, 则表示从第<code>y</code>个往后的所有都返回, 下一段有详细的使用示例.</p></li>
<li><p><code>usebackq</code></p>

<p>表示使用<code>`</code>符号表示一个命令行, 而不是传统的<code>'</code>符号</p></li>
</ul>


<p>配合自定义的命令行程序, 可以自行处理命令提示符窗口的输入和输出, 以及弥补<a href="#built-in-var">内建环境变量</a>中<code>%date%</code>和<code>%time%</code>格式不固定的问题.</p>

<h3>使用for的tokens参数</h3>

<p><code>tokens</code>参数可以用来提取命令行或文件的返回值, 最基本的如:</p>

<pre><code>&gt;for /f "tokens=2" %i in ("1 2 3 4 5 6 7 8") do @echo %i
2
</code></pre>

<p><code>tokens</code>可以指定多个, 会隐式的将对应索引的值赋给按照字母顺序命名的循环变量:</p>

<pre><code>&gt;for /f "tokens=2,4,6-8" %i in ("1 2 3 4 5 6 7 8") do @echo %i %j %k %l %m %n
2 4 6 7 8 %n
</code></pre>

<p>可以看到<code>tokens=2,4,6-8</code>分别会给<code>%i %j %k %l %m</code>赋值, 而<code>%n</code>则原样显示.</p>

<p>还有<code>y*</code>的例子</p>

<pre><code>&gt;for /f "tokens=2*" %i in ("1 2 3 4 5 6 7 8") do @echo %j %k
3 4 5 6 7 8 %k
&gt;for /f "tokens=2*" %i in ("1 2 3 4 5 6 7 8") do @echo %i %j %k
2 3 4 5 6 7 8 %k
</code></pre>

<p><code>2*</code>将会把从第2个开始(不包括)往后所有的都赋给了<code>%j</code></p>

<h3>查询注册表</h3>

<p>这是个使用<code>for</code>执行命令并取得命令执行结果到变量的典范.</p>

<pre><code>&gt;for /f "tokens=3 skip=2" %i in ('reg query HKEY_CLASSES_ROOT\txtfile\shell\open\command /ve') do @echo %i
C:\windows\notepad.exe
</code></pre>

<p>其中<code>reg query</code>命令是读取注册表, 返回的内容类似下面</p>

<pre><code>HKEY_CLASSES_ROOT\txtfile\shell\open\command
(默认)    REG_SZ    C:\windows\notepad.exe %1
</code></pre>

<p>因为其开始会有一个空行, 所以<code>/f</code>参数有<code>skip=2</code></p>

<h2>批处理文件</h2>

<p>批处理文件可以是<code>bat</code>后缀, 也可以是<code>cmd</code>后缀.</p>

<p>批处理文件需要保存为ANSI格式, 对于中文Windows是GBK, 不建议用<strong>UTF-8</strong>, 也不建议有<strong>BOM</strong></p>

<h3>不回显输入的命令</h3>

<p>以<code>@</code>开始的命令将不会回显</p>

<pre><code>&gt;@echo hello
</code></pre>

<p>同时可以使用<code>echo off</code>关闭回显, 如果两者结合的话就是</p>

<pre><code>&gt;@echo off
</code></pre>

<p>一般在批处理文件第一行, 可以使所有命令都不回显.</p>

<p>一般调试时可能会需要在某行之后回显, 可以再<code>echo on</code>打开回显.</p>

<h3>批处理参数</h3>

<p>使用<code>%1</code>到<code>%9</code>获取, 其中<code>%0</code>是当前批处理文件的路径.</p>

<figure class='code'><figcaption><span>Foo\test.bat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%0</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%1</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%2</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%3</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">%4</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用示例</p>

<pre><code>&gt;Foo\test.bat 1 2 3 4
Foo\test.bat
1
2
3
4
</code></pre>

<p><code>%0</code> 可用来删除脚本自身, 不过这行必须放结尾, 因为一旦删除就会脚本执行出错.</p>

<p>可以用<code>if</code>检测参数是否提供</p>

<pre><code>&gt;if not "%4"=="" echo %4
</code></pre>

<p>1-9不够用可以使用<code>shift</code></p>

<pre><code>&gt;rem 将参数队列弹出一个, 这将会使旧的%1值被移除, 旧的%2变成%1, 旧的%3变成%2
&gt;shift
&gt;rem 和上面的类似, 只是一次弹出2个, 旧的%1 %2被移除, 旧的%3 %4 %5将变成%1 %2 %3
&gt;shift /2
</code></pre>

<p>如果仅需要将当前的参数原封不动的传递给别的命令行程序, 使用<code>%*</code></p>

<pre><code>&gt;call foo.bat %*
</code></pre>

<p><code>%*</code>将包含原始的<code>%1-%n</code>的参数, 不受<code>shift</code>影响, <code>%*</code><strong>不能使用</strong><a href="#batch-param-modifiers">参数修饰符</a></p>

<h3 id="batch-param-modifiers">参数修饰符</h3>


<p>参数修饰可以将指定参数扩展为文件或目录名, 使用当前的盘符和目录信息.</p>

<pre><code>&gt;rem 把%1参数扩展为包含盘符和路径的字符串
&gt;echo %~dp1
</code></pre>

<p>完整的修饰符列表</p>

<ul>
<li><p><code>%~1</code></p>

<p>扩展%1参数并移除参数两边的双引号<code>"</code></p></li>
<li><p><code>%~f1</code></p>

<p>扩展%1参数为完整的路径</p></li>
<li><p><code>%~d1</code></p>

<p>扩展%1参数为盘符</p></li>
<li><p><code>%~p1</code></p>

<p>扩展%1参数为路径, 不包括盘符和文件名</p></li>
<li><p><code>%~n1</code></p>

<p>扩展%1参数为文件名, 不包括扩展名</p></li>
<li><p><code>%~x1</code></p>

<p>扩展%1参数为扩展名, 包含点</p></li>
<li><p><code>%~s1</code></p>

<p>扩展%1参数为仅包含短名称目录名的路径</p></li>
<li><p><code>%~a1</code></p>

<p>扩展%1参数为文件属性, 格式如<code>--a------</code>, 其它标志位的字母可以自行测试</p></li>
<li><p><code>%~t1</code></p>

<p>扩展%1参数为文件修改时间, 格式如<code>2011/07/31 17:04</code></p></li>
<li><p><code>%~z1</code></p>

<p>扩展%1参数为文件大小的数字, 单位字节</p></li>
<li><p><code>%~$PATH:1</code></p>

<p>在PATH环境变量中指定的所有目录中(分号<code>;</code>分割的目录路径)搜索名为%1的文件名, 返回第一个发现的文件路径, 如果环境变量不存在或者找不到文件, 将返回空白的字符串</p></li>
</ul>


<p>上述的修饰符和多重叠加</p>

<pre><code>&gt;rem 搜索PATH环境变量的路径中名为%1的文件, 并返回第一个找到的文件的盘符和路径
&gt;echo %~dp$PATH:1
</code></pre>

<h3>调用其它批处理</h3>

<p>一般是可以直接<code>other.bat</code>, 但是可能会发生一些奇怪的现象, 如后续的命令未执行之类的, 所以</p>

<pre><code>&gt;call other.bat arg1 arg2
</code></pre>

<h3>goto跳转到标记</h3>

<p>和传统编程语言中的用法一样</p>

<pre><code>if "%1"=="" goto help

echo running
....
goto end

:help
echo help message
goto :EOF

:end
echo completed
</code></pre>

<p>标记使用<code>:label</code>来定义, 然后是<code>goto label</code>跳转.</p>

<p>有一个特殊标记<code>:EOF</code>表示结束, 使用时是<code>goto :EOF</code>.</p>

<h2 id="ref-links">参考链接</h2>


<ul>
<li><p><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/batch.mspx?mfr=true">Using batch files</a></p></li>
<li><p><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/percent.mspx">Using batch parameters</a></p></li>
<li><p><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/redirection.mspx?mfr=true">Using command redirection operators</a></p></li>
<li><p><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/filters.mspx?mfr=true">Using filters</a></p></li>
<li><p><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx">Cmd</a></p></li>
<li><p><a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ntcmds_shelloverview.mspx">Command shell overview</a></p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/23/windows-shell-and-bat-skills/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动电源备忘]]></title>
    
      <category term="Memo" />
    
      <category term="Portable" />
    
      <category term="Power" />
    
    <link href="http://netwjx.github.com/blog/2012/07/19/portable-power-memo/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-19T21:17:00+08:00</published>
    <updated>2012-07-19T21:17:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/19/portable-power-memo</id>
    <content type="html"><![CDATA[<p>买了移动电源之后就计划写点关于移动电源的事, 翻看todo的时候才想起来该把这个补上.</p>

<p>因为有2个手机和NDS, 手机一个是之前提过的黑莓8310, 另外一个是小米手机, 而平时玩小米手机时间挺多, 再加上临近过年, 要回家, 路上肯定会玩手机, 很可能电力不足.</p>

<p>在淘宝上搜移动电源的话, 品牌主要是<a href="http://www.yoobao.com/">羽博</a>和<a href="http://www.pisen.com.cn/">品胜</a>的, 外观时尚, 体积和电容量给设备充一次是没问题.</p>

<p>在电玩网站发现还有<a href="http://www.powerunite.com.cn/">联力众(续航大师)</a>, <a href="http://www.sino-ele.cn/">西诺电子</a>, <a href="http://www.tposchina.com/">TPOS</a>, <a href="http://www.fanmei.net/">微发</a>, 因为是给电玩充电的, 所以电容量都比较大, 相应体积重量也提高了.</p>

<p>另外还有淘宝聚划算和淘宝试用中心还有一些我感觉很冷门的品牌, 如力杰, 还是做时尚外观, 电容量一般充一次没问题.</p>

<p>移动电源目前都是锂电池, 因为锂电池有可能发生爆炸, 所以我专门找了些关于锂电池拆机的评测, 主要在电玩网站上有, 下面是我根据回忆整理的一些信息.</p>

<!-- more -->


<h2>锂电池和聚合物电池</h2>

<p><img class="left" src="http://image.made-in-china.com/2f0j00QMbtBfNRaIqk/Li-ion-Battery-Cylinder-18650-18490-17650-14500-.jpg" width="260" title="18650锂电芯" alt="18650锂电芯"></p>

<p><strong>锂电池</strong> 指的是传统的锂离子电池, 一般移动电源中使用的锂电池是18650圆柱形锂电芯, 18650的意思是18mm直径, 65mm高度的圆柱形.</p>

<p>羽博和品胜的移动电源使用的是这个电芯, 多数笔记本也使用的是这样的电池.</p>

<p>在高温中工作是一定会爆炸的, 漏液什么的现在应该几乎见不到了.</p>

<hr />

<p><img class="right" src="http://i05.c.aliimg.com/img/ibank/2011/502/186/449681205_886818038.jpg" width="260" title="ATL聚合物电芯" alt="ATL聚合物电芯"></p>

<p><strong>聚合物电池</strong> 指的是聚合物锂离子电池, 还是锂电池, 只是一般聚合物电池的特性可以做成片状, 现在新的手机哪些高容量电池都是这种的. 而且聚合物电池不会爆炸,</p>

<p>电玩网站提到的移动电源基本都使用的是ATL电芯.</p>

<p>我看过一个视频是把电池放下面点火的铁盘上加热, 最后膨胀, 冒烟, 但是没有爆炸. 对照视频中的锂离子电池在加热到一定程度就爆炸, 电池残骸飞出去了.</p>

<h2>移动电源的电容量</h2>

<p>电池的电容量一般是mhA标注, 1000mhA的意思是以1000mA电流, 电池的额定电压放电, 能持续放电1小时.</p>

<p>考虑电容量不能简单的除以现在电池的容量, 应按照放电时间来计算是比较靠谱的.</p>

<p>比如我的小米手机充电器的放电是5V 1A, 充满1930mhA的小米手机电池, 需要2小时40分钟左右.</p>

<p>我购买的微发移动电源, 电容量是8800mhA, 因为锂电池的放电电压不足5V, 所以会有升压电路. 如果要提供5V 1A的输出, 输出电流可能在1300mhA左右, 因为锂电池会随着持续放电而电压降低, 一般是从4.2V到3.2V, 低于3V会使电芯受损, 所以一般都有过放电保护, 越往后需要的输出电流越多.</p>

<p>使用1300mhA计算, 那么8800mhA以5V 1A输出能持续放电6小时46分钟左右, 用总放电时间除以充满一次点需要的时间, 结果就是2次半左右, 以我实际使用的测试情况来计算也是如此.</p>

<blockquote><p>简单估算方法: 充满1000mhA的电池, 移动电源需要消耗大概1800mhA的电量.</p></blockquote>


<h2>移动电源的输出效率</h2>

<p>简单的可以理解为转换效率高能对电池利用的更多, 比如微发8800mhA电源在1A的输出下可以达到97%的输出效率. 一般在90%以上为佳.</p>

<p>这个参数一般看不到, 最好是看看评测, 一般移动电源有一个最佳的放电电流, 能够得到十分高的转换效率, 在这种情况下工作对移动电源利用的最多.</p>

<p>和这个参数关联最大的是移动电源的电路用料, 这个我不是很熟悉, 就是看到微发的拆解中提到钽电容, 可以作为参考.</p>

<h2>接口, 线材, 设计</h2>

<p><img class="right" src="http://image.shutterstock.com/display_pic_with_logo/427411/427411,1277141040,1/stock-photo-usb-mini-usb-and-micro-usb-cable-55662274.jpg" width="300" title="USB, Mini-USB, Micro-USB" alt="USB, Mini-USB, Micro-USB"></p>

<p>移动电源上的接口最好是标准USB口, 大, 牢固, 也很耐用. 一般还有独立的充电接口, 会为了和放电接口区分开而使用不同的接口, 我觉得最好是其它USB接口, 这样比较通用, 比如目前流行的MicroUSB, 以及以前挺流行的MiniUSB. MicroUSB更好点, 它更牢固.</p>

<p>充电线一般有1拖2 + N种转接头, 或者是1拖2固定接口, 我建议用固定接口, 因为转接头可能会有接触不良, 而成为最薄弱的环节.</p>

<p>再者现在很多设备充电线都是USB口, 移动电源的充电线不一定总是能用到, 针对没有USB口充电线的设备买个对应的充电线就行了.</p>

<p>设计其实没什么好说的, 高亮LED用于照明, 接口尽量设计为方便放包中的同时给设备充电为好.</p>

<h2>总结</h2>

<p>以前看的时候羽博和品胜还没有明显能确定是聚合物电芯的移动电源, 现在应该都有了吧, 这个得找具体的评测.</p>

<p>当时我购买的是微发8800mhA的, 但是并不推荐现在仍旧购买这个, 因为现在已经有超过10000mhA的移动电源了.</p>

<p>电容量篇说过如何评估移动电源能充电的次数, 一般越大越重, 体积也越大, 选购应先确定一个理想的电容量范围, 然后就是自己决定外观接口设计, 品牌, 电芯类型这些东西.</p>

<p>电池这个东西是一分钱一分货, 只要不是特别去挑便宜, 一般不会被骗到.</p>

<p>虽然聚合物电池不会爆炸, 但是高温环境电池还是会膨胀, 也会影响到电器性能的, 所以应该减少和避免移动电源和电子设备在高温环境中.</p>

<h3>附</h3>

<p>在找这些资料的时候, 还发现有人自己做移动电源, 用的都是上乘的材料, 主要是外壳看起来比较粗糙, 后来的好很多, 有开淘宝店卖自己做的电源, 有兴趣的可以看看. <a href="http://shop67813373.taobao.com/">小于电源</a></p>

<p>文中图片来自搜索引擎找到的, 懒得自己处理, 上面的水印还在, 不是我可以给做广告啊.</p>

      <p><a href="http://netwjx.github.com/blog/2012/07/19/portable-power-memo/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[服装布料常识]]></title>
    
      <category term="Live" />
    
      <category term="Memo" />
    
    <link href="http://netwjx.github.com/blog/2012/07/15/garment-fabric-knowledge/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-15T11:39:00+08:00</published>
    <updated>2012-07-15T11:39:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/15/garment-fabric-knowledge</id>
    <content type="html"><![CDATA[<p>平时买衣服发现有很多的布料种类, 还有很多别名, 各自的特性, 舒适也总搞不清, 这里整理一些我所知道的一些布料和特性.</p>

<h2>棉</h2>

<p>棉(Cotton) 是天然植物纤维, 日常使用的最多的一种, 柔软, 穿着舒适, 吸湿, 透气, 弹性几乎没有, 容易折皱, 需要熨烫才能弄平, 可以机洗, 必然会缩水.</p>

<p>一般洗多次之后表面会起毛, 根据材料和织法, 轻重程度不同.</p>

<p>容易染色, 白色的不能和褪色的衣物一起洗, 有些衣服图案使用的印染技术不好图案会花, 发粘, 我说的是在以纯买的一件.</p>

<!-- more -->


<p>纯棉(Pure Cotton) 一般还会和一些别的纤维混纺, 以拥有两种纤维的特性, 多数是合成纤维.</p>

<h3>莱卡/氨纶/聚氨酯 + 棉</h3>

<p>莱卡(Lycra) 是杜邦公司的注册商标, 也就是只有杜邦授权的才能叫莱卡, 否则都叫氨纶(Spandex).</p>

<p>加了氨纶的服装会弹性十分好, 能防止缩水, 也不会折皱, 吸水后比纯棉干的快, 洗多次后表面起毛比纯棉少很多.</p>

<p>其它特性和纯棉一致. 一般T恤中氨纶会占1%-10%.</p>

<h3>涤纶/聚酯纤维/的确凉 + 棉</h3>

<p>涤纶(Terylene) 聚酯纤维(Polyester Fiber)算是第一大合成纤维, 价格可能比氨纶的便宜点.</p>

<p>弹性比纯棉好, 但是比氨纶的差, 和纯棉混纺会有轻微缩水, 折皱情况和涤纶的含量有关, 越多折皱越不容易, 但是涤纶自身透气吸湿较差. 平时穿着不是很容易折皱, 洗多次后表面起毛少.</p>

<p>其它特性和纯棉一致. 一般T恤中涤纶会占15%左右.</p>

<h3>锦纶/尼龙/聚酰胺纤维 + 棉</h3>

<p>尼龙(Nylon) 聚酰胺纤维(Polyamide Fibre) 是最早的合成纤维, 有光泽, 手感顺滑, 耐磨, 会折皱, 容易产生静电.</p>

<p>一般会用于服装的面料, 比如羽绒服. 或者是需要耐磨的, 比如袜子.</p>

<p>靠近火焰会缩, 燃烧有毛发味, 挺多把这个当羊毛材料用.</p>

<h3>麻/亚麻 + 棉</h3>

<p>亚麻(Flax) 是天然植物纤维, 透气效果极好, 吸湿, 吸水后干的十分快, 纯亚麻的穿着会有刺痒, 一般都是和纯棉混纺, 麻含量从35%到60%都有.</p>

<p>一般亚麻混纺的织法都很粗犷, 有薄而不透的效果.</p>

<p>不耐磨, 所以一般是不能机洗的, 只是现在可以有洗衣袋装起来洗, 避免扭到一起. 手洗的话也不能揉搓和使劲扭. 清洗时也不能使用酸性和碱性洗涤剂, 只能使用专用的中性洗涤剂. 洗多次之后会越来越软.</p>

<h2>莫代尔/再生纤维素纤维</h2>

<p>莫代尔(Modal) 原料是欧洲的灌木林, 和棉一样属于天然纤维, 柔软, 有光泽, 吸湿, 透气较纯棉好一些. 不容易被染色, 几乎不缩水, 特别是加了氨纶后.</p>

<p>一般会和一些合成纤维混纺, 使布料具有一定的弹性. 也有和纯棉混纺.</p>

<p>清洗多次没有明显的变化.</p>

<h2>丝/蚕丝</h2>

<p>丝(Silk) 天然动物纤维, 属于蛋白质纤维(Protein Fibre). 有光泽, 柔软, 透气优于纯棉, 会缩水.</p>

<p>一般也可能加其它合成纤维, 比如氨纶, 以增加弹性, 减少缩水.</p>

<p>只适合手洗, 不可揉搓, 不可拧干, 不能用洗衣粉, 洗衣皂, 香皂等洗涤品. 只能用专门的洗涤剂, 或者洗发水, 不能暴晒, 只能阴干.</p>

<h2>帆布</h2>

<p>帆布(Canvas) 是粗厚的棉织物或麻织物, 日常主要是帆布鞋, 帆布包. 坚硬, 耐磨, 相对于皮革比较透气, 重量轻.</p>

<h2>皮革</h2>

<p>主要是指动物毛皮, 衣服主要有牛皮, 猪皮, 小牛皮, 山羊皮, 绵羊皮. 皮革衣服普遍很贵, 并且只适用于特定场合, 所以基本不普及, 很多场合也有特性更好的合成纤维代替.</p>

<p>另一个大量使用皮革的是鞋, 主要有牛皮, 羊皮, 猪皮, 当然现在也有部分场合被人造革代替.</p>

<p>皮革都需要特别的护理, 不宜浸水, 需要防霉, 防蛀.</p>

<h3>人造革/合成革</h3>

<p>人造革主要是高分子聚合物, 主要原料是PVC, PU, 无纺布.</p>

<p>早期的人造革耐磨都不如皮革, 还有过以人造革假冒皮革的, 但是现代制造出了一些比较好的人造革. 现在多数运动鞋都使用人造革, 比皮革轻, 有光泽, 颜色美观, 耐磨程度相当, 还易于加工, 日常护理相对较皮革容易.</p>

<p>目前人造革就是透气上可能不如皮革, 一般鞋会通过设计透气孔, 搭配其它材料来改善透气.</p>

<p>合成革和人造革据说是不同的东西, 不过我现在区分不出来, 在运动鞋的材料说明上很多也写的有合成革.</p>

<p>白色运动鞋清洗完最好使用吸水纸包裹避光晾干, 也避免鞋面发黄.</p>

<h2>参考</h2>

<p>前文参考了以下网站的资料</p>

<ul>
<li><a href="http://zh.wikipedia.org/">Wikipedia 中文</a></li>
<li><a href="http://en.wikipedia.org/">Wikipedia 英文</a></li>
<li><a href="http://www.hudong.com/">互动百科</a></li>
<li><a href="http://baike.baidu.com/">百度百科</a></li>
</ul>


<p>使用 <a href="http://www.google.com/">Google</a> 搜索.</p>

      <p><a href="http://netwjx.github.com/blog/2012/07/15/garment-fabric-knowledge/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode转义(\uXXXX)的编码和解码]]></title>
    
      <category term="CSharp" />
    
      <category term="Decode" />
    
      <category term="Encode" />
    
      <category term="Java" />
    
      <category term="Javascript" />
    
      <category term="RegExp" />
    
    <link href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-07T12:23:00+08:00</published>
    <updated>2012-07-07T12:23:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string</id>
    <content type="html"><![CDATA[<p>在涉及Web前端开发时, 有时会遇到<code>\uXXXX</code>格式表示的字符, 其中<code>XXXX</code>是16进制数字的字符串表示形式, 在js中这个叫Unicode转义字符, 和<code>\n</code> <code>\r</code>同属于转义字符. 在其他语言中也有类似的, 可能还有其它变形的格式.</p>

<p>多数时候遇到需要解码的情况多点, 所以会先介绍解码decode, 后介绍编码encode.</p>

<p>下文会提供Javascript C# Java三种语言下不同方法的实现和简单说明, 会涉及到正则和位运算的典型用法.</p>

<!-- more -->


<h2>Javascript的实现</h2>

<h3>解码的实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">decode</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">unescape</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\\(u[0-9a-fA-F]{4})/gm</span><span class="p">,</span> <span class="s1">&#39;%$1&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>unescape</code>是用来处理<code>%uXXXX</code>这样格式的字符串, 将<code>\uXXXX</code>替换成<code>%uXXXX</code>后<code>unescape</code>就可以处理了.</p>

<h3>编码的实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">encode1</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">escape</span><span class="p">(</span><span class="nx">s</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%(u[0-9A-F]{4})|(%[0-9A-F]{2})/gm</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$0</span><span class="p">,</span> <span class="nx">$1</span><span class="p">,</span> <span class="nx">$2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$1</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;\\&#39;</span> <span class="o">+</span> <span class="nx">$1</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">||</span> <span class="nx">unescape</span><span class="p">(</span><span class="nx">$2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和解码中相对应, 使用<code>escape</code>编码, 然后将<code>%uXXXX</code>替换为<code>\uXXXX</code>, 因为<code>escape</code>还可能把一些字符编码成<code>%XX</code>的格式, 所以这些字符还需要使用<code>unescape</code>还原回来.</p>

<p><code>escape</code>编码结果<code>%uXXXX</code>中的<code>XXXX</code>是大写的, 所以后面的<code>replace</code>只处理大写的<code>A-F</code>.</p>

<h3>另一种编码的实现</h3>

<p>不使用正则和<code>escape</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">encode2</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">c</span><span class="p">,</span> <span class="nx">ret</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">pad</span> <span class="o">=</span> <span class="s1">&#39;000&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">c</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">c</span> <span class="o">&gt;</span> <span class="mi">256</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">ret</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;\\u&#39;</span> <span class="o">+</span> <span class="nx">pad</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span> <span class="o">-</span> <span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>遍历字符串中的字符, 那些<code>charCode</code>大于256的会转换成16进制字符串<code>c.toString(16)</code>, 如果不足4位则左边补0<code>pad.substr(0, 4 - c.length)</code>. 结尾将遍历的结果合并成字符串返回.</p>

<h2>C#的实现</h2>

<h3>解码的实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">Regex</span> <span class="n">reUnicode</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="s">@&quot;\\u([0-9a-fA-F]{4})&quot;</span><span class="p">,</span> <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Compiled</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">Decode</span><span class="p">(</span><span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">reUnicode</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">short</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="kt">short</span><span class="p">.</span><span class="n">TryParse</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Globalization</span><span class="p">.</span><span class="n">NumberStyles</span><span class="p">.</span><span class="n">HexNumber</span><span class="p">,</span> <span class="n">CultureInfo</span><span class="p">.</span><span class="n">InvariantCulture</span><span class="p">,</span> <span class="k">out</span> <span class="n">c</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span> <span class="p">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">m</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>正则和js中的一样, 将<code>XXXX</code>转换以16进制<code>System.Globalization.NumberStyles.HexNumber</code>解析为<code>short</code>类型, 然后直接<code>(char)c</code>就能转换成对应的字符, <code>"" + (char)c</code>用于转换成字符串类型返回.</p>

<p>由于正则中也有<code>\uXXXX</code>, 所以需要写成<code>\\uXXXX</code>来表示匹配字符串<code>\uXXXX</code>, 而不是具体的字符.</p>

<p>上面使用到了Lambda, 需要至少dotnet 4的SDK才能编译通过, 可以在dotnet 2下运行.</p>

<h3>编码的实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">Regex</span> <span class="n">reUnicodeChar</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="s">@&quot;[^\u0000-\u00ff]&quot;</span><span class="p">,</span> <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Compiled</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">Encode</span><span class="p">(</span><span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">reUnicodeChar</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span> <span class="p">=&gt;</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">@&quot;\u{0:x4}&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">short</span><span class="p">)</span><span class="n">m</span><span class="p">.</span><span class="n">Value</span><span class="p">[</span><span class="m">0</span><span class="p">]));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和C#的解码实现正好相反, 0-255之外的字符, 从<code>char</code>转换成<code>short</code>, 然后<code>string.Format</code>以16进制, 至少输出4位.</p>

<h2>Java的实现</h2>

<h3>解码的实现</h3>

<p>和C#相似的, 使用正则</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">Pattern</span> <span class="n">reUnicode</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;\\\\u([0-9a-zA-Z]{4})&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">decode1</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">reUnicode</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="na">appendReplacement</span><span class="o">(</span><span class="n">sb</span><span class="o">,</span>
</span><span class='line'>                <span class="n">Character</span><span class="o">.</span><span class="na">toString</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="mi">16</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="na">appendTail</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java语言没有内嵌正则语法, 也没有类似C#的<code>@"\u1234"</code>原始形式字符串的语法, 所以要表示正则中匹配<code>\</code>, 就需要<code>\\\\</code>, 其中2个是用于Java中字符转义, 2个是正则中的字符转义.</p>

<p>Java语言中没有设计函数或者委托的语法, 所以它的正则库提供的是<code>find</code> <code>appendReplacement</code> <code>appendTail</code>这些方法的组合, 等价于js和C#中的<code>replace</code>.</p>

<p>这里使用<code>StringBuffer</code>类型是由于<code>appendReplacement</code>只接受这个类型, <code>StringBuffer</code>有线程安全的额外操作, 所以性能差一点. 也许第三方的正则库能把API设计的更好用点.</p>

<p><code>Integer.parseInt(m.group(1), 16)</code>用于解析为<code>int</code>类型, 之后再<code>(char)</code>, 以及<code>Character.toString</code>转换成字符串.</p>

<h3>解码的另一种实现</h3>

<p>因为<code>StringBuffer</code>的原因, 不使用正则的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">decode2</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chars</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\\&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="sc">&#39;u&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">char</span> <span class="n">cc</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">Character</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">(</span><span class="n">chars</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">j</span><span class="o">]);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;0&#39;</span> <span class="o">&lt;=</span> <span class="n">ch</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span> <span class="o">||</span> <span class="sc">&#39;a&#39;</span> <span class="o">&lt;=</span> <span class="n">ch</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">&lt;=</span> <span class="sc">&#39;f&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">cc</span> <span class="o">|=</span> <span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">digit</span><span class="o">(</span><span class="n">ch</span><span class="o">,</span> <span class="mi">16</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="mi">3</span> <span class="o">-</span> <span class="n">j</span><span class="o">)</span> <span class="o">*</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">cc</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">cc</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">+=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'>                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">cc</span><span class="o">);</span>
</span><span class='line'>                <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>手工做就是麻烦很多, 代码中也一坨的符号.</p>

<p>遍历所有字符<code>chars</code>, 检测到<code>\u</code>这样的字符串, 检测后续的4个字符是否是16进制数字的字符表示. 因为<code>Character.isDigit</code>会把一些其它语系的数字也算进来, 所以保险的做法<code>'0' &lt;= ch &amp;&amp; ch &lt;= '9'</code>.</p>

<p><code>Character.digit</code>会把<code>0-9</code>返回为<code>int</code>类型的0-9, 第2个参数是16时会把<code>a-f</code>返回为<code>int</code>类型的10-15.</p>

<p>剩下的就是用<code>|=</code>把各个部分的数字合并到一起, 转换成char类型. 还有一些调整遍历位置等.</p>

<h3>编码的实现</h3>

<p>考虑到Java正则的杯具, 还是继续手工来吧, 相对解码来说代码少点.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">encode</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">*</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\\u&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">forDigit</span><span class="o">((</span><span class="n">c</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="o">,</span> <span class="mi">16</span><span class="o">));</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">forDigit</span><span class="o">((</span><span class="n">c</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">8</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="o">,</span> <span class="mi">16</span><span class="o">));</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">forDigit</span><span class="o">((</span><span class="n">c</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="o">,</span> <span class="mi">16</span><span class="o">));</span>
</span><span class='line'>            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">forDigit</span><span class="o">((</span><span class="n">c</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mh">0xf</span><span class="o">,</span> <span class="mi">16</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对应于上文Java编码的实现正好是反向的实现, 依旧遍历字符, 遇到大于256的字符, 用位运算提取出4部分并使用<code>Character.forDigit</code>转换成16进制数对应的字符.</p>

<p>剩下就是<code>sb.toString()</code>返回了.</p>

<h2>总结</h2>

<ul>
<li>编码从逻辑上比解码简单点.</li>
<li>对付字符串, js还是最顺手的, 也方便测试.</li>
<li>位运算的性能很高.</li>
<li>Java的正则库设计的很不方便, 可以考虑第三方.</li>
<li>Java的语法设计现在看来呆板, 落后, 也没有js那种灵活.</li>
<li>上文Java的非正则实现可以写成等价的C#代码.</li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/07/07/encode-and-decode-unicode-escape-string/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黑莓使用备忘]]></title>
    
      <category term="BlackBerry" />
    
      <category term="Memo" />
    
    <link href="http://netwjx.github.com/blog/2012/07/01/blackberry-memo/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-07-01T18:58:00+08:00</published>
    <updated>2012-07-01T18:58:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/07/01/blackberry-memo</id>
    <content type="html"><![CDATA[<p>我曾经使用过将近1年时间黑莓的手机, 期间零零碎碎的有一些使用资料, 这段时间整理成一篇独立的文章, 算是对过去的一些留念吧.</p>

<h2>概况</h2>

<p>购买黑莓主要是想试试全键盘的手机, 黑莓全键盘手机主要是两个系列, Bold 经典设计, Curve 小巧设计, 其实Curve和Bold的大小差异就是几毫米.</p>

<p>不同时期黑莓手机就是屏幕, 性能, 外观差异, 比如7xxx 87xx 83xx 85xx 89xx. 同一时期的主要是网络制式, GPS, WiFi, 发行地区, 键盘Y/Z倒置之类的差异.</p>

<p>黑莓的型号数字大小和发布日期最初是有些对应关系的, 但是后来就很混乱了, 不仔细找资料还真很难区分.</p>

<h2>硬件</h2>

<p><img class="right" src="http://netwjx.github.com/i/bb8310.png" title="BlackBerry 8310" alt="BlackBerry 8310"></p>

<p>我购买的是水货的<a href="http://cn.blackberry.com/devices/blackberrycurve8300/">BlackBerry Curve 8310</a>, 以下简称<strong>bb8310</strong>, 铁灰色, 和图片上哪种颜色不同.</p>

<ul>
<li><p>GSM网络制式, 国内能用移动和联通的2G网络.</p></li>
<li><p>支持GPRS/EDGE上网, EDGE是GPRS升级, 理论上快一点, 但是我没感觉到. EDGE移动的基站支持的比较多, 联通挺多的还是GPRS.</p></li>
<li><p>Intel PXA901 312 MHz, 就实际使用的流畅感觉来说, <strong>所有点击操作都有延迟的感觉, 列表滚动经常短暂的卡顿.</strong></p></li>
<li><p>内置存储 64M, 精简ROM后还能剩30M左右, 安装第三方应用都需要占用内置存储空间.</p></li>
<li><p>支持MicroSD(TF)卡, 应该是不支持SDHC, 不过实际我用的是2G的, <strong>因为bb8310读写速度极慢, 写入速度低于1M/s</strong>.</p></li>
<li><p>320x240解析度的TFT屏幕, <strong>阳光下可以看清字, 因为会自动调整背光强度.</strong></p></li>
<li><p>带GPS, 带200w像素的摄像头, 无自动对焦, 带闪光灯, <strong>闪光灯实际当手电筒使用</strong>.</p></li>
<li><p>无WiFi, <strong>有WiFi的那个型号只能使用系统自带浏览器上网, 第三方应用要折腾导入服务预订</strong></p></li>
<li><p>轨迹球导航键, <strong>比侧边的滚轮能提供4个方向导航, 但是比更新型号的光学触控板更容易变油腻, 老化明显.</strong></p></li>
<li><p>图片JPG, BMP, TIFF. 音乐AMR, MP3, WMA. 视频MPEG4, 3GP(H.263), <strong>不建议考虑视频, 即使是录制的视频质量也太差</strong>, 没有实际意义.</p></li>
</ul>


<!-- more -->


<p>硬件参数什么的只能说是, 哪个时期, 水货哪个价格还行, 行货价格极高.</p>

<h3>硬件设计方面</h3>

<ul>
<li><p>正面的LED灯十分有用, 能够表示未接来电, 新短信, 充电中, 充电完成, 电量低. 配合第三方软件还可以有其它的提醒用途.</p></li>
<li><p>侧面框和顶部都是橡胶油涂层, 手感好, 但是bb8310有点问题, 用一段时间后, 磨损等会让所有涂层都脱落, 就剩塑料了.</p></li>
<li><p>外部扬声器在顶部, 有缝隙, 不怕手机压到什么地方后声音太小.</p></li>
<li><p>bb8310的键盘按键有些特殊, 是比较硬的哪种, 按下后会响. 由于是Curve的小巧设计, 有些人可能会觉得按键太小, 我感觉还好.</p></li>
<li><p>左右两侧中部的按键可以设置为启动自定义的软件, 我是其中一个设置为摄像机, 用于开启闪光灯, 当手电筒用, 另外一个设置为百度输入法, 具体为何会在下文说明.</p></li>
<li><p>最好也买一个休眠套, 一般是牛皮的, 除了省电外, 还能在拿出休眠套后自动点亮屏幕, 可以理解为直板手机的翻盖开关.</p></li>
</ul>


<h2>软件</h2>

<p>黑莓中可以安装的软件主要是alx, jad, cod:</p>

<ul>
<li><p>alx是黑莓自己的格式, 可以使用黑莓的PC工具中带的AppLoader刷机工具安装.</p></li>
<li><p>jad是JavaME的标准, 一般是在线安装, 如果已经下载好了可以用 <strong>多媒体</strong> 中 <strong>黑莓键</strong> - <strong>浏览</strong> 打开来安装.</p></li>
<li><p>cod, 上面2个一般都是安装描述格式, 这个才是软件自身, 一般需要使用工具生成alx或jad然后来安装, 也可以使用BerryBox直接安装.</p></li>
</ul>


<h3>常用软件</h3>

<p>排名不分先后.</p>

<ul>
<li><p><a href="http://www.uc.cn/product/product_choose_browser.shtml">UC浏览器黑莓版</a></p>

<p>比黑莓自带的浏览器靠谱很多的第三方浏览器.</p></li>
<li><p><a href="http://m.google.cn/maps/">Google 地图</a></p>

<p>bb8310只能使用在线地图, 必须将 <strong>选项</strong> - <strong>高级选项</strong> - <strong>TCP</strong> 中的 <strong>APN</strong> 设置为<code>cmnet</code>才行, 非中国移动的设置成对应的<code>XXnet</code>. 感觉Google地图的定位速度比较快.</p></li>
<li><p><a href="http://www.gpslook.net/">乐图</a></p>

<p>可以使用离线地图包, 也可以制作自己的地图包. 地图保存在TF卡上, 刷机后一般建议重新导入离线地图包.</p></li>
<li><p><a href="http://bbdev.org/">黑莓来电助手</a> <a href="http://bbdev.org/active/">注册</a></p>

<p>来电归属地显示, 不过这个在bb8310上并不总是一定能看到, 还好可以在通话记录中手工查找归属地, 归属地数据库不定期更新.</p>

<p>提供IP拨号功能, 可能受限于API, 不能高度和系统集成, 只是拨号时增加了一个菜单项.</p>

<p>提供接通震动, 拨号后等待接通的这段时间可以不必要一直听着手机.</p></li>
<li><p><a href="http://bbdev.org/">黑莓热键大师</a></p>

<p>和来电助手是同一个开发者, 是一个快捷启动软件的工具, 用来对付哪些没有设置快捷键的软件.</p></li>
<li><p>百度黑莓输入法</p>

<p>曾经叫点讯梅花输入法, 利用黑莓键盘最下方的5个键来选字, 比默认的输入法选字速度快, 支持双拼(自定义双拼方案).</p>

<p>在bb8310上缺点是它是在独立程序 <strong>百度记事本</strong> 中输入好之后再粘贴的, 基本上BlackBerry OS 4.5的第三方输入法全都是这样, 黑莓的公司一直以来对开发者不怎么待见. 所以我设置为右侧中部按键启动 <strong>百度记事本</strong>.</p>

<p>由于基本都是泄漏出来的, 所以没有什么官方地址, 自行Google或者到<a href="http://www.bber.info/post/baiduinput">这里下载</a></p></li>
<li><p><a href="http://hi.baidu.com/feng131719/archive/tag/%E7%81%B0%E5%A4%AA%E7%8B%BC%E5%85%88%E7%94%9F-%E9%BB%91%E8%8E%93%E4%B8%93%E5%8C%BA">黑莓键盘锁 AutoLock</a></p>

<p>直板手机都有的, 因为黑莓提供了休眠套, 所以黑莓自身没有超时自动锁键盘的功能, 所以用这个软件来完成超时自动锁键盘.</p></li>
<li><p><a href="http://www.berryon.com/blackberry/1051.htm">桌面农历 LunarHome</a></p>

<p>桌面图标显示为农历的日期, 包括24节气什么的.</p>

<p>还有一个PanvsCalendar, 功能更多一些, 收费的, 和桌面农历不是同一个开发者, <a href="http://panvs.taobao.com/">PanvsCalendar作者的淘宝店</a>.</p></li>
<li><p><a href="http://www.mowriter.com">MoWriter</a></p>

<p>黑莓上的微博工具, 支持<a href="http://weibo.com/">新浪微博</a>, <a href="http://jie.pn">街旁网</a>, 做啥网, 我多数时候用新浪微博.</p>

<p>不过bb8310及同系列的, 要么没WiFi, 要么第三方软件不能使用WiFi, GPRS速度太慢了, 就算是EDGE也没太大提高.</p></li>
<li><p>贝贝词典</p>

<p>十分快速小巧的词典软件, 可以自定义词库, 作者提供有一个英汉词典.</p>

<p>作者没有设置网站, 主要在maxpda论坛发布, 可以自行Google或者到<a href="http://bbs.maxpda.com/thread-24798-1-1.html">这里下载</a></p>

<p>连接电脑后, 使用导入客户端导入时必须同时启动手机上的贝贝词典.</p>

<p>需要注意的是词库会导入到黑莓的数据库, 这会在使用黑莓桌面工具备份数据库的时候速度极慢.</p></li>
<li><p><a href="http://coolove.pcriot.com">BBNotePad</a></p>

<p>如名字所示, 记事本, 可以编辑txt和系统内部的记事本. 名字是英文的, 但是界面有中文.</p>

<p>可以用这个把系统记事本保存到TF卡上.</p></li>
<li><p>GBBReader</p>

<p>文本格式阅读器, 打开速度极快, 我觉得这个是作为BBNotePad的搭配, 这个阅读十分方便, 中文字体可以开反锯齿, 效果会好点.</p>

<p>作者没有设置网站, 我也没找到主要在什么网站发布, 只能自行Google.</p></li>
<li><p>Nintaii</p>

<p>磨时间的移植类游戏, 自行Google</p></li>
<li><p><a href="http://oteam.cn/BerryBox/">BerryBox</a></p>

<p>这是个PC端工具, 需要dotnet 2.0运行环境, 可以实现黑莓上的安装软件, 备份软件, cod生成alx和jad, 完整刷机前的清除, 同步时间, 截屏, 工程模式激活码, OTA下载功能.</p></li>
</ul>


<h3>初次拨号前的设置</h3>

<p><strong>拨号键</strong> - <strong>黑莓键</strong> - <strong>选项</strong> - <strong>智能拨号</strong> 中 <strong>国家地区号码</strong>设置为<code>+86</code>表示中国, <strong>国内号码长度</strong>设置为<code>11</code>表示国内的手机号码长度.</p>

<p>这样可以避免一些拨号的问题, 国行应该不需要这样的设置吧.</p>

<h3>导入SIM卡中的联系人</h3>

<p>在通讯簿中, <strong>黑莓键</strong> - <strong>SIM 电话簿</strong> - <strong>黑莓键</strong> - <strong>全部复制到通讯簿</strong>.</p>

<h3>快速查找联系人</h3>

<p>bb8310的通讯簿不能以拼音索引联系人, 必须输入汉字才行, 这算是黑莓做本地化的失败之处. 听说新的机型已经支持拼音索引了.</p>

<p>替代办法是给联系人设置上公司名字, 可以仅填上首字母, 或者按照英文人名规则哪样空格分割.</p>

<p>有一个软件叫 <strong>通讯簿批量添加拼音缩写小工具</strong> , 来自uulab.org, 但是目前只能访问<a href="http://uulab.cn/">uulab.cn</a>, 第三方网站上还能下载到, <a href="http://www.52blackberry.com/thread-418860-1-1.html">比如这里</a></p>

<p>还有<a href="http://berryware360.cn/">莓软360</a>的<strong>凌波微步 SmartDial</strong>通过独立实现通讯簿方式实现按拼音索引, 但都受限于黑莓的API, 和系统集成的不是很好.</p>

<p>通讯簿可以给联系人设置头像, 但是哪个却限制为一个很小的图片, 来电时会显示一个很小的头像, 很莫名其妙的设计.</p>

<h3>字体</h3>

<p>bb8310默认带的字体在英文的表现比较好, 中文的则必须把字号设置大一点才方便看, 中文没有反锯齿.</p>

<p>但是奇怪的是GBBReader中显示中文却可以反锯齿, 难道是黑莓有意为之?</p>

<h3>黑莓断网问题</h3>

<p>断网主要是在APN为net接入点时, 第三方软件间歇性无法访问网络, 原因比较奇怪, 看表现应该是黑莓对运营商的新旧网络设备不兼容.</p>

<p>这个问题在比bb8310更新的机型中也存在, 我不知道最新的是否有解决这个问题.</p>

<h3>黑莓桌面工具无法和手机连接</h3>

<p>这个一般是在安装一些主题或软件后会发生, 处理办法是将语言设置为英文后重启, 重启方法见下文.</p>

<h3>手电筒</h3>

<p>我看过黑莓的应用程序开发SDK, 没有发现任何明确的, 控制手电筒的API, 也没有找到能单独打开闪光灯的应用, 这个好像都只有在新的黑莓手机和SDK中存在.</p>

<p>所以只能将左侧的键设置为摄像机, 用空格键切换闪光灯为强制开, 以后要开手电筒就按左侧的键, 等一会就能打开, 只是需要过一会动一下滚迹球, 否则会自动锁屏.</p>

<h3>彩信</h3>

<p>发送彩信基本没有什么特殊的设置, 但是接收彩信需要确保是下面的设置</p>

<ul>
<li><p><strong>选项</strong> - <strong>高级选项</strong> - <strong>浏览器推入</strong>中, 选中<strong>启用 WAP 推入</strong>.</p></li>
<li><p><strong>选项</strong> - <strong>彩信</strong>中, <strong>多媒体接收</strong>和<strong>自动检索</strong>选中, <strong>消息过滤中的拒绝</strong>最好取消掉.</p></li>
</ul>


<p>接收彩信必须打开<strong>移动网络</strong>中的<strong>数据服务</strong>.</p>

<h3>用数据线连接电脑作为U盘使用</h3>

<p><strong>选项</strong> - <strong>媒体卡</strong>中的</p>

<ul>
<li><strong>外部存储器支持</strong> : 开</li>
<li><strong>加密模式</strong> : 无</li>
<li><strong>&#8220;大容量模式&#8221;支持</strong> : 开</li>
<li><strong>连接时自动启用&#8221;大容量模式&#8221;</strong> : 是</li>
</ul>


<p>然后连接电脑就应该能看到新的盘符.</p>

<p>需要注意的是, bb8310确实是USB 2.0的接口, 使用的TF卡确实是Class 4的, 读取至少在10M/s以上, 写入至少在4M/s. 但是在bb8310上读取在1M/s左右, 写入大概0.8M/s左右, 不确定是硬件还是软件限制的原因. 所以如果是大文件建议拔出来用读卡器.</p>

<h3>关机和重启手机</h3>

<p>bb8310桌面上的<strong>关闭电源</strong>会有<strong>关闭</strong>和<strong>完全切断电源</strong>两个选择</p>

<ul>
<li><p><strong>关闭</strong>类似待机, 如果设置了自动开机会生效, 启动很快.</p></li>
<li><p><strong>完全切断电源</strong>类似休眠, 自动开机不会生效, <strong>闹钟也不会生效</strong>, 但是启动很快.</p></li>
</ul>


<p>bb8310没有通过软件真正关机的办法, 只能是拔电池. 下次安装电池就会自动开机.</p>

<p>推荐使用 <strong>左Alt + 右Shift(左下角和右下角的键) + Del</strong> 重启, 毕竟拔电池再安装太麻烦了.</p>

<p>重启速度很慢, 大概3分钟.</p>

<h3>浏览器的首页被锁定</h3>

<p>这个是黑莓故意为之, 他会配合运营商限制用户对手机的一些功能的使用和设置, 包括浏览器, 彩信, WiFi.</p>

<p>这么做的好处是运营商相关的一些网络配置是自动化设置好的, 坏处是运营商会在很多地方和用户为敌, 而黑莓正好处处配合运营商.</p>

<p>网上有导入<strong>服务预订 Service Book</strong>设置的可以解除锁定, 我觉得很复杂, 用过一次, 结果不能上网了.</p>

<h3>蓝牙传输文件</h3>

<p>发送文件一般比较简单, 但是用黑莓接收就需要绕点弯了.</p>

<p><strong>多媒体</strong> - <strong>黑莓键</strong> - <strong>使用蓝牙接收</strong>, 后续按照屏幕指示就可以了.</p>

<p>没有自动接收, 批量接收, 总体感觉蓝牙的使用极其繁琐.</p>

<h3>把通讯簿的联系人复制到SIM卡</h3>

<p>在通讯簿中, 查看一个联系人的信息, 将光标移动到联系人的号码上, <strong>黑莓键</strong> - <strong>复制到SIM电话簿</strong>.</p>

<p>没有批量操作方式, 我也没找到第三方软件有这样的功能, 好像是黑莓的API限制.</p>

<p>黑莓桌面工具的同步功能可以将通讯簿导出为逗号分割的文本格式, 可以在Excel或者WPS表格中编辑, 但是这个操作过程还是很麻烦的.</p>

<h3>快捷键启动软件</h3>

<p>设计很是奇怪, 软件的快捷键启动方式可以由</p>

<ul>
<li>软件自身设置, 比如启动BBNotePad的快捷键是<strong>P</strong>.</li>
<li>界面皮肤设置, 很多第三方皮肤都设置了大量的快捷键.</li>
</ul>


<p>没有快捷键设置的软件可以使用上文中提到的<a href="http://bbdev.org/">黑莓热键大师</a>, 黑莓系统内的快捷键可以<a href="http://www.google.com.hk/search?q=%E9%BB%91%E8%8E%93%E5%BF%AB%E6%8D%B7%E9%94%AE">自行Google</a></p>

<h3>通话录音</h3>

<p>黑莓禁止这种功能, 估计最新的API也不提供这样的功能.</p>

<h3>音乐播放一段时间后自动停止</h3>

<p>目的是睡觉前使用, 在睡着后自动停止.</p>

<p>bb8310的音乐播放功能好像完全被系统自身的音乐播放器控制, 所有的音乐都由系统自身的音乐播放器来播放.</p>

<p>我没有找到bb8310可用的这种音乐播放软件.</p>

<h3>工程模式</h3>

<p>进入工程是 <strong>Alt + Shift + H</strong>, 然后在BerryBox中输入这个界面上看到的PIN, 应用程序版本, 启动时间等信息, 然后选择一个进入工程模式的时间, 点击<strong>获取激活码</strong>, 得到的应该是8位的字符, 在黑莓上直接输入哪些字符就会进入工程模式, 之后在工程模式的时间内, 按 <strong>Alt + Shift + H</strong> 会直接进入工程模式的界面.</p>

<p>我也没发现工程模式中有什么特别有用的功能.</p>

<h3>一些Bug</h3>

<ul>
<li><p>自带的拼音输入法, 在极个别的情况下会导致系统死机, 我没有能找出重现这个现象的方法, 但是出现过一次. 输入法应该除了黑莓开发的, 就是黑莓的合作运营商开发的.</p></li>
<li><p>在插入耳机的情况下, 并且使用了自动开关机, 自动开机后可能闹钟不使用外放, 而使用耳机播放闹钟的音乐.</p></li>
</ul>


<h2>刷机</h2>

<p>一般水货商卖的机器会安装好很多东西, 也基本够用, 如果想精简成完全适合自己的就需要刷机了. 当然也可以是为了使用更新版本的ROM而刷机.</p>

<p>刷机前先要确定使用哪个版本的ROM, 不同的机型对应不同的ROM, 我的bb8310主要用过的是</p>

<ul>
<li>174版本 <code>8310EastAsia_PBr4.5.0_rel294_PL2.7.0.105_A4.5.0.174_Hutchison_maxpda.exe</code></li>
<li>182版本 <code>8310EastAsia_PBr4.5.0_rel306_PL2.7.0.106_A4.5.0.182_AT_amp_T.exe</code></li>
</ul>


<p>相关的下载可以用文件名搜. 这两个ROM实际差异感觉不明显, 后一个第三方软件兼容好一点点, 只是因为黑莓的软件不多而显得可能比较明显.</p>

<p>可靠的刷机方式是使用黑莓桌面工具中的<strong>AppLoader</strong>, 路径是<code>C:\Program Files\Common Files\Research In Motion\AppLoader\Loader.exe</code>.</p>

<p>一般完整刷机(WIPE刷机)需要1小时, 再加上安装和配置软件什么的估计需要2小时, 赶上重装Windows了.</p>

<p><strong>AppLoader</strong>也用于安装alx格式的软件, 不过我更推荐使用<a href="http://oteam.cn/BerryBox/">BerryBox</a>作为日常安装软件, 除非某些软件必须使用AppLoader.</p>

<p>刷机或者安装软件后可能需要重启, 这个重启近乎和<strong>左Alt + 右Shift(左下角和右下角的键) + Del</strong>一样, 启动需要3分钟左右, 显然黑莓给自己留了重启的API.</p>

<h4>输入法</h4>

<p>使用AppLoader刷机时会看到有2个拼音输入法和2个笔画输入法, 每个里面第2个是繁体的, 简体中文只需要选中第一个.</p>

<h3>ROM的精简</h3>

<p>ROM中一般会携带一些运营商和合作伙伴的软件, 很多的其实用不到, 所以就出现了<a href="http://www.google.com.hk/search?q=%E9%BB%91%E8%8E%93+rom+%E7%B2%BE%E7%AE%80">各种ROM精简方法</a>.</p>

<p><a href="https://gist.github.com/raw/3027972/6592d22d4339af83ea8ca7a57841f345273a20f7/minify-bb8310-os45.bat">这里有个批处理</a>, 是针对8310 os4.5 rom的精简批处理脚本, 保存后, 将比如<code>C:\Program Files\Common Files\Research In Motion\Shared\Loader Files\8310-v4.5.0.182_P2.7.0.106</code>这样的目录拖到批处理文件上, 或者在命令行下手工指定路径运行这个批处理, 就可以对指定路径的ROM精简, 精简掉的文件都移动到了rom目录下的<strong>backup</strong>目录.</p>

<h3>刷机的备份和恢复</h3>

<p>黑莓桌面工具可以完整的备份黑莓中的配置, 但不包括安装上的软件. 恢复也是覆盖式恢复, 不会合并, 实际用途好像仅限于刷机前的备份.</p>

<p>能有价值备份的也主要是联系人, 短信, 通讯记录, 日程, 任务, 笔记之类的.</p>

<p>全面备份可能会因为类似贝贝词典这样的软件而中间卡很长时间.</p>

<p>备份的格式是ipd格式, 一种私有的2进制格式, 不是很方便修改.</p>

<h2>现状</h2>

<p>在黑莓公司开始下坡之前, 一直都和各个国家的运营商走的近, 上文多处也提到一些事的端倪.</p>

<p>对开发者比较不待见, 比如曾经不给中国开发者提供SDK下载. 在Android大量抢夺开发者的时候, 黑莓仍旧搞的和苹果一样, 对开发者收取软件签名用的证书费用, 后来降成1$, 最后免费, 不过为时已晚. SDK的维护不力, 大量私有的API. 后来情况有些改观, 但是也是太晚了, 坏的印象留下就无法抹去, 况且当时Android和iOS已经抢了主要的开发者.</p>

<p>对最终用户有一种很奇怪的态度, 一方面积极完善BIS BES这种&#8221;企业级&#8221;应用, 另一方面对旧产品疏于维护, 甚至一些问题会从旧的到新的产品中持续存在. 迟迟到来的应用商店对旧型号的支持还不如应用商店中的一些软件, 即应用商店中的软件支持这个旧机型, 但是应用商店自身却不支持. 虽然四处和运营商合作, 但是黑莓的网站仍旧慢的可以, 无论是用户还是开发者的感受会十分差. 大肆扩张业务的国家和地区, 但是相应的本地化却太肤浅, 至少我觉得和中国地区的一些优秀本地化应用开发者或公司合作太少, 感觉还是走亲近运营商的老路了.</p>

<p>中国地区的BIS好不容易才能用, 不过感觉还是太贵了, 多数人可能更在乎的是手机上方便的发邮件, 收邮件并不需要实时, 况且我根本不相信运营商能提供足够稳定的服务实现实时接收. BES好像还没什么消息, 除了贵之外, 可能也和国内公司没有使用Email的习惯吧.</p>

<p>黑莓公司现在的状况很差, 股价大跌, 公司高层的频繁变动, 还有政策变动, 裁员, 新产品销量达不到预期, 可能和Android关系更多, 反正是这个坎很难过.</p>

      <p><a href="http://netwjx.github.com/blog/2012/07/01/blackberry-memo/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll插件:分类云]]></title>
    
      <category term="Jekyll" />
    
      <category term="Octopress" />
    
      <category term="Plugin" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-06-03T14:55:00+08:00</published>
    <updated>2012-06-03T14:55:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll</id>
    <content type="html"><![CDATA[<p>Octopress默认有存档页, 但是没有能列出所有分类的页面, 我试图找这方面的插件, 但是尝试使用的一些都不是很理想, 所以尝试自己写了一个这样的插件, 效果就如导航栏链接<a href="http://netwjx.github.com/blog/categories/">分类</a> 哪样.</p>

<p>以下是代码, 多数代码都是从Jeykll插件示例中抄的, 第一次写实用的ruby程序, 也没多想注释什么的.</p>

<!-- more -->




<figure class='code'><figcaption><span>plugins/category_cloud.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CategoryCloudPage</span> <span class="o">&lt;</span> <span class="no">Page</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">site</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">dir</span><span class="p">,</span> <span class="n">cloud</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@site</span> <span class="o">=</span> <span class="n">site</span>
</span><span class='line'>      <span class="vi">@base</span> <span class="o">=</span> <span class="n">base</span>
</span><span class='line'>      <span class="vi">@dir</span> <span class="o">=</span> <span class="n">dir</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;index.html&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="vi">@name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">read_yaml</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="s1">&#39;_layouts&#39;</span><span class="p">),</span> <span class="s1">&#39;category_cloud.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="s1">&#39;cloud&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="n">cloud</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CategoryCloudGenerator</span> <span class="o">&lt;</span> <span class="no">Generator</span>
</span><span class='line'>    <span class="n">safe</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">generate</span><span class="p">(</span><span class="n">site</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">site</span><span class="o">.</span><span class="n">layouts</span><span class="o">.</span><span class="n">key?</span> <span class="s1">&#39;category_cloud&#39;</span>
</span><span class='line'>        <span class="n">dir</span> <span class="o">=</span> <span class="n">site</span><span class="o">.</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;categories&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">count</span> <span class="o">=</span> <span class="n">site</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>          <span class="o">[</span><span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">length</span><span class="o">]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">maxsize</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>        <span class="n">minsize</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">min</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="n">count</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:last</span><span class="p">)</span><span class="o">.</span><span class="n">minmax</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cloud</span> <span class="o">=</span> <span class="n">site</span><span class="o">.</span><span class="n">categories</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">posts</span><span class="o">|</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;title&quot;</span> <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;rank&quot;</span>  <span class="o">=&gt;</span> <span class="n">maxsize</span> <span class="o">+</span> <span class="n">minsize</span> <span class="o">-</span> <span class="p">((</span><span class="n">posts</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">min</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">maxsize</span> <span class="o">-</span> <span class="n">minsize</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">max</span> <span class="o">-</span> <span class="n">min</span><span class="p">)</span> <span class="o">+</span> <span class="n">minsize</span><span class="p">),</span>
</span><span class='line'>            <span class="s2">&quot;link&quot;</span>  <span class="o">=&gt;</span> <span class="s2">&quot;/</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/_|\P{Word}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/-{2,}/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">/&quot;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="no">CategoryCloudPage</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">site</span><span class="p">,</span> <span class="n">site</span><span class="o">.</span><span class="n">source</span><span class="p">,</span> <span class="n">dir</span><span class="p">,</span> <span class="n">cloud</span><span class="p">)</span>
</span><span class='line'>        <span class="n">index</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">site</span><span class="o">.</span><span class="n">layouts</span><span class="p">,</span> <span class="n">site</span><span class="o">.</span><span class="n">site_payload</span><span class="p">)</span>
</span><span class='line'>        <span class="n">index</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">site</span><span class="o">.</span><span class="n">dest</span><span class="p">)</span>
</span><span class='line'>        <span class="n">site</span><span class="o">.</span><span class="n">pages</span> <span class="o">&lt;&lt;</span> <span class="n">index</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sass/partials/_category_cloud.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.category-cloud</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@for</span> <span class="nv">$i</span> <span class="ow">from</span> <span class="mi">1</span> <span class="ow">through</span> <span class="mi">5</span> <span class="p">{</span>
</span><span class='line'>        <span class="nc">.rank-</span><span class="si">#{</span><span class="nv">$i</span><span class="si">}</span> <span class="p">{</span> <span class="na">font-size</span><span class="o">:</span> <span class="nf">nth</span><span class="p">(</span><span class="mi">230</span><span class="kt">%</span> <span class="mi">210</span><span class="kt">%</span> <span class="mi">180</span><span class="kt">%</span> <span class="mi">140</span><span class="kt">%</span> <span class="mi">90</span><span class="kt">%</span><span class="o">,</span> <span class="nv">$i</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nc">.rank-1</span><span class="o">,</span> <span class="nc">.rank-2</span><span class="o">,</span> <span class="nc">.rank-3</span><span class="o">,</span> <span class="nc">.rank-4</span> <span class="p">{</span> <span class="nt">font-weight</span><span class="nd">:bold</span><span class="o">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="nt">span</span> <span class="p">{</span> <span class="na">line-height</span><span class="o">:</span> <span class="mi">1</span><span class="mf">.25</span><span class="kt">em</span><span class="p">;</span> <span class="na">padding</span><span class="o">:</span><span class="mi">0</span> <span class="mi">5</span><span class="kt">px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要修改<code>sass/_partials.scss</code>, 结尾加入一行</p>

<figure class='code'><figcaption><span>sass/_partials.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s2">&quot;partials/category_cloud&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>source/_layouts/category_cloud.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: 分类
</span><span class='line'>footer: false
</span><span class='line'>---
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;category-cloud&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% for item in page.cloud %}
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;rank-{{ item.rank }}&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ item.link }}&quot;</span><span class="nt">&gt;</span>{{ item.title }}<span class="nt">&lt;/a&gt;&lt;/span&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前只做了生成分类页面, 侧边栏还没有做, 以后有做的冲动了再说吧.</p>

<h2>参考资料</h2>

<ul>
<li><p><a href="http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/">Migrating from Wordpress to Jekyll - Part 2</a> Tag cloud 段落</p></li>
<li><p><a href="http://blog.16codes.com/2007/12/how-to-create-tag-cloud-with-formula.html">How to create a tag cloud? (With formula and sample calculation) </a> 算法</p></li>
<li><p><a href="https://github.com/imathis/octopress/blob/master/plugins/category_generator.rb">octopress / plugins / category_generator.rb</a> Octopress修改的具体分类页面生成插件</p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/06/03/category-cloud-plugin-with-jekyll/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用.Net Remoting的IpcChannel时发生 RemotingException : 拒绝访问 异常]]></title>
    
      <category term="CSharp" />
    
      <category term="IPC" />
    
      <category term="Remoting" />
    
      <category term="Windows" />
    
    <link href="http://netwjx.github.com/blog/2012/06/03/remotingexception-access-is-denied-in-net-remoting-ipcchannel/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-06-03T12:09:00+08:00</published>
    <updated>2012-06-03T12:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/06/03/remotingexception-access-is-denied-in-net-remoting-ipcchannel</id>
    <content type="html"><![CDATA[<p>在一个使用IPC进行单机跨进称的通讯时发生了 <code>RemotingException : 拒绝访问</code> 异常, 期间查找异常原因的时候发现中文不大容易搜到正确的答案, 也可能是因为Remoting是已经不再支持的技术吧, 因为历史的原因还不能使用WCF, 所以这里将这个异常的原因和解决办法介绍一下.</p>

<p>发生这个异常的场景是一个Windows服务程序在IPC信道注册, 另外一个桌面程序连接到IPC信道通讯, 重点是在IPC信道注册的程序是Windows服务, 默认情况下它将运行在LocalSystem帐号下, 连接这个IPC信道的是另外的用户启动的进程.</p>

<p>错误的原因是向IPC信道注册时, 默认的授权是相同用户的进程才可以访问这个IPC信道, 可以通过下面的代码修改默认授权:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">dict</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
</span><span class='line'><span class="n">dict</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">dict</span><span class="p">[</span><span class="s">&quot;portName&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">portName</span><span class="p">;</span>
</span><span class='line'><span class="n">dict</span><span class="p">[</span><span class="s">&quot;authorizedGroup&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;Everyone&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">serverChannel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">IpcServerChannel</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="n">ChannelServices</span><span class="p">.</span><span class="n">RegisterChannel</span><span class="p">(</span><span class="n">serverChannel</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>portName</code>变量是IPC信道的名称</p>

<p>在IIS中运行的Web应用一般也是由一个<code>IUSER_xxxxx</code>的用户运行, 所以还有通过<code>web.config</code>配置方式在IPC信道注册的方式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'> <span class="nt">&lt;system.runtime.remoting&gt;</span>
</span><span class='line'>   <span class="nt">&lt;application&gt;</span>
</span><span class='line'>     <span class="nt">&lt;client&gt;</span>
</span><span class='line'>       <span class="nt">&lt;wellknown</span> <span class="na">type=</span><span class="s">&quot;fragrank.FragRankRemoting,FragRankLogic&quot;</span> <span class="na">url=</span><span class="s">&quot;ipc://FragRankChannel/FragRank&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/client&gt;</span>
</span><span class='line'>     <span class="nt">&lt;channels&gt;</span>
</span><span class='line'>       <span class="nt">&lt;channel</span> <span class="na">ref=</span><span class="s">&quot;ipc&quot;</span> <span class="na">authorizedGroup=</span><span class="s">&quot;Everyone&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>         <span class="nt">&lt;clientProviders&gt;</span>
</span><span class='line'>          <span class="nt">&lt;formatter</span> <span class="na">ref=</span><span class="s">&quot;binary&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/clientProviders&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/channel&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/channels&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/application&gt;</span>
</span><span class='line'> <span class="nt">&lt;/system.runtime.remoting&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<ul>
<li><p><a href="http://www.codedblog.com/2007/09/01/calling-a-windows-service-from-aspnet-via-remoting-ipcchannel/">Calling a Windows Service from ASP.NET via Remoting &amp; IpcChannel</a></p>

<p>MSDN的文档对属性值并没有太多的说明, 这个里面有多个示例.</p></li>
<li><p><a href="http://msdn.microsoft.com/zh-cn/library/bb397847.aspx">信道属性</a></p></li>
<li><p><a href="http://msdn.microsoft.com/zh-cn/library/bb397831.aspx">服务器信道属性</a></p></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/06/03/remotingexception-access-is-denied-in-net-remoting-ipcchannel/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C#委托和Lambda表达式]]></title>
    
      <category term="CSharp" />
    
      <category term="Delegate" />
    
      <category term="Functional" />
    
      <category term="Lambda" />
    
    <link href="http://netwjx.github.com/blog/2012/05/19/csharp-delegate-and-lambda/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-05-19T19:54:00+08:00</published>
    <updated>2012-05-19T19:54:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/05/19/csharp-delegate-and-lambda</id>
    <content type="html"><![CDATA[<p>C#算是个多范式编程语言, 除了传统的OO风格, 还可以在部分范围中使用函数式编程的风格, 这里整理一下C#中委托和Lambda实践中的各种写法.</p>

<p>这里不会解释具体的代码含义, 仅仅介绍写法, 可能不适合刚开始学习.</p>

<h2>声明委托类型</h2>

<p>使用前必须要有具体的委托类型, 下面的例子中会使用到这些常用的委托类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">delegate</span> <span class="k">void</span> <span class="nf">Action</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">delegate</span> <span class="k">void</span> <span class="n">Action</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T1</span><span class="p">,</span> <span class="k">in</span> <span class="n">T2</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">delegate</span> <span class="kt">bool</span> <span class="n">Predicate</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">delegate</span> <span class="n">TResult</span> <span class="n">Func</span><span class="p">&lt;</span><span class="k">in</span> <span class="n">T1</span><span class="p">,</span> <span class="k">in</span> <span class="n">T2</span><span class="p">,</span> <span class="k">out</span> <span class="n">TResult</span><span class="p">&gt;(</span><span class="n">T1</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">T2</span> <span class="n">arg2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Action</code>和<code>Action&lt;in T1, in T2&gt;</code>是在dotnet 3.5 sp1出现的一个很实用的委托, 类似的还有1-16个参数的, 这里主要使用这2种.</p>

<p><code>Predicate</code>是从dotnet 2.0就出现的, 一般是在泛型集合的查询中使用.</p>

<p><code>Func&lt;in T1, in T2, out TResult&gt;</code>也是dotnet 3.5 sp1出现的, 和<code>Action</code>基本一样, 也有1-16个参数的, 和Action不同的是这个委托都声明有返回值类型, 而不是<code>Action</code>的void.</p>

<!-- more -->


<h2>最初的写法</h2>

<p>最简单的<code>Action</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Action</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Action</span><span class="p">(</span><span class="n">Foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于复杂的委托, 比如<code>Func</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;(</span><span class="n">Foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="nf">Foo</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>匿名委托</h2>

<p>和上一个区别就是不需要创建<code>Foo</code>方法了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Action</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Action</span><span class="p">(</span><span class="k">delegate</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Predicate</code>就是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Predicate</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Predicate</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="k">delegate</span><span class="p">(</span><span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>右边的<code>new xxxx()</code> 可以省略</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Action</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">delegate</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于也是一行代码, 结尾的分号还是必须的.</p>

<p>也适用于<strong>最初的写法</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">bool</span> <span class="nf">Foo</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果使用的是dotnet 4的编译器, 可以使用<code>var</code>, 看起来就像是颠倒过来了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;(</span><span class="k">delegate</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">string</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>var</code>是编译器提供的<strong>魔法</strong>, 会自动推导<code>=</code>右边的类型, 当然前提是右边的可以推导出来类型, 无法推导出来就会编译错误.</p>

<h2>Lambda登场</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Action</span> <span class="n">foo</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;hello, world&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Action</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span> <span class="p">+</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Predicate</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;</span> <span class="n">i</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>语法方面, 无参数要写成<code>()</code>, 1个参数可以省略括号, 2个及更多参数则必须括号<code>()</code>; <code>=&gt;</code> 右边必须有表达式; 表达式结果必须是委托的返回值类型, 如果委托返回值类型是void则无所谓表达式结果类型.</p>

<p>Lambda也算是编译器魔法, 上述Lambda表达式特点都是左边的委托类型明确, 即委托的参数, 返回值也是明确的, 和<code>var</code>相似, 类型是可推导出来的, 那么就可以使用Lambda, 这样就省了写一堆的参数类型和return语句.</p>

<p>实际使用中可能是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="p">.</span><span class="n">FindAll</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">startsWith</span><span class="p">(</span><span class="s">&quot;bar&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>即除了声明变量, 参数是明确的委托类型时, 也可以使用Lambda.</p>

<p>Lambda的<code>=&gt;</code>右边也可以是多行代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">foo</span> <span class="p">=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">ThreadPool</span><span class="p">.</span><span class="n">QueueUserWorkItem</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>委托可以叠加</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Action</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">foo</span> <span class="p">+=</span> <span class="p">()=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">foo</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">foo</span> <span class="p">+=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;</span> <span class="n">i</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行时会按照先加先执行的顺序, 如果有返回值, 那么将使用最后加进来的委托的返回值.</p>

<p>同样也可以从叠加的里面减去, 不过这里是按引用, 所以需要保留一个加进去的委托引用.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Action</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">Action</span> <span class="n">bar</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">foo</span><span class="p">+=</span><span class="n">bar</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">foo</span><span class="p">-=</span><span class="n">bar</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>事件</h3>

<p>C#提供了一个<code>event</code>关键字用于声明一种特殊的委托, 可以在类外部<code>+=</code> <code>-=</code>, 但是执行委托只能在内部</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">event</span> <span class="n">EventHandle</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">Bar</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="p">+=</span> <span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Foo Event&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">Bar2</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span><span class="p">(</span><span class="k">new</span> <span class="kt">object</span><span class="p">(),</span> <span class="n">EventArgs</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认的事件实现中<code>+=</code> <code>-=</code>是线程安全的, 这点可以在反编译<code>event</code>的源码中看到, 如果要自行实现<code>event</code>的<code>+=</code> <code>-=</code>则需要自行处理线程安全.</p>

<h2>总结</h2>

<p>使用委托可以避免创建太多的中间方法, 而使用Lambda, 则可以使在写委托的时候避免大量的<code>delegate</code>关键字和重复的委托参数类型声明.</p>

<p>也许会让代码不是很容易理解, 但是只要遵循一些约定, 熟悉了还是没关系的.</p>

<p>重要的是这会少写很多重复的东西, 同样修改时也少修改一些东西.</p>

<h2>参考链接</h2>

<ul>
<li><a href="http://msdn.microsoft.com/zh-cn/library/aa664629%28v=vs.71%29">C# 语言规范 1.10 委托</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/ms173171%28v=vs.80%29.aspx">委托（C# 编程指南）</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/900fyy8e%28v=vs.80%29.aspx">委托（C# 参考）</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/x53a06bb%28v=vs.80%29.aspx">C# 关键字</a></li>
<li><a href="http://msdn.microsoft.com/zh-cn/library/bb397687.aspx">Lambda 表达式（C# 编程指南）</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bfcke1bz">Predicate<T> Delegate</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bb549311">Action&lt;T1, T2> Delegate</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/system.action">Action Delegate</a></li>
<li><a href="http://msdn.microsoft.com/en-us/library/bb534647">Func&lt;T1, T2, TResult> Delegate</a></li>
</ul>


      <p><a href="http://netwjx.github.com/blog/2012/05/19/csharp-delegate-and-lambda/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 和 Jekyll 的笔记]]></title>
    
      <category term="Jekyll" />
    
      <category term="Liquid" />
    
      <category term="Octopress" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-05-06T15:57:00+08:00</published>
    <updated>2012-05-06T15:57:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note</id>
    <content type="html"><![CDATA[<p>之前发现<a href="http://octopress.org/">Octopress</a>产生的页面中, <strong>meta</strong>标签的<strong>content</strong>属性没有处理换行, 今天尝试自己写个插件来处理这个地方, 因为没有学过Ruby, 下面的操作基本都是临时找资料, 所以记录一些重点.</p>

<p>插件代码如下</p>

<figure class='code'><figcaption><span>plugins/html_attr_filter.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#html attribute filter</span>
</span><span class='line'><span class="k">module</span> <span class="nn">HtmlAttrFilters</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">html_attr</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>        <span class="n">input</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\r\n|\r|\n/</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="o">=&gt;</span><span class="s1">&#39;&amp;#13;&amp;#10;&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\r</span><span class="s2">&quot;</span><span class="o">=&gt;</span><span class="s1">&#39;&amp;#13;&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">=&gt;</span><span class="s1">&#39;&amp;#10;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span> <span class="no">HtmlAttrFilters</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改<code>source/_includes/head.html</code>中<code>&lt;meta name="description"</code>所在的行</p>

<figure class='code'><figcaption><span>source/_includes/head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ description | strip_html | condense_spaces | truncate:150 | html_attr }}&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后<code>rake generate</code>就能看到<code>&lt;meta name="description"</code>的<strong>content</strong>已经不会有换行了, 下面说说中间涉及的相关东西.</p>

<!-- more -->


<h2>Jekyll扩展和Liquid扩展</h2>

<p><a href="http://octopress.org/">Octopress</a>是基于<a href="https://github.com/mojombo/jekyll">Jekyll</a>的, <a href="https://github.com/mojombo/jekyll">Jekyll</a>使用的模版引擎是<a href="https://github.com/Shopify/liquid/wiki">Liquid</a>, 在模版中<code>{{ a | foo | bar}}</code>的<code>foo</code>和<code>bar</code>叫做<strong>Filter</strong>, 后面将把其称为<strong>过滤器</strong>, 在<a href="https://github.com/mojombo/jekyll">Jekyll</a>的<a href="https://github.com/mojombo/jekyll/wiki/Plugins">插件开发文档</a>中有一段是关于过滤器扩展, 我主要是参考这里来做文章开始的扩展.</p>

<h3>Liquid filters</h3>

<p>You can add your own filters to the liquid system much like you can add tags above. Filters are simply modules that export their methods to liquid. All methods will have to take at least one parameter which represents the input of the filter. The return value will be the output of the filter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">AssetFilter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">asset_url</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>      <span class="s2">&quot;http://www.example.com/</span><span class="si">#{</span><span class="n">input</span><span class="si">}</span><span class="s2">?</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span><span class="p">(</span><span class="no">Jekyll</span><span class="o">::</span><span class="no">AssetFilter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Advanced</strong>: you can access the <code>site</code> object through the <code>@context.registers</code> feature of liquid. Registers a hash where arbitrary context objects can be attached to. In Jekyll you can access the site object through registers. As an example, you can access the global configuration (_config.yml) like this: <code>@context.registers[:site].config['cdn']</code>.</p>

<h3>延伸: Octopress Jekyll和Liquid所有可用的过滤器</h3>

<p><a href="http://octopress.org/">Octopress</a>扩展的过滤器在<a href="https://github.com/imathis/octopress/blob/master/plugins/octopress_filters.rb">这里</a>, 主要是从36行开始的这些:</p>

<figure class='code'><figcaption><span>plugins/octopress_filters.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">OctopressLiquidFilters</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Octopress</span><span class="o">::</span><span class="no">Date</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Used on the blog index to split posts on the &lt;!--more--&gt; marker</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">excerpt</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sr">/&lt;!--\s*more\s*--&gt;/i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">input</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/&lt;!--\s*more\s*--&gt;/i</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Checks for excerpts (helpful for template conditionals)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_excerpt</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span> <span class="o">=~</span> <span class="sr">/&lt;!--\s*more\s*--&gt;/i</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Summary is used on the Archive pages to return the first block of content from a post.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">summary</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sr">/\n\n/</span><span class="p">)</span>
</span><span class='line'>      <span class="n">input</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\n\n/</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Extracts raw content DIV from template, used for page description as </span>
</span><span class='line'>  <span class="c1"># contains complete sub-template code on main page level</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">raw_content</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="sr">/&lt;div class=&quot;entry-content&quot;&gt;(?&lt;content&gt;[\s\S]*?)&lt;\/div&gt;\s*&lt;(footer|\/article)&gt;/</span> <span class="o">=~</span> <span class="n">input</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">content</span><span class="o">.</span><span class="n">nil?</span><span class="p">)</span> <span class="p">?</span> <span class="n">input</span> <span class="p">:</span> <span class="n">content</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Escapes CDATA sections in post content</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cdata_escape</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&lt;!\[CDATA\[/</span><span class="p">,</span> <span class="s1">&#39;&amp;lt;![CDATA[&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\]\]&gt;/</span><span class="p">,</span> <span class="s1">&#39;]]&amp;gt;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Replaces relative urls with full urls</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">expand_urls</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">||=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/(\s+(href|src)\s*=\s*[&quot;|&#39;]{1})(\/[^\&quot;&#39;&gt;]*)/</span> <span class="k">do</span>
</span><span class='line'>      <span class="vg">$1</span><span class="o">+</span><span class="n">url</span><span class="o">+</span><span class="vg">$3</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Improved version of Liquid&#39;s truncate:</span>
</span><span class='line'>  <span class="c1"># - Doesn&#39;t cut in the middle of a word.</span>
</span><span class='line'>  <span class="c1"># - Uses typographically correct ellipsis (…) insted of &#39;...&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">truncate</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">length</span> <span class="o">&amp;&amp;</span> <span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/(.+)\b.+$/im</span>
</span><span class='line'>      <span class="vg">$1</span><span class="o">.</span><span class="n">strip</span> <span class="o">+</span> <span class="s1">&#39; &amp;hellip;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Improved version of Liquid&#39;s truncatewords:</span>
</span><span class='line'>  <span class="c1"># - Uses typographically correct ellipsis (…) insted of &#39;...&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">truncatewords</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="n">truncate</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">truncate</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">length</span>
</span><span class='line'>      <span class="n">truncate</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span> <span class="o">+</span> <span class="s1">&#39; &amp;hellip;&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">input</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Condenses multiple spaces and tabs into a single space</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">condense_spaces</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\s{2,}/</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Removes trailing forward slash from a string for easily appending url segments</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">strip_slash</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">input</span> <span class="o">=~</span> <span class="sr">/(.+)\/$|^\/$/</span>
</span><span class='line'>      <span class="n">input</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">input</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Returns a url without the protocol (http://)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shorthand_url</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/(https?:\/\/)(\S+)/</span> <span class="k">do</span>
</span><span class='line'>      <span class="vg">$2</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Returns a title cased string based on John Gruber&#39;s title case http://daringfireball.net/2008/08/title_case_update</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">titlecase</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'>    <span class="n">input</span><span class="o">.</span><span class="n">titlecase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">register_filter</span> <span class="no">OctopressLiquidFilters</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>def</code>后的名称即过滤器的名称.</p>

<p><a href="https://github.com/mojombo/jekyll">Jekyll</a>扩展的过滤器在<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">这里</a></p>

<p><a href="https://github.com/Shopify/liquid/wiki">Liquid</a>的标准过滤器在<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers">这里</a></p>

<h2>Ruby的字符串和正则</h2>

<p>Ruby的字符串可以使用双引号<code>"foo bar"</code>, 也可以使用单引号<code>'foo bar'</code>, 区别是:</p>

<ul>
<li>双引号中可以使用<code>\r\n</code>等转义符号, 以及<code>#{bar}</code>来引入一个变量的值, <code>bar</code>表示一个变量名.</li>
<li>单引号会将所有的字符原样保留, 包括<code>\r\n</code>, 其等价于双引号的<code>\\r\\n</code>.</li>
</ul>


<p>Ruby字符串的替换可以使用<code>gsub</code>方法, 类似一般语言中的<code>replace</code>, 第一个参数仍旧可以为正则, Ruby的文档中代码示例如下:</p>

<figure class='code'><figcaption><span>String#gsub</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[aeiou]/</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>                  <span class="c1">#=&gt; &quot;h*ll*&quot;</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/([aeiou])/</span><span class="p">,</span> <span class="s1">&#39;&lt;\1&gt;&#39;</span><span class="p">)</span>             <span class="c1">#=&gt; &quot;h&lt;e&gt;ll&lt;o&gt;&quot;</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">ord</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span><span class="p">}</span>      <span class="c1">#=&gt; &quot;104 101 108 108 111 &quot;</span>
</span><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/(?&lt;foo&gt;[aeiou])/</span><span class="p">,</span> <span class="s1">&#39;{\k&lt;foo&gt;}&#39;</span><span class="p">)</span>  <span class="c1">#=&gt; &quot;h{e}ll{o}&quot;</span>
</span><span class='line'><span class="s1">&#39;hello&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[eo]/</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span>    <span class="c1">#=&gt; &quot;h3ll*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我没有完整的看Ruby的语言规范, 根据文档的描述, 示例代码中最后一行<code>'e' =&gt; 3, 'o' =&gt; '*'</code>叫做<strong>Hash</strong>.</p>

<p>另外一个方法<code>sub</code>和<code>gsub</code>区别在: <code>sub</code>只会替换一次, <code>gsub</code>会替换所有的.</p>

<p>更多资料:</p>

<ul>
<li> <a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/tut_stdtypes.html">Ruby基础类型</a>中还有更多关于<code>String</code>类型的基础.</li>
<li> <a href="http://www.ruby-doc.org/core-1.9.3/String.html">类库参考 String</a>中有完整的<code>String</code>可使用.</li>
</ul>


<p>Ruby中正则的使用感觉和Javascript的十分象, 当然也有一些其它的语法, 详细参考<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">Ruby类库参考 Regexp</a></p>

<p>发现一个特别的地方是Javascript中正则可以使用的选项有<code>igm</code>, 而Ruby是<code>imxo</code>, 见<a href="http://www.ruby-doc.org/core-1.9.3/Regexp.html">这里</a><strong>的Options</strong></p>

      <p><a href="http://netwjx.github.com/blog/2012/05/06/ruby-and-jekyll-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WinForms开发中SynchronizationContext和Invoke的使用注意事项]]></title>
    
      <category term="CSharp" />
    
      <category term="Thread" />
    
      <category term="WinForms" />
    
    <link href="http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-29T14:26:00+08:00</published>
    <updated>2012-04-29T14:26:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke</id>
    <content type="html"><![CDATA[<p>WinForms 开发中<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>是用于非UI线程中请求修改UI元素的方法, 一般配合<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.invokerequired.aspx">Control.InvokeRequired</a>使用:</p>

<figure class='code'><figcaption><span>Control.Invoke and Control.InvokeRequired</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Form1</span> <span class="p">:</span> <span class="n">Form</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">InvokeRequired</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">Invoke</span><span class="p">((</span><span class="n">Action</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;)</span><span class="n">Foo</span><span class="p">,</span> <span class="n">text</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">textBox1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类似<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>的还有<a href="http://msdn.microsoft.com/zh-cn/library/0b1bf3y3.aspx">Control.BeginInvoke</a>和<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.endinvoke.aspx">Control.EndInvoke</a>, 它们是异步调用.</p>

<p>这些方法和属性都依赖于<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>true</code>时, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>表示窗口句柄是否已创建, 它并不是指是否<code>new Form1()</code>过, 而是指是否<code>Show()</code>过, 包括<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.show.aspx">Show</a>, <a href="http://msdn.microsoft.com/zh-cn/library/c7ykbedk.aspx">ShowDialog</a>这些调用都会使<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>true</code>.</p>

<p>而在<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.ishandlecreated.aspx">IsHandleCreated</a>为<code>false</code>时, 比如刚刚<code>new Form1()</code>, <a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.control.invokerequired.aspx">Control.InvokeRequired</a>返回<code>false</code>, 调用<a href="http://msdn.microsoft.com/zh-cn/library/zyzhdc6b.aspx">Control.Invoke</a>会抛出异常:</p>

<pre><code>System.InvalidOperationException: 在创建窗口句柄之前，不能在控件上调用 Invoke 或 BeginInvoke。
</code></pre>

<!-- more -->


<p>当在非UI线程和多个窗口之间操作时, 可能会有一些麻烦的情况发生, 这种情况可能会考虑使用<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a>.</p>

<p><a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.aspx">SynchronizationContext</a>可以在当前线程第一次<code>new Form1()</code>之后通过<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>取得, 之后使用<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.post.aspx">Post</a>和<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.send.aspx">Send</a>实现在UI线程执行指定的委托, 下面使用的<a href="http://msdn.microsoft.com/zh-cn/library/system.windows.forms.windowsformssynchronizationcontext.aspx">WindowsFormsSynchronizationContext</a>.Current在WinForms程序中等价于<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>:</p>

<figure class='code'><figcaption><span>SynchronizationContext.Post</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Form1</span> <span class="p">:</span> <span class="n">Form</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">SynchronizationContext</span> <span class="n">SyncContext</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">InitializeComponent</span><span class="p">();</span>
</span><span class='line'>        <span class="n">SyncContext</span> <span class="p">=</span> <span class="n">WindowsFormsSynchronizationContext</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">SyncContext</span><span class="p">.</span><span class="n">Post</span><span class="p">(</span><span class="k">delegate</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">textBox1</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">text</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>的文档可知它只会返回当前线程的同步上下文, 要在别的线程中访问需要自行保存它的引用, 即这里属性<code>SyncContext</code>, 使用时确保在访问<code>SyncContext</code>之前<code>new Form1()</code>过一次, 且只能一次, 否则后续的会覆盖之前的, 在符合需求的情况下会很自然想到单例模式:</p>

<figure class='code'><figcaption><span>线程安全的单例模式</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">Form1</span><span class="p">[]</span> <span class="n">_Instance</span> <span class="p">=</span> <span class="p">{</span> <span class="k">null</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">Form1</span> <span class="n">Instance</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">lock</span> <span class="p">(</span><span class="n">_Instance</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Form1</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_Instance</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前看起来是没什么问题了, 现实总是会出点问题, 比如<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.current.aspx">SynchronizationContext.Current</a>总是返回当前线程的, 结合上述的单例模式, 如果第一次访问<code>Instance</code>属性是在别的线程中, 测试代码如下:</p>

<figure class='code'><figcaption><span>在不同的线程中访问Form1.Instance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">new</span> <span class="nf">Thread</span><span class="p">(</span><span class="k">delegate</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Form1</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">Assert</span><span class="p">(</span><span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">f</span> <span class="p">=</span> <span class="n">Form1</span><span class="p">.</span><span class="n">Instance</span><span class="p">;</span>
</span><span class='line'><span class="n">Debug</span><span class="p">.</span><span class="n">Assert</span><span class="p">(</span><span class="n">SynchronizationContext</span><span class="p">.</span><span class="n">Current</span> <span class="p">==</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'><span class="n">Application</span><span class="p">.</span><span class="n">Run</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码的两处断言都通过了, 这种情况下<a href="http://msdn.microsoft.com/zh-cn/library/system.threading.synchronizationcontext.post.aspx">Form1.SyncContext.Post</a>仍旧可以调用, 但是将<strong>不产生任何效果</strong>, 也<strong>不抛出异常</strong>, 因为<code>new Form1()</code>的那个线程已经结束了, 以及那个线程并没有执行消息循环<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>.</p>

<p>如果需要在<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>之后, 相关的UI元素变得可用时再执行相关代码, 可以自行定义事件, 实现相关的触发和绑定, 确保<code>new Form1</code>和<a href="http://msdn.microsoft.com/zh-cn/library/ms157902.aspx">Application.Run</a>在同一个线程中调用, 在具体的多线程环境中解决办法会表现的完全不同.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/29/winforms-synchronizationcontext-and-invoke/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Octopress中使用代码高亮]]></title>
    
      <category term="Jekyll" />
    
      <category term="Octopress" />
    
    <link href="http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-21T16:45:00+08:00</published>
    <updated>2012-04-21T16:45:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress</id>
    <content type="html"><![CDATA[<p>在<a href="http://octopress.org">Octopress</a>中使用代码高亮, 实际就是<a href="http://jekyllrb.com/">Jekyll</a>的<a href="http://pygments.org/">Pygments</a>代码高亮, 效果如下</p>

<p>源</p>

<pre><code>``` js Javascript Hello World 
    alert('hello world');
```
</code></pre>

<p>效果</p>

<figure class='code'><figcaption><span>Javascript Hello World </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>而默认安装<a href="http://octopress.org">Octopress</a>时对代码高亮还是不支持的, 还需要安装<a href="http://python.org/">Python</a>, 我没有使用<a href="http://www.activestate.com/activepython">ActivePython</a>, 而是<a href="http://python.org/getit/">CPython</a>, 安装好后应该会有<code>c:\Windows\System32\python27.dll</code>.</p>

<p>但是现在还可能会出现<code>Could not open library’.dll’</code>的问题.</p>

<!-- more -->


<p>下面的修改会和版本有关, 我目前使用的Octopress版本是<code>2.0 2012/3/8 Commit:9f40242b1e7eb0098f0ef3c508c7bed7e647b982</code></p>

<p>将<code>Gemfile.lock</code>的<strong>33行</strong></p>

<pre><code>pygments.rb (0.1.3)
</code></pre>

<p>修改为</p>

<pre><code>pygments.rb (0.2.11)
</code></pre>

<p>以及<strong>40行</strong></p>

<pre><code>rubypython (0.5.1)
</code></pre>

<p>修改为</p>

<pre><code>rubypython (0.5.3)
</code></pre>

<p>注意上面的修改不要改变原有的缩进, 然后在命令行下执行</p>

<pre><code>bundle install
</code></pre>

<p>这将会使用<a href="http://gembundler.com/">bundler</a>这个依赖管理工具安装新版本的<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>和<a href="http://rubypython.rubyforge.org/">rubypython</a>.</p>

<p>如果还有问题请参考<a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a>的<strong>部署Python</strong>部分.</p>

<h2>Octopress代码高亮的工作原理</h2>

<p>如果上面的还是不能使用代码高亮就需要了解原理之后在自行判断如何处理.</p>

<p><a href="http://octopress.org">Octopress</a>的代码高亮实际是<a href="http://jekyllrb.com/">Jekyll</a>的代码高亮, 其中插件<code>Backtick Code Blocks</code> <code>Code Blocks</code> <code>Include Code</code> 这些插件都有代码高亮功能, 其代码高亮都使用<code>Pygments Code</code>插件, 这个插件如名字所示, 其使用的gem库是<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>.</p>

<p><a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>包含有<a href="http://pygments.org/">pygments</a>的代码, 可以在Ruby安装目录下的<code>\lib\ruby\gems\1.9.1\gems\pygments.rb-0.2.11\vendor</code>中看到.</p>

<p>使用<a href="http://gembundler.com/">bundler</a>安装<a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>时会自动的安装它依赖的<a href="http://rubypython.rubyforge.org/">rubypython</a>.</p>

<p><a href="https://github.com/tmm1/pygments.rb/">pygments.rb</a>使用<a href="http://rubypython.rubyforge.org/">rubypython</a>的方式为<a href="https://github.com/ffi/ffi">ffi</a>, 这个是ruby中调用C语言写的库的工具, 在这里是调用<code>python27.dll</code>.</p>

<h2>备用方案</h2>

<p>上述的方法还是不能正常使用代码高亮的话, 还可以使用一些后备的方法.</p>

<h3>Gist插件</h3>

<p>在<a href="https://gist.github.com/">github:gist</a>上贴代码, 并使用类似下面的代码</p>

<pre><code>{% gist 2436351 %}
</code></pre>

<p>将展示为</p>

<div><script src='https://gist.github.com/2436351.js?file='></script>
<noscript><pre><code>var parser = document.createElement('a');
parser.href = &quot;http://example.com:3000/pathname/?search=test#hash&quot;;

parser.protocol; // =&gt; &quot;http:&quot;
parser.host;     // =&gt; &quot;example.com&quot;
parser.port;     // =&gt; &quot;3000&quot;
parser.pathname; // =&gt; &quot;/pathname/&quot;
parser.search;   // =&gt; &quot;?search=test&quot;
parser.hash;     // =&gt; &quot;#hash&quot;</code></pre></noscript></div>


<p><a href="http://octopress.org/docs/plugins/gist-tag/">Gist Tag 插件的更多资料</a></p>

<h3>jsFiddle插件</h3>

<p>这个更适合用于web前端相关的html css js的展示, 使用类似下面的代码</p>

<pre><code>{% jsfiddle 3h5A4/3 %}
</code></pre>

<p>将展示为</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/3h5A4/3/embedded/js,resources,html,css,result/light/"></iframe>


<p><a href="http://octopress.org/docs/plugins/jsfiddle-tag/">jsFiddle Tag 插件的更多资料</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/04/21/using-code-in-octopress/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[捕获摄像头信息]]></title>
    
      <category term="CSharp" />
    
      <category term="DirectShow" />
    
      <category term="MF" />
    
      <category term="VLC" />
    
      <category term="Win32API" />
    
    <link href="http://netwjx.github.com/blog/2012/04/21/camera-capture/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-21T14:59:00+08:00</published>
    <updated>2012-04-21T14:59:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/21/camera-capture</id>
    <content type="html"><![CDATA[<p>最近有做一个从摄像头获取信息的程序, 期间查找了各种方案, 这里列出一些总结.</p>

<h2>实现方案</h2>

<ol>
<li><p>avicap32.dll 的实现 Win32API</p>

<p>主要使用<code>capGetDriverDescriptionA</code>函数获取获取摄像头设备, 使用<code>capCreateCaptureWindow</code>和<code>SendMessage</code>发送一系列窗口消息控制, 图像数据使用一个<code>PictrueBox</code>控件来显示, 有可以保存到avi文件.</p>

<p>其属于<strong>Video for Windows</strong>技术, 代码示例可以参考<a href="http://kadaitcha.cx/vb/capture_webcam_video.html">How to Interface to a Video Device and Capture Video and Images</a>, C#的代码示例可以参考<a href="http://www.koders.com/csharp/fidFEFD079826A1CB5ACB35A56EC33C4651456FA0A7.aspx">_VideoCapturer.cs</a>, 以及MSDN上的参考<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd757692.aspx">Video Capture </a></p>

<p>这个实现方法无法使用<strong>虚拟摄像头</strong>, <code>capGetDriverDescriptionA</code>不会返回任何虚拟摄像头设备.</p></li>
</ol>


<!-- more -->


<ol>
<li><p>DirectShow 的实现</p>

<p>这个实现的API使用起来比上面的要繁杂很多, 但是可以使用<strong>虚拟摄像头</strong>, 现在典型的IM软件其实现应该都是基于此.</p>

<p>没找到什么入门的介绍,只能从MSDN上<a href="http://msdn.microsoft.com/en-us/library/dd375454.aspx">DirectShow</a>翻看</p>

<p>可以先从<a href="http://msdn.microsoft.com/en-us/library/dd390352.aspx">Introduction to DirectShow Application Programming</a>了解典型的结构和流程, <code>Filter Graph Manager</code>是核心的部分, 以及 <a href="http://msdn.microsoft.com/en-us/library/dd375470.aspx">DirectShow System Overview</a>, 结构图:</p>

<p><img src="http://i.msdn.microsoft.com/dynimg/IC420381.png" alt="High level architecture" /></p>

<p>DirectShow 视频捕获部分<a href="http://msdn.microsoft.com/en-us/library/dd407331.aspx">Video Capture</a></p>

<p>在dotnet下有一个<a href="http://directshownet.sourceforge.net/index.html">DirectShow.Net</a>库对DirectShow的封装, 可以直接在C#和VB.Net中直接使用, 文档仍旧需要以DirectShow的文档为主, 但是DirectShow.Net提供有大量的<a href="http://sourceforge.net/projects/directshownet/files/DirectShowSamples/">代码示例</a>, 个别有些小问题, 但是简单改改都可以正常跑起来.</p></li>
<li><p>libVLC 的实现, 源自VLC播放器</p>

<p><a href="http://www.videolan.org/vlc/">VLC</a>是跨平台的影音播放器, 除了能播放传统视频外, 还可以捕获视频, <a href="http://www.videolan.org/vlc/features.html">具体的特性</a>中有描述, 可以看到Windows下<strong>Video acquisition</strong>的实现是基于DirectShow</p>

<p>而<a href="http://www.videolan.org/vlc/libvlc.html">libVLC</a>是VLC播放器的底层库</p>

<p><img src="http://images1.videolan.org/images/libvlc_stack.png" alt="Technical Diagram" /></p>

<p>在dotnet下有一个<a href="http://www.videolan.org/vlc/">VLC</a>的封装<a href="http://vlcdotnet.codeplex.com/">vlcdotnet</a>, 也是开源的, 从介绍上可以看到能在WinForm, WPF, SilverLight 5下使用, 需要依赖<strong>libvlc.dll</strong>, <strong>libvlccore.dll</strong>, 安装<a href="http://www.videolan.org/vlc/">VLC</a>播放器后在安装目录下能找到.</p></li>
<li><p>Microsoft Media Foundation 的实现</p>

<p><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms694197.aspx">MMF</a> 这个其实没什么好讲的, 主要是只有Windows Vista及以后的才支持, 说是用来代替DirectShow的, 文档仍旧是以C++为主的, 在未来也许会比较有价值.</p></li>
</ol>


<h2>综述</h2>

<ol>
<li><p>最简单的是avicap32的实现.</p></li>
<li><p>需要支持虚拟摄像头, 或者是方便使用虚拟摄像头调试, 可以使用基于DirectShow的方案.</p></li>
<li><p>需要跨平台, 或者是涉及到音视频回放之类的可以使用基于VLC的方案.</p></li>
<li><p>MMF暂时周边相关的还不是很成熟, 除非环境允许能够使用这个方案.</p></li>
</ol>


<p>我最后选择的使用DirectShow, 使用<a href="http://directshownet.sourceforge.net/index.html">DirectShow.Net</a>库, 代码麻烦了点, 但是有示例还是问题不大.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/21/camera-capture/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[截取指定字节长度的字符串]]></title>
    
      <category term="Java" />
    
    <link href="http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-15T18:35:00+08:00</published>
    <updated>2012-04-15T18:35:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length</id>
    <content type="html"><![CDATA[<p>在搜文本换行算法的时候发现了<a href="http://www.iteye.com/topic/1037773">编写一个截取字符串的函数</a>, 问题是</p>

<blockquote><p>编写一个截取字符串的函数，输入为一个<strong>字符串</strong>和<strong>字节数</strong>，输出为<strong>按字节截取的字符串</strong>。</p>

<p>但是要保证汉字<strong>不被截半个</strong>，如“我ABC”4，应该截为“我AB”，输入“我ABC汉DEF”，6，应该输出为“我ABC”而不是“我ABC+汉的半个”。</p></blockquote>

<!--more -->


<p>可能描述的有些不明确, 应该这样说</p>

<blockquote><p>编写一个截取字符串的函数, 给定<strong>字符串</strong>, <strong>编码格式</strong>, 使用前2个参数编码之后的<strong>字节数组</strong>, 以及截取<strong>字节数组的最大长度</strong>.</p>

<p>要求返回<strong>实际需要截取的长度</strong>, 不能在解码指定长度字节数组后出现<strong>半个字符</strong>的现象.</p></blockquote>

<p>那么测试代码大概是这样的(就以Java为例):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&quot;我abc的def&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">charset</span> <span class="o">=</span> <span class="s">&quot;gbk&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">charset</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">subString</span><span class="o">(</span><span class="n">str</span><span class="o">,</span> <span class="n">charset</span><span class="o">,</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="n">length</span><span class="o">),</span> <span class="n">charset</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span> <span class="n">result</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;我abc的&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一行的断言仅适用于gbk和utf-8的情况, 其它的不保证可用.</p>

<p>在开始的帖子中看到过一个实现, 等价于下面的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">subString</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">charset</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">c</span><span class="o">).</span><span class="na">getBytes</span><span class="o">(</span><span class="n">charset</span><span class="o">).</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">length</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">length</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过想想, subString返回值一般在length-3到length之间, 可以探测截取指定长度是否会有问题, 那么就可以有下面的一个实现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">detectByte</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">charset</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">i</span><span class="o">--;</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">charset</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()).</span><span class="na">equals</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再想想, 实际有差别的只是最后一个字符, 只比较最后一个字符即可:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">subString</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="n">String</span> <span class="n">charset</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span><span class="o">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">n</span><span class="o">--;</span>
</span><span class='line'>      <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">charset</span><span class="o">);</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一种会比较慢些, 后面的方法会占用更多的内存.</p>

<p>这个问题始终和编码类型有关的, 因为需要返回的是字节数组/流的长度, 而不是字符数组/串/流的长度.</p>

<p>不过这个代码的应用场景我还是想不出来, 即使有这样的场景, 也可以有别的变通办法可以不需要这样截取.</p>

      <p><a href="http://netwjx.github.com/blog/2012/04/15/substring-with-bytes-length/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在jQuery中发生'Object' 未定义]]></title>
    
      <category term="Error" />
    
      <category term="IE" />
    
      <category term="Javascript" />
    
      <category term="jQuery" />
    
    <link href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-15T13:09:00+08:00</published>
    <updated>2012-04-15T13:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery</id>
    <content type="html"><![CDATA[<p>之前发现一个比较奇怪的现象, 一个很典型的页面, 总是在打开时会在jQuery中的一个位置发生 <code>'Object' 未定义</code> 的错误, 并且只在首次打开, 编译需要时间, 加载也比平时慢点的情况下.</p>

<p>在不使用jQuery的页面也发生类似现象, 错误可能是window未定义, document未定义之类的.</p>

<p>仅ie9下有这个现象, 忽略这个错误后仍能正常打开页面, 没有任何功能有问题.</p>

<!--more -->


<p>记得以前遇到过类似的现象, 这次仔细找了下发现了这个:</p>

<p><a href="http://stackoverflow.com/questions/8389261/ie9-throws-exceptions-when-loading-scripts-in-iframe-why">IE9 throws exceptions when loading scripts in iframe. Why?</a></p>

<p>以及msdn的 <a href="http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4">APIs Are Not Available if iFrame Is Removed from DOM Tree</a></p>

<p>简单的说是在包含iframe的页面中, 如果这个iframe被移除后, 其内部的Javascript和DOM API都会无法被调用.</p>

<p>上述<strong>特性</strong>在ie9标准下有效, 往后更新的版本应该也是如此.</p>

<p>上面只是根本原因, 实际会有一些比较复杂的表现方式, 比如在jQuery中类似 <code>$('#id').appendTo('#foo')</code> 的代码将会先从DOM树中移除, 然后再添加进去, 这将会诱发上述现象.</p>

<p>其它的比如jQuery EasyUI的Layout, 它的实现方式会修改DOM结构, 这将会移除和重新创建包含iframe的元素.</p>

<h2>处理办法</h2>

<p>简单的可以是避免在IE9标准模式渲染.</p>

<p>麻烦点的就是先不设置iframe的src, 等移除iframe操作完成后再设置, 一般可以考虑在window.onload时做这个操作.</p>

<p>可以利用setTimeout让一些操作在事件触发完毕后再执行, 关于setTimeout的特性可以参考<a href="http://ejohn.org/blog/how-javascript-timers-work/">How JavaScript Timers Work</a></p>

      <p><a href="http://netwjx.github.com/blog/2012/04/15/object-undefined-in-jquery/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬山备忘]]></title>
    
      <category term="Live" />
    
      <category term="Memo" />
    
    <link href="http://netwjx.github.com/blog/2012/04/07/mountain-climbing/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-04-07T18:49:00+08:00</published>
    <updated>2012-04-07T18:49:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/04/07/mountain-climbing</id>
    <content type="html"><![CDATA[<p>前几天去爬山,记下中间需要注意的事项,有些备忘的适用场景不限于爬山.</p>

<h2>准备工作</h2>

<p>下面只是尽量列出,按需要准备</p>

<!--more -->


<ol>
<li><p>建议在确保前一天睡眠充足的情况下做下面的准备</p></li>
<li><p>提前查看天气预报,气温,决定穿着的薄厚,一般带一件挡风的外套</p>

<p>如果有可能下雨,准备把雨伞</p></li>
<li><p>查询路线,包括到山脚下的路线和爬山的路线,记录沿途的标识</p></li>
<li><p>查询路线顺便估计时间,尽量将登顶或休息放到合适的时间</p></li>
<li><p>如果是节假日,估计中间可能会堵车之类的事,考虑不容易误点的交通方式或线路</p></li>
<li><p>准备舒适的鞋子,会步行挺久,所以这个很重要,不建议穿新鞋</p></li>
<li><p>手机,电子设备充电,如果有电子地图,考虑预先下载好地图,山上可能会有无信号的区域.</p></li>
<li><p>水和零食,山上的东西会很贵,一般是山下的3倍.水不能太少,也不宜太多,以具体到每人的实际情况决定</p>

<p>容易出汗的人会需要更多的水</p>

<p>爬山途中温度会比较高,不宜带太多遇热会融化的零食,比如巧克力</p>

<p>必要的话用双肩包携带</p></li>
<li><p>如果人多,可以考虑带纸牌,野餐垫,其它想带的东西,当然还是量力而行,也估计好时间,不要负担太多</p>

<p>相机,考虑是否一定有必要,除了手机可能作为替代,目的地也许还有其它途径可以拍照</p></li>
<li><p>风景区的话,在网上找一份风景区的简单宣传资料,里面的电话 缩略地图可能会用到</p>

<p>有GPS或类似功能的设备虽然可以定位,但是山上的小路多,一般互联网上的地图都没有山上的详图,而卫星地图有可能没对准,树木茂盛等原因不容易找到自己的位置,而宣传资料上一般会有简略爬山路线</p></li>
<li><p>简单估计下山计划,如果有缆车下山速度会很快,这样可以有多一些时间在山上.</p>

<p>下山路线,如果可能的话多考虑几条路线</p>

<p>下山的实现,下山后休息的地点,交通方式</p></li>
<li><p>上述按需要记录到纸上或电子设备,确保电子设备不会中途电量耗尽</p></li>
<li><p>如果路线是人烟稀少的,请确保有一个家人知道行程安排,什么时间到什么地方</p></li>
</ol>


<h2>出行</h2>

<ol>
<li><p>携带上面提及的水和零食等,手机,钱包,钥匙,卡(公交 银行 信用卡等)</p></li>
<li><p>女的考虑怎么化妆,避免出汗后会花的</p></li>
<li><p>行进途中如果自己感觉身体状况异常,必须立即告知其它同行的人,并理解停下来实施缓解措施.状态异常比如眩晕</p>

<p>爬山消耗不小,身体处于脱水状态不是很好,别刻意不喝水,只要中途能买到水.毕竟爬山还是出来玩嘛</p>

<p>因为在一直活动,喝水不宜大口喝</p>

<p>同时也注意同行的人,有些人性格内向可能会勉强自己,避免同行的人发生状况</p></li>
<li><p>中途需要休息就休息,没必要挑战自己的极限,爬山需要耐久</p>

<p>可能会有人中途下山</p></li>
<li><p>山上会有风,出汗后不宜吹风太多,容易感冒,挡风的外套在这里比较有用</p></li>
<li><p>别做傻事,山上会有一些比较险的地形.同时也注意同行的人中哪些可能会干傻事的人,虽然这样的人很少</p></li>
<li><p>在计划的最迟下山时间即将到来前开始下山,可以考虑乘缆车下山,如果有的话</p></li>
<li><p>早点休息,一般这个时候会比较累</p></li>
</ol>


<h2>其它事项</h2>

<ol>
<li><p>任何人多的地方都要注意小偷,避免注意力被转移</p>

<p>给被偷留下二手准备,至少要有一个人做这样的准备,准备如怎么回家</p></li>
</ol>


      <p><a href="http://netwjx.github.com/blog/2012/04/07/mountain-climbing/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Play/Android Market 解锁]]></title>
    
      <category term="Android" />
    
    <link href="http://netwjx.github.com/blog/2012/03/25/unlock-google-play-android-market/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-03-25T22:09:00+08:00</published>
    <updated>2012-03-25T22:09:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/03/25/unlock-google-play-android-market</id>
    <content type="html"><![CDATA[<p>Android Market刚改名叫Google Play不久,不明白为什么改成这个名字,难道Play后面还有Game?</p>

<p>说说标题上的事,如果使用浏览器查找应用,应用是免费的,但是安装哪里会提示&#8221;此商品无法在您设备所在的国家/地区安装&#8221;.</p>

<p>在Google帐号设置里面怎么改都没作用.</p>

<p>而用手机搜索,要么搜不到,要么搜到了点安装仍旧是上面的提示.</p>

<p>上面提示的依据只依据一个 <strong>手机卡的网络运营商</strong>.</p>

<p>搜到一些解决办法是使用Market Enabler,但是我尝试的结果是没作用,应该是升级到了Google Play以前的方法失效了.</p>

<!--more -->


<p>继续搜索发现了<a href="https://play.google.com/store/apps/details?id=com.evanhe.marketunlocker">Market Unlocker</a> ,使用后发现可用,下面基本是Market Unlocker的中文使用说明.</p>

<h2>Market Unlocker</h2>

<p>这个软件只能让手机可以安装哪些限制特定地区安装的软件,比如<a href="https://play.google.com/store/apps/details?id=com.com2us.inotia3.normal.freefull.google.global.android.common">Inotia 3</a> ,不可能免费安装收费的软件.</p>

<p>这个软件需要手机已经root, 或者是可以获取到root权限(我这使用小米手机会在获取root权限时提示).</p>

<p>需要wifi,并开飞行模式.</p>

<p>开始.</p>

<p><a href="https://play.google.com/store/apps/details?id=com.evanhe.marketunlocker">下载地址</a> , 或在手机上搜 Market Unlocker , 开发者是Evan He的那个 , 免费版的即可.</p>

<p>切换到飞行模式</p>

<p>安装好后会看到应用<strong>市场解锁</strong>,打开后<strong>主页</strong>中打开<strong>启用解锁</strong>,这将会有一系列的提示,如果没root这里将会失败.</p>

<p>可以在<strong>市场</strong>里面选择模拟的运营商,默认是Verizon.</p>

<p>退出,到系统设置 - 程序 - 程序管理 - 全部,找到<strong>Google Play 商店</strong>,进去后<strong>清除数据</strong>.</p>

<p>重启手机.</p>

<p>打开Wifi,在开飞行模式的情况下.</p>

<p>等待Google服务同步完成或刷新Gmail.(这段是Market Unlocker的说明,我不记得我有这步操作)</p>

<p>打开Google Play,查找需要安装的软件并安装.</p>

<p>最后关闭飞行模式.</p>

<h2>吐槽</h2>

<p>免费的应用也设置地区限制,这是什么逻辑嘛.即使是收费的,地区限制也完全没必要,只要能支付就行了.</p>

<p>况且上面的限制完全没有发挥任何作用,只是折腾人,或者使用其它的应用市场.</p>

<h2>对艾诺迪亚 3(Inotia 3)的吐槽</h2>

<p>这个游戏在480x854的解析度上看起来画面不精细,可能是我习惯了NDS哪种2D游戏的像素感了.</p>

<p>这个游戏不提供多点触控支持,即使设备支持,结果就是控制移动的时候点技能没效果,而点技能没放开的话也不能移动.再加上下面的原因会很让人觉得这设计真坑人.</p>

<p>人物的卡位,在场景中移动,遇到阻挡会自动向旁边划开,但是在战斗时前面有队友或者敌人挡住会被<em>粘住</em>,不大容易做到擦身而过,人物占位空间比实际看到的稍微大一点.</p>

<p>再加上战斗时队友不会自动让路,自动让路也仅仅支持相邻的2个,前面再挡一个自己的队友就卡住了.</p>

<p>还有一些队友AI的毛病,繁琐的物品和队伍界面.</p>

<p>总感觉玩起来不那么顺畅,熟悉了能在中间环节上快点,但是还是感觉繁琐.</p>

<p>上述这些可能是因为要兼容旧版本做的一些妥协吧.</p>

      <p><a href="http://netwjx.github.com/blog/2012/03/25/unlock-google-play-android-market/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 笔记]]></title>
    
      <category term="Octopress" />
    
      <category term="Ruby" />
    
    <link href="http://netwjx.github.com/blog/2012/03/18/octopress-note/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-03-18T14:43:00+08:00</published>
    <updated>2012-03-18T14:43:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/03/18/octopress-note</id>
    <content type="html"><![CDATA[<p>Octopress是一个blog框架, 基于Jekyll, 但是增加了很多方便的脚本, 并提供和github集成.</p>

<p>blog是生成静态页, 配合github-pages可以使用默认的2级域名或者绑定自己的顶级域名使用, 当然也可以部署到自己的服务器上.</p>

<p>这里主要是以我自己的环境来写, 即在Windows下使用Octopress. 因为Win下折腾这个中间出的问题很多.</p>

<!--more -->


<h2>安装前提</h2>

<p>Octopress使用ruby编写, 所以需要ruby, Win下使用RubyInstaller</p>

<ul>
<li><a href="http://rubyinstaller.org">http://rubyinstaller.org</a> 因为神奇的原因我这里无法访问它.</li>
<li><a href="http://rubyforge.org/projects/rubyinstaller/">http://rubyforge.org/projects/rubyinstaller/</a> 这里可以下载到, 我现在看到的RubyInstaller最高版本是1.9.3-p125</li>
</ul>


<p>上面的网页先别关, 还有一个devkit需要下载, 全称Development Kit, 用途是编译一些ruby中使用的c模块, 常见的比如sqlite</p>

<p>那么下载的文件有</p>

<ul>
<li>rubyinstaller-1.9.3-p125.exe</li>
<li>devkit-3.4.5r3-20091110.7z</li>
</ul>


<p>Octopress可以到<a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a> 下载一份zip包, 如果已经有git环境则直接</p>

<pre><code>git clone git://github.com/imathis/octopress.git myoctopress
</code></pre>

<p>我这里使用git, 那么应该会得到一个文件夹(下面提到将名为myoctopress目录), 内容和<a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a> 上显示的一样</p>

<p>前期准备基本完成, 如果没有git而打算使用git看下段</p>

<h3>没有git, 打算使用git</h3>

<p>Win下使用简单的git是TortoiseGit</p>

<ul>
<li><a href="http://code.google.com/p/tortoisegit/">http://code.google.com/p/tortoisegit/</a> 因为神奇的原因它可能有时会无法访问</li>
<li><a href="http://goo.gl/ZpyYx">http://goo.gl/ZpyYx</a> 我在金山快盘的共享, 密码为IYzDsp</li>
</ul>


<p>由于TortoiseGit的后端使用的是Git for Windows <a href="http://code.google.com/p/msysgit/">http://code.google.com/p/msysgit/</a> , 所以下载的文件有</p>

<ul>
<li>TortoiseGit-1.7.6.0-32bit.msi</li>
<li>Git-1.7.8-preview20111206.exe</li>
</ul>


<p>版本可能不同, 名字应该都是相似的, 先安装<code>Git-1.7.8-preview20111206.exe</code>, 然后是<code>TortoiseGit-1.7.6.0-32bit.msi</code>, 然后右键菜单中就有TortoiseGit项了.</p>

<p>建议将Git for Windows安装目录的bin目录加入到环境变量Path中, 默认是<code>C:\Program Files\Git\bin</code>, 因为Octopress中会使用系统中的git命令</p>

<h2>安装Ruby</h2>

<p><code>rubyinstaller-1.9.3-p125.exe</code>建议安装到<code>c:\ruby</code>, 因为devkit中的默认配置就是这个路径</p>

<p>确保<code>C:\Ruby\bin</code>在你的环境变量Path中, 下面使用的ruby gem命令都需要</p>

<p>然后是devkit-3.4.5r3-20091110.7z解压到<code>c:\ruby</code>.</p>

<p>如果不是这个路径, 解压之后还需要到<code>devkit\msys\1.0.11\etc\fstab</code>修改文件内容.</p>

<p>如果路径包含空格, 则需要将路径转换成8.3格式短文件名, 方法是<code>dir /-n</code>, 就可以看到8.3格式的</p>

<p>建议将<code>C:\Ruby\devkit\msys\1.0.11\bin</code>也加入到环境变量Path中, 可以避免后续在安装ruby的fsevent模块时出现一个没有找到命令行的错误</p>

<p>可以运行<code>C:\Ruby\devkit\msys\1.0.11\msys.bat</code>看看, 这个是msys的环境, 一个最小的UNIX环境, 类似Cygwin, 但是原理不同, 更快, 更小, 前面Git for Windows也是基于这个.</p>

<p>打开<code>C:\Ruby\lib\ruby\1.9.1\i386-mingw32\rbconfig.rb</code>, 找到62行附近, 查找<code>-Wno-missing-field-initializers</code>, 将其删除, 我这里是复制一份新的修改并注释原来的</p>

<pre><code>#CONFIG["warnflags"] = "-Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-missing-field-initializers -Wno-long-long"
CONFIG["warnflags"] = "-Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-long-long"
</code></pre>

<p>这么做可以避免在安装ruby的本地c模块时调用gcc失败的问题, 我遇到的是无法安装RedCloth模块, 可能是devkit里面附带的gcc版本旧, 不支持这个选项吧.</p>

<h3>修改gem的源服务器地址</h3>

<p>因为神奇的原因gem可能会下载任何东西失败, 修改后可解决这个问题</p>

<p>gem是ruby的包管理程序, 类似debian的apt-get</p>

<p>打开命令行</p>

<pre><code>gem sources --remove http://rubygems.org/
gem sources -a http://ruby.taobao.org/
gem sources -l
*** CURRENT SOURCES ***

http://ruby.taobao.org
</code></pre>

<p>最后一个命令<code>gem sources -l</code>是查看当前的配置, 确保输出和上述的一致</p>

<h2>安装Octopress</h2>

<p>前面那么多准备都是为了这里, 主要参考http://octopress.org/docs/setup/.</p>

<p>下述的命令行工作目录都是在myoctopress目录, 为了方便, 你可以在myoctopress目录创建一个cmd.cmd, 内容是</p>

<pre><code>@start
</code></pre>

<p>命令行</p>

<pre><code>gem install bundler
</code></pre>

<p>会需要一会时间, 完成后打开myoctopress目录下的Gemfile, 将<code>source "http://rubygems.org"</code>注释掉, 添加<code>source 'http://ruby.taobao.org/'</code>, 如下</p>

<pre><code>#source "http://rubygems.org"
source 'http://ruby.taobao.org/'
</code></pre>

<p>这样可以让bundle不会因为神奇的原因而容易出错, 然后命令行</p>

<pre><code>bundle install
</code></pre>

<p>这会安装Octopress相关依赖的包, 比前一个命令需要更多的时间, 如果打算使用github的话可以看看下一段.</p>

<p><code>bundle install</code>执行完毕后再</p>

<pre><code>rake install
</code></pre>

<p>这个会创建好相关的目录结构</p>

<p>接下来是设置如何部署, 参考<a href="http://octopress.org/docs/deploying/">http://octopress.org/docs/deploying/</a>, 我这里使用github</p>

<h3>github上创建代码库</h3>

<p><a href="http://pages.github.com">http://pages.github.com</a> 上有详细的说明, 我使用的是User Pages, 比如我的用户名是netwjx, 那么创建项目 netwjx.github.com</p>

<p>后续还有关于域名绑定什么的就不多说了, 主要是修改CNAME记录和A记录的</p>

<p>创建好之后能看到其git访问的地址, 比如我是 <code>git@github.com:netwjx/netwjx.github.com.git</code></p>

<p>按照github上的说明将提交用的ssh public key都折腾好, 如果以前用过github最好</p>

<h2>设置部署github</h2>

<p>参考<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a> , 命令行</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>输入git的地址,比如我的是 <code>git@github.com:netwjx/netwjx.github.com.git</code></p>

<p>然后这个命令</p>

<ul>
<li>会把myoctopress中原来clone时的代码库origin改名为octopress,并将刚刚输入git地址作为origin的代码库地址.</li>
<li>会把当前分支名称从master改为source</li>
<li>其它Url的设置还有deploy目录设置等</li>
</ul>


<p>中间需要用到git命令, 所以之前安装Git for Windows后必须将其<code>bin</code>目录加入到Path中</p>

<p>中间可能会在<code>My Octopress Page is coming soon</code>之后出现<code>hellip;</code>不是内部命令之类的错误, 可以不用管, 如果一定不想要出现这个错误可以修改myoctopress目录下的Rakefile, 搜<code>My Octopress Page is coming soon</code>, 在<code>&amp;hellip;</code>前加个<code>^</code>(这个是Windows cmd的转义符), 如下</p>

<pre><code>system "echo 'My Octopress Page is coming soon ^&amp;hellip;' &gt; index.html"
</code></pre>

<p><code>rake setup_github_pages</code>命令最后出现<code>Now you can deploy to xxxxxxx with `rake deploy`</code>, 就表示成功.</p>

<p>接下来</p>

<pre><code>rake generate
</code></pre>

<p>将会在myoctopress的public目录中生成静态的文件, 可以使用下面的命令预览</p>

<pre><code>rake preview
</code></pre>

<p>通过<a href="http://localhost:4000">http://localhost:4000</a>来访问, 现在应该只能看到空白的网站.</p>

<h2>第一篇blog</h2>

<p>参考<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></p>

<pre><code>rake new_post["title"]
</code></pre>

<p>将会在<code>source/_posts</code>目录中创建指定名称的markdown文件, 文件名前面会自动加上年月日. title不能有中文, 因为这个名字会在url中使用, 中文标题可以打开这个markdown文件后自行修改, 刚刚创建的markdown文件内容如下</p>

<pre><code>---
layout: post
title: "title"
date: 2012-03-18
comments: true
categories:
---
</code></pre>

<p>这段除了title改成自己需要的, 别的可以先不管, 详细的见这段开始提到的参考.</p>

<p>如果刚刚没关闭<code>rake preview</code>, 那么现在浏览<a href="http://localhost:4000">http://localhost:4000</a>应该能看到有了新的变化.</p>

<h2>提交到github</h2>

<p>先把<code>rake preview</code>关掉, 命令行</p>

<pre><code>rake deploy
</code></pre>

<p>如果是直接使用TortoiseGit, 而不是Git for Windows的话, 这里将会因为ssh配置相关而发生错误. 修改配置会另起一篇来说, 这里可以自行使用TortoiseGit来提交.</p>

<p>先说明一下目录的情况</p>

<ul>
<li><code>myoctopress</code> 是source分支</li>
<li><code>myoctopress/_deploy</code> 是master分支</li>
</ul>


<p>如果仅仅需要看到网站, 只需要在<code>myoctopress/_deploy</code>目录中用TortoiseGit的<code>Git Sync</code>, Remote Branch选择<code>master</code>, 然后Push即可</p>

<p>如果同时需要将原始的markdown等文件也提交到github, 就是在<code>myoctopress</code>目录做类似的操作.</p>

<p>先在<code>myoctopress</code>目录中把已经修改的文件和<code>source\_posts</code>目录下的新文件都<code>Git Commit -&gt; "source"</code></p>

<p>然后<code>Git Sync</code>, 在Remote Branch选择<code>source</code>, 如果没有这个分支就自己填上, 再Push.</p>

<p>如果Push请确认<code>Git Sync</code>时的Remote URL设置的是<code>origin</code>, 另外一个<code>octopress</code>是Octopress项目的Url, 所以Push会失败, 除非你获得了操作Octopress项目的权限.</p>

<h3>结构说明</h3>

<p>github上的<code>master</code>(网站)和<code>source</code>(原始文件), 与本地的对应分支/目录是平等的关系, 上面提交到github不能理解为从属关系, 了解git的话这个很容易理解.</p>

<p>可以按照需要将<code>myoctopress/_deploy</code> (master分支) 目录放到任何Web服务器(当然会有一些绝对路径有问题)</p>

<p>同样<code>myoctopress</code>(source分支)可以不向github上Push, 而保留在自己本机, 或者Push到U盘等其它备份的地方, 熟悉git的话这是很自然的事.</p>

<h2>还剩下些</h2>

<p>Octopress的文档中github相关都是使用git命令行, 上述的操作在Push时使用的是TortoiseGit,  使用Git for Windows操作github上的代码库以后另起一篇来说.</p>

<p>这些是根据昨天的操作回忆而写的, 所以可能有疏漏和记忆偏差.</p>

<p>Octopress的模版, 评论, 还有其它扩展可以Google, 以后用到也许会写些文章.</p>

<p>Octopress自身的东西在<a href="http://octopress.org/docs/">http://octopress.org/docs/</a>上很全.</p>

<p>我没学过ruby, 上面提及ruby相关的地方很可能概念有错.</p>

      <p><a href="http://netwjx.github.com/blog/2012/03/18/octopress-note/#comments">查看评论</a></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    
      <category term="Hello World" />
    
    <link href="http://netwjx.github.com/blog/2012/03/18/hello-octopress/"/>
    <author>
      <name><![CDATA[netwjx]]></name>
      <uri>http://netwjx.github.com/</uri>
    </author>
    <published>2012-03-18T02:34:00+08:00</published>
    <updated>2012-03-18T02:34:00+08:00</updated>
    <id>http://netwjx.github.com/blog/2012/03/18/hello-octopress</id>
    <content type="html"><![CDATA[<p>终于折腾起来了</p>

<p>深深的感觉到在win上折腾实在是极端的痛苦啊</p>

<p>基本是四处碰壁,还都是很难找到答案的</p>

<p>5个小时就这样过去了</p>

      <p><a href="http://netwjx.github.com/blog/2012/03/18/hello-octopress/#comments">查看评论</a></p>]]></content>
  </entry>
  
</feed>
